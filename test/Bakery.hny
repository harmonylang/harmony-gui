const NUM_THREADS = 3
const NROUNDS = 1

sequential entering, number

entering = { i:False for i in {1..NUM_THREADS} }
number = { i:0 for i in {1..NUM_THREADS} }

def lock(i):
    entering[i] = True
    number[i] = 1 + max({ number[j] for j in {1..NUM_THREADS} })
    entering[i] = False
    for j in {1..NUM_THREADS}:
        await not entering[j]
        await (number[j] == 0) or ((number[j], j) >= (number[i], i))

def unlock(i):
    number[i] = 0

def process(self):
    for i in {1..NROUNDS}:
        lock(self)
        @cs: assert atLabel(cs) == { (process, self): 1 }
        unlock(self)

for i in {1..NUM_THREADS}:
    spawn process(i)
