<html>
<head>
  <meta charset='UTF-8'></meta>
  <style>
#table-wrapper {
  position:relative;
}
#table-scroll {
  height:200px;
  overflow:auto;  
}
#table-wrapper table {
  width:100%;
}
#table-wrapper table * {
  color:black;
}
#table-wrapper table thead th .text {
  position:absolute;   
  top:-20px;
  z-index:2;
  height:20px;
  width:35%;
  border:1px solid red;
}
table {
    border-collapse: collapse;
    border-style: hidden;
}
table td, table th {
    border: 1px solid black;
}

  </style>
</head>
<body>
<table>
  <tr>
    <td colspan='2'>
<table border='1'>
  <thead>
    <tr>
      <th colspan='4' style='color:red;'>
        Issue: Safety violation
      </th>
      <th align='center' colspan='2'>
        Shared Variables
      </th>
      <th align='center' colspan='2'>
        Output
      </th>
    </tr>
    <tr>
      <th align='center' rowspan='1'>
        Turn
      </th>
      <th align='center' rowspan='1'>
        Thread
      </th>
      <th align='center' rowspan='1'>
        Instructions Executed
      </th>
      <th align='center' rowspan='1'>
        &nbsp;PC&nbsp;
      </th>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>x</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>y</td>
</tr><tr>
    </tr>
  </thead>
  <tbody id='mestable'>
<tr id='mes0'>
  <td align='right'>
    1&nbsp;
  </td>
  <td>
    T0: __init__()  </td>
  <td>
    <canvas id='timeline0' width='300px' height='10px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log0' border='1'>
    </table>
  </td>
</tr>
  </tbody>
</table>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td colspan='2'>
      <h3 style='color:blue;'>
        <div id='coderow'>
        </div>
      </h3>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td valign='top'>
<div id='table-wrapper'>
  <div id='table-scroll'>
    <table border='1'>
      <tbody>
        <tr id='P0'>
          <td align='right'>
            <a name='P0'>0</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method __init__' id='C0'>
              Frame __init__ ()
            </span>
          </td>
        </tr>
        <tr id='P1'>
          <td align='right'>
            <a name='P1'>1</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 49' id='C1'>
              Jump 49
            </span>
          </td>
        </tr>
        <tr id='P2'>
          <td align='right'>
            <a name='P2'>2</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method diner' id='C2'>
              Frame diner which
            </span>
          </td>
        </tr>
        <tr id='P3'>
          <td align='right'>
            <a name='P3'>3</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C3'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P4'>
          <td align='right'>
            <a name='P4'>4</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of which' id='C4'>
              LoadVar which
            </span>
          </td>
        </tr>
        <tr id='P5'>
          <td align='right'>
            <a name='P5'>5</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C5'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P6'>
          <td align='right'>
            <a name='P6'>6</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of which' id='C6'>
              LoadVar which
            </span>
          </td>
        </tr>
        <tr id='P7'>
          <td align='right'>
            <a name='P7'>7</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable which' id='C7'>
              DelVar which
            </span>
          </td>
        </tr>
        <tr id='P8'>
          <td align='right'>
            <a name='P8'>8</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C8'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P9'>
          <td align='right'>
            <a name='P9'>9</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C9'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P10'>
          <td align='right'>
            <a name='P10'>10</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable N' id='C10'>
              Load N
            </span>
          </td>
        </tr>
        <tr id='P11'>
          <td align='right'>
            <a name='P11'>11</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying %' id='C11'>
              2-ary %
            </span>
          </td>
        </tr>
        <tr id='P12'>
          <td align='right'>
            <a name='P12'>12</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C12'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P13'>
          <td align='right'>
            <a name='P13'>13</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in (left, right)' id='C13'>
              StoreVar (left, right)
            </span>
          </td>
        </tr>
        <tr id='P14'>
          <td align='right'>
            <a name='P14'>14</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { False, True }' id='C14'>
              Push { False, True }
            </span>
          </td>
        </tr>
        <tr id='P15'>
          <td align='right'>
            <a name='P15'>15</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C15'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P16'>
          <td align='right'>
            <a name='P16'>16</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 46 if the value is False' id='C16'>
              JumpCond False 46
            </span>
          </td>
        </tr>
        <tr id='P17'>
          <td align='right'>
            <a name='P17'>17</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?acquire' id='C17'>
              Push ?acquire
            </span>
          </td>
        </tr>
        <tr id='P18'>
          <td align='right'>
            <a name='P18'>18</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?forks' id='C18'>
              Push ?forks
            </span>
          </td>
        </tr>
        <tr id='P19'>
          <td align='right'>
            <a name='P19'>19</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of left' id='C19'>
              LoadVar left
            </span>
          </td>
        </tr>
        <tr id='P20'>
          <td align='right'>
            <a name='P20'>20</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C20'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P21'>
          <td align='right'>
            <a name='P21'>21</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C21'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P22'>
          <td align='right'>
            <a name='P22'>22</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C22'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P23'>
          <td align='right'>
            <a name='P23'>23</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C23'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P24'>
          <td align='right'>
            <a name='P24'>24</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?acquire' id='C24'>
              Push ?acquire
            </span>
          </td>
        </tr>
        <tr id='P25'>
          <td align='right'>
            <a name='P25'>25</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?forks' id='C25'>
              Push ?forks
            </span>
          </td>
        </tr>
        <tr id='P26'>
          <td align='right'>
            <a name='P26'>26</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of right' id='C26'>
              LoadVar right
            </span>
          </td>
        </tr>
        <tr id='P27'>
          <td align='right'>
            <a name='P27'>27</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C27'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P28'>
          <td align='right'>
            <a name='P28'>28</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C28'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P29'>
          <td align='right'>
            <a name='P29'>29</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C29'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P30'>
          <td align='right'>
            <a name='P30'>30</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C30'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P31'>
          <td align='right'>
            <a name='P31'>31</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?release' id='C31'>
              Push ?release
            </span>
          </td>
        </tr>
        <tr id='P32'>
          <td align='right'>
            <a name='P32'>32</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?forks' id='C32'>
              Push ?forks
            </span>
          </td>
        </tr>
        <tr id='P33'>
          <td align='right'>
            <a name='P33'>33</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of left' id='C33'>
              LoadVar left
            </span>
          </td>
        </tr>
        <tr id='P34'>
          <td align='right'>
            <a name='P34'>34</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C34'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P35'>
          <td align='right'>
            <a name='P35'>35</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C35'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P36'>
          <td align='right'>
            <a name='P36'>36</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C36'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P37'>
          <td align='right'>
            <a name='P37'>37</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C37'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P38'>
          <td align='right'>
            <a name='P38'>38</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?release' id='C38'>
              Push ?release
            </span>
          </td>
        </tr>
        <tr id='P39'>
          <td align='right'>
            <a name='P39'>39</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?forks' id='C39'>
              Push ?forks
            </span>
          </td>
        </tr>
        <tr id='P40'>
          <td align='right'>
            <a name='P40'>40</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of right' id='C40'>
              LoadVar right
            </span>
          </td>
        </tr>
        <tr id='P41'>
          <td align='right'>
            <a name='P41'>41</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C41'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P42'>
          <td align='right'>
            <a name='P42'>42</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C42'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P43'>
          <td align='right'>
            <a name='P43'>43</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C43'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P44'>
          <td align='right'>
            <a name='P44'>44</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C44'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P45'>
          <td align='right'>
            <a name='P45'>45</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 14' id='C45'>
              Jump 14
            </span>
          </td>
        </tr>
        <tr id='P46'>
          <td align='right'>
            <a name='P46'>46</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable left' id='C46'>
              DelVar left
            </span>
          </td>
        </tr>
        <tr id='P47'>
          <td align='right'>
            <a name='P47'>47</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable right' id='C47'>
              DelVar right
            </span>
          </td>
        </tr>
        <tr id='P48'>
          <td align='right'>
            <a name='P48'>48</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C48'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P49'>
          <td align='right'>
            <a name='P49'>49</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C49'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P50'>
          <td align='right'>
            <a name='P50'>50</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(2)' id='C50'>
              Push PC(2)
            </span>
          </td>
        </tr>
        <tr id='P51'>
          <td align='right'>
            <a name='P51'>51</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable x' id='C51'>
              Store x
            </span>
          </td>
        </tr>
        <tr id='P52'>
          <td align='right'>
            <a name='P52'>52</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C52'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P53'>
          <td align='right'>
            <a name='P53'>53</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(49)' id='C53'>
              Push PC(49)
            </span>
          </td>
        </tr>
        <tr id='P54'>
          <td align='right'>
            <a name='P54'>54</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable y' id='C54'>
              Store y
            </span>
          </td>
        </tr>
        <tr id='P55'>
          <td align='right'>
            <a name='P55'>55</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C55'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P56'>
          <td align='right'>
            <a name='P56'>56</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C56'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P57'>
          <td align='right'>
            <a name='P57'>57</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C57'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P58'>
          <td align='right'>
            <a name='P58'>58</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C58'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P59'>
          <td align='right'>
            <a name='P59'>59</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C59'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P60'>
          <td align='right'>
            <a name='P60'>60</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C60'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P61'>
          <td align='right'>
            <a name='P61'>61</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C61'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P62'>
          <td align='right'>
            <a name='P62'>62</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C62'>
              DelVar result
            </span>
          </td>
        </tr>
      </body>
    </table>
  </div>
</div>
    </td>
    <td valign='top'>
<table border='1'
  <thead>
    <tr>
      <th colspan='4'>Threads</th>
    </tr>
    <tr>
      <th>
        ID
      </th>
      <th>
        Status
      </th>
      <th>
        Stack Trace
      </th>
      <th>
        Stack Top
      </th>
    </tr>
  </thead>
  <tbody id='threadtable'>
    <tr id='thread0'>
      <td align='center'>
        T0
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo0' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
  </tbody>
</table>
    </td>
  </tr>
</table>
<script>
var nthreads = 1;
var nmegasteps = 1;
var vardir = [
  ['x'],
  ['y']
];
var state =
{
  "issue": "Safety violation",
  "macrosteps": [
    {
      "id": "1",
      "len": "1",
      "tid": "0",
      "ctx": "7fc21b4c1b59",
      "name": "__init__()",
      "microsteps": [
        {
          "shared": { },
          "npc": "1",
          "fp": "1",
          "trace": [
            {
              "pc": "1",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } },
              "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },
        {
          "npc": "49",
          "push": [ ],
          "pc": "1"
        },
        {
          "npc": "50",
          "atomic": "2",
          "push": [ ],
          "pc": "49"
        },
        {
          "npc": "51",
          "push": [ { "type": "pc", "value": "2" } ],
          "pc": "50"
        },
        {
          "shared": { "x": { "type": "pc", "value": "2" } },
          "npc": "52",
          "pop": "1",
          "push": [ ],
          "pc": "51"
        },
        {
          "npc": "53",
          "atomic": "1",
          "push": [ ],
          "pc": "52"
        },
        {
          "npc": "54",
          "push": [ { "type": "pc", "value": "49" } ],
          "pc": "53"
        },
        {
          "shared": { "x": { "type": "pc", "value": "2" }, "y": { "type": "pc", "value": "49" } },
          "npc": "55",
          "pop": "1",
          "push": [ ],
          "pc": "54"
        },
        {
          "npc": "56",
          "readonly": "1",
          "push": [ ],
          "pc": "55"
        },
        {
          "npc": "57",
          "atomic": "2",
          "push": [ ],
          "pc": "56"
        },
        {
          "npc": "58",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "57"
        },
        {
          "npc": "58",
          "failure": "Harmony assertion failed",
          "mode": "failed",
          "pop": "1",
          "push": [ ],
          "pc": "58"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7fc21fa000e9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fc21fa000e9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "58",
          "trace": [
            {
              "pc": "58",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } },
              "sp": 0
            }
          ],
          "failure": "Harmony assertion failed",
          "this": { "type": "dict", "value": [] },
          "atomic": "2",
          "readonly": "1",
          "mode": "failed"
        }
      ]
    }
  ],
  "code": [
    "Frame __init__ ()",
    "Jump 49",
    "Frame diner which",
    "Push ()",
    "LoadVar which",
    "2-ary ListAdd",
    "LoadVar which",
    "DelVar which",
    "Push 1",
    "2-ary +",
    "Load N",
    "2-ary %",
    "2-ary ListAdd",
    "StoreVar (left, right)",
    "Push { False, True }",
    "Choose",
    "JumpCond False 46",
    "Push ?acquire",
    "Push ?forks",
    "LoadVar left",
    "Address",
    "Address",
    "Load",
    "Pop",
    "Push ?acquire",
    "Push ?forks",
    "LoadVar right",
    "Address",
    "Address",
    "Load",
    "Pop",
    "Push ?release",
    "Push ?forks",
    "LoadVar left",
    "Address",
    "Address",
    "Load",
    "Pop",
    "Push ?release",
    "Push ?forks",
    "LoadVar right",
    "Address",
    "Address",
    "Load",
    "Pop",
    "Jump 14",
    "DelVar left",
    "DelVar right",
    "Return",
    "AtomicInc(eager)",
    "Push PC(2)",
    "Store x",
    "AtomicDec",
    "Push PC(49)",
    "Store y",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push False",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Return",
    "DelVar result"
  ],
  "explain": [
    "start of method __init__",
    "set program counter to 49",
    "start of method diner",
    "push constant ()",
    "push the value of which",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of which",
    "delete method variable which",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "push value of shared variable N",
    "pop 2 values and push the result of applying %",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in (left, right)",
    "push constant { False, True }",
    "pop a set value and push one of its elements",
    "pop a value and jump to 46 if the value is False",
    "push constant ?acquire",
    "push constant ?forks",
    "push the value of left",
    "combine the top two values on the stack into an address and push the result",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "discard the top value on the stack",
    "push constant ?acquire",
    "push constant ?forks",
    "push the value of right",
    "combine the top two values on the stack into an address and push the result",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "discard the top value on the stack",
    "push constant ?release",
    "push constant ?forks",
    "push the value of left",
    "combine the top two values on the stack into an address and push the result",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "discard the top value on the stack",
    "push constant ?release",
    "push constant ?forks",
    "push the value of right",
    "combine the top two values on the stack into an address and push the result",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "discard the top value on the stack",
    "set program counter to 14",
    "delete method variable left",
    "delete method variable right",
    "restore caller method state and push result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(2)",
    "pop a value and store it in shared variable x",
    "decrement atomic counter of context",
    "push constant PC(49)",
    "pop a value and store it in shared variable y",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant False",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "restore caller method state and push result",
    "delete method variable result"
  ],
  "locations": {
    "43": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "8", "column": "13", "endline": "8", "endcolumn": "34", "code": "            release(?forks[right])" },
    "50": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "11", "column": "9", "endline": "11", "endcolumn": "13", "code": "LB: x = diner" },
    "62": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "1", "column": "1", "endline": "14", "endcolumn": "7", "code": "def diner(which):" },
    "42": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "8", "column": "13", "endline": "8", "endcolumn": "34", "code": "            release(?forks[right])" },
    "2": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "1", "column": "1", "endline": "10", "endcolumn": "1", "code": "def diner(which):" },
    "51": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "7", "code": "LB: x = diner" },
    "3": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "24", "endline": "2", "endcolumn": "45", "code": "    let left, right = (which, (which + 1) % N):" },
    "12": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "24", "endline": "2", "endcolumn": "45", "code": "    let left, right = (which, (which + 1) % N):" },
    "56": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "13", "column": "1", "endline": "13", "endcolumn": "12", "code": "assert False" },
    "9": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "32", "endline": "2", "endcolumn": "40", "code": "    let left, right = (which, (which + 1) % N):" },
    "41": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "8", "column": "22", "endline": "8", "endcolumn": "33", "code": "            release(?forks[right])" },
    "8": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "40", "endline": "2", "endcolumn": "40", "code": "    let left, right = (which, (which + 1) % N):" },
    "61": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "1", "column": "1", "endline": "14", "endcolumn": "7", "code": "def diner(which):" },
    "13": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "5", "endline": "10", "endcolumn": "1", "code": "    let left, right = (which, (which + 1) % N):" },
    "52": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "11", "column": "1", "endline": "11", "endcolumn": "14", "code": "LB: x = diner" },
    "11": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "31", "endline": "2", "endcolumn": "45", "code": "    let left, right = (which, (which + 1) % N):" },
    "40": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "8", "column": "28", "endline": "8", "endcolumn": "32", "code": "            release(?forks[right])" },
    "53": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "12", "column": "5", "endline": "12", "endcolumn": "6", "code": "y = LB" },
    "10": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "45", "endline": "2", "endcolumn": "45", "code": "    let left, right = (which, (which + 1) % N):" },
    "60": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "13", "column": "1", "endline": "13", "endcolumn": "12", "code": "assert False" },
    "20": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "4", "column": "22", "endline": "4", "endcolumn": "32", "code": "            acquire(?forks[left])" },
    "4": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "24", "endline": "2", "endcolumn": "28", "code": "    let left, right = (which, (which + 1) % N):" },
    "30": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "5", "column": "13", "endline": "5", "endcolumn": "34", "code": "            acquire(?forks[right])" },
    "7": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "32", "endline": "2", "endcolumn": "36", "code": "    let left, right = (which, (which + 1) % N):" },
    "6": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "32", "endline": "2", "endcolumn": "36", "code": "    let left, right = (which, (which + 1) % N):" },
    "47": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "1", "column": "1", "endline": "10", "endcolumn": "1", "code": "def diner(which):" },
    "17": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "4", "column": "13", "endline": "4", "endcolumn": "19", "code": "            acquire(?forks[left])" },
    "22": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "4", "column": "13", "endline": "4", "endcolumn": "33", "code": "            acquire(?forks[left])" },
    "32": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "7", "column": "22", "endline": "7", "endcolumn": "26", "code": "            release(?forks[left])" },
    "0": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "1", "column": "1", "endline": "14", "endcolumn": "7", "code": "def diner(which):" },
    "15": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "3", "column": "15", "endline": "3", "endcolumn": "37", "code": "        while choose({ False, True }):" },
    "39": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "8", "column": "22", "endline": "8", "endcolumn": "26", "code": "            release(?forks[right])" },
    "29": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "5", "column": "13", "endline": "5", "endcolumn": "34", "code": "            acquire(?forks[right])" },
    "1": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "3", "code": "def diner(which):" },
    "57": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "13", "column": "8", "endline": "13", "endcolumn": "12", "code": "assert False" },
    "5": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "2", "column": "24", "endline": "2", "endcolumn": "45", "code": "    let left, right = (which, (which + 1) % N):" },
    "55": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "13", "column": "1", "endline": "13", "endcolumn": "12", "code": "assert False" },
    "45": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "1", "code": "" },
    "18": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "4", "column": "22", "endline": "4", "endcolumn": "26", "code": "            acquire(?forks[left])" },
    "25": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "5", "column": "22", "endline": "5", "endcolumn": "26", "code": "            acquire(?forks[right])" },
    "35": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "7", "column": "13", "endline": "7", "endcolumn": "33", "code": "            release(?forks[left])" },
    "49": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "11", "column": "1", "endline": "11", "endcolumn": "14", "code": "LB: x = diner" },
    "34": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "7", "column": "22", "endline": "7", "endcolumn": "32", "code": "            release(?forks[left])" },
    "24": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "5", "column": "13", "endline": "5", "endcolumn": "19", "code": "            acquire(?forks[right])" },
    "19": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "4", "column": "28", "endline": "4", "endcolumn": "31", "code": "            acquire(?forks[left])" },
    "48": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "1", "column": "1", "endline": "10", "endcolumn": "1", "code": "def diner(which):" },
    "27": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "5", "column": "22", "endline": "5", "endcolumn": "33", "code": "            acquire(?forks[right])" },
    "37": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "7", "column": "13", "endline": "7", "endcolumn": "33", "code": "            release(?forks[left])" },
    "26": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "5", "column": "28", "endline": "5", "endcolumn": "32", "code": "            acquire(?forks[right])" },
    "59": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "13", "column": "1", "endline": "13", "endcolumn": "12", "code": "assert False" },
    "36": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "7", "column": "13", "endline": "7", "endcolumn": "33", "code": "            release(?forks[left])" },
    "31": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "7", "column": "13", "endline": "7", "endcolumn": "19", "code": "            release(?forks[left])" },
    "21": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "4", "column": "13", "endline": "4", "endcolumn": "33", "code": "            acquire(?forks[left])" },
    "16": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "3", "column": "9", "endline": "10", "endcolumn": "1", "code": "        while choose({ False, True }):" },
    "44": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "8", "column": "13", "endline": "8", "endcolumn": "34", "code": "            release(?forks[right])" },
    "33": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "7", "column": "28", "endline": "7", "endcolumn": "31", "code": "            release(?forks[left])" },
    "14": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "3", "column": "24", "endline": "3", "endcolumn": "34", "code": "        while choose({ False, True }):" },
    "23": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "4", "column": "13", "endline": "4", "endcolumn": "33", "code": "            acquire(?forks[left])" },
    "58": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "13", "column": "1", "endline": "13", "endcolumn": "12", "code": "assert False" },
    "46": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "1", "column": "1", "endline": "10", "endcolumn": "1", "code": "def diner(which):" },
    "28": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "5", "column": "13", "endline": "5", "endcolumn": "34", "code": "            acquire(?forks[right])" },
    "38": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "8", "column": "13", "endline": "8", "endcolumn": "19", "code": "            release(?forks[right])" },
    "54": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/testtype.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "3", "code": "y = LB" }
  }
}

;
var boxSize = 10;
var currentTime = 0;
var totalTime = 0;
var microsteps = [];
var megasteps = []
var threads = [];
var curMegaStep = 0;
var mestable = document.getElementById("mestable");
var threadtable = document.getElementById("threadtable");
var coderow = document.getElementById("coderow");
var container = document.getElementById('table-scroll');
var currOffset = 0;
var currCloc = null;

function drawTimeLine(mes) {
  var c = mes.canvas.getContext("2d");
  c.beginPath();
  c.clearRect(0, 0, mes.canvas.width, mes.canvas.height);
  var t = mes.startTime;
  var yboxes = Math.floor((mes.nsteps + 29) / 30);
  var nsteps = mes.nsteps;
  for (var y = 0; y < yboxes; y++) {
    var xboxes = nsteps > 30 ? 30 : nsteps;
    for (var x = 0; x < xboxes; x++) {
      c.fillStyle = t < currentTime ? "orange" : "white";
      c.fillRect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.rect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.stroke();
      t += 1;
    }
    nsteps -= xboxes;
  }
}

function currentMegaStep() {
  if (currentTime == totalTime) {
    return microsteps[currentTime - 1].mesidx;
  }
  return microsteps[currentTime].mesidx;
}

function json_string_list(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "[ " + result + " ]";
}

function json_string_set(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "{ " + result + " }";
}

function json_string_dict(obj) {
  if (obj.length == 0) {
    return "{:}"
  }

  var islist = true;
  for (var i = 0; i < obj.length; i++) {
    if (obj[i].key.type != "int" || obj[i].key.value != i.toString()) {
      islist = false;
      break;
    }
  }

  var result = "";
  if (islist) {
    for (var i = 0; i < obj.length; i++) {
      if (i != 0) {
        result += ", ";
      }
      result += json_string(obj[i].value);
    }
    if (obj.length == 1) {
      result += ",";
    }
    return "[" + result + "]";
  }

  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    var kv = obj[i];
    var k = json_string(kv.key);
    var v = json_string(kv.value);
    result += k + ": " + v;
  }
  return "{ " + result + " }";
}

function json_string_address(obj) {
  if (obj.length == 0) {
    return "None";
  }
  var result = "?" + obj[0].value;
  for (var i = 1; i < obj.length; i++) {
    result += "[" + json_string(obj[i]) + "]";
  }
  return result;
}

function json_string_context(obj) {
  var pc = json_string(obj.pc);
  return "CTX(" + pc + ")";
}

function json_string(obj) {
  switch (obj.type) {
  case "bool": case "int":
    return obj.value;
    break;
  case "atom":
    return '"' + obj.value + '"';
  case "set":
    return json_string_set(obj.value);
  case "list":
    return json_string_list(obj.value);
  case "dict":
    return json_string_dict(obj.value);
  case "pc":
    return "PC(" + obj.value + ")"
  case "address":
    return json_string_address(obj.value);
  case "context":
    return json_string_context(obj.value);
  default:
    return JSON.stringify(obj);
  }
}

function stringify_vars(obj) {
  var result = "";
  for (var k in obj) {
    if (k == "result" && obj[k].type == "address" && obj[k].value.length == 0) {
      continue;
    }
    if (result != "") {
      result += ", ";
    }
    result += k + ": " + json_string(obj[k]);
  }
  return result;
}

function convert_var(obj) {
  if (obj.type != "dict") {
    return json_string(obj);
  }
  if (obj.value.length == 0) {
    return "";
  }
  var result = {};
  for (var i = 0; i < obj.value.length; i++) {
    var kv = obj.value[i];
    var k = json_string(kv.key);      // TODO.  convert_var???
    result[k] = convert_var(kv.value);
  }
  return result;
}

function convert_vars(obj) {
  var result = {};
  for (var k in obj) {
    result[k] = convert_var(obj[k]);
  }
  return result;
}

function stackTrace(tid, trace, failure) {
  var table = threads[tid].tracetable;
  table.innerHTML = "";
  if (trace.length == 0) {
    var row = table.insertRow();
    var mcell = row.insertCell();
    mcell.innerHTML = threads[tid].name;
  }
  for (var i = 0; i < trace.length; i++) {
    var row = table.insertRow();

    var mcell = row.insertCell();
    mcell.innerHTML = trace[i].method;
    switch (trace[i].calltype) {
    case "process":
        mcell.style.color = "blue";
        break;
    case "normal":
        mcell.style.color = "black";
        break;
    case "interrupt":
        mcell.style.color = "orange";
        break;
    default:
        mcell.style.color = "red";
    }

    var vcell = row.insertCell();
    var vtext = document.createTextNode(stringify_vars(trace[i].vars));
    vcell.appendChild(vtext);
  }
  if (failure != null) {
    var row = table.insertRow();
    var fcell = row.insertCell();
    fcell.innerHTML = failure;
    fcell.colSpan = 2;
    fcell.style.color = "red";
  }
}

function addToLog(step, entry) {
  var table = megasteps[step].log;
  var row = table.insertRow();
  var mcell = row.insertCell();
  mcell.innerHTML = entry;
}

function handleClick(e, mesIdx) {
  var x = Math.floor(e.offsetX / boxSize);
  var y = Math.floor(e.offsetY / boxSize);
  currentTime = megasteps[mesIdx].startTime + y*30 + x + 1;
  run_microsteps()
}

var noloc = { file: "", line: "", code: "" };

function getCode(pc) {
  var locs = state.locations;
  while (pc >= 0) {
    s = "" + pc;
    if (locs.hasOwnProperty(s)) {
      return locs[s];
    }
    pc--;
  }
  return noloc;
}

function handleKeyPress(e) {
  switch (e.key) {
    case '0':
      currentTime = 0;
      run_microsteps();
      break;
    case 'ArrowLeft':
      if (currentTime > 0) {
        currentTime -= 1;
      }
      run_microsteps();
      break;
    case 'ArrowRight':
      if (currentTime < totalTime) {
        currentTime += 1;
      }
      run_microsteps();
      break;
    case 'ArrowUp':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      if (currentTime == mes.startTime && mesidx > 0) {
          mes = megasteps[mesidx - 1];
      }
      currentTime = mes.startTime;
      run_microsteps();
      break;
    case 'ArrowDown':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      currentTime = mes.startTime + mes.nsteps;
      if (currentTime > totalTime) {
        currentTime = totalTime;
      }
      run_microsteps();
      break;
    case 'Enter':
      if (currentTime < totalTime) {
        var cloc = getCode(microsteps[currentTime].pc);
        while (++currentTime < totalTime) {
          var nloc = getCode(microsteps[currentTime].pc);
          if (nloc.file != cloc.file || nloc.line != cloc.line || nloc.code != cloc.code) {
            break;
          }
        }
        run_microsteps();
      }
      break;
    default:
      // alert("unknown key " + e.code);
  }
}

function init_microstep(masidx, misidx) {
  var mas = state.macrosteps[masidx];
  var mis = mas.microsteps[misidx];
  var t = microsteps.length;
  if (t > 0 && microsteps[t - 1].tid != mas.tid) {
    curMegaStep++;
    megasteps[curMegaStep].startTime = t;
  }
  var mes = megasteps[curMegaStep];
  mes.nsteps++;
  microsteps[t] = {
    mesidx: curMegaStep,
    masidx: masidx,
    misidx: misidx,
    tid: parseInt(mas.tid),
    pc: parseInt(mis.pc),
    invfails: misidx == mas.microsteps.length - 1 ? mas.invfails : [],
    contexts: mas.contexts
  };

  if (mis.hasOwnProperty("npc")) {
    microsteps[t].npc = mis.npc;
  }
  else {
    microsteps[t].npc = mis.pc;
  }

  microsteps[t].code = getCode(microsteps[t].npc);

  microsteps[t].cloc = document.getElementById('C' + microsteps[t].npc);
  var npc = microsteps[t].npc - 4;
  if (npc < 0) {
    npc = 0;
  }
  microsteps[t].offset = document.getElementById('P' + npc);

  if (mis.hasOwnProperty("mode")) {
    microsteps[t].mode = mis.mode;
  }
  else {
    microsteps[t].mode = misidx == 0 ? "running" : microsteps[t-1].mode;
  }

  if (mis.hasOwnProperty("atomic")) {
    microsteps[t].atomic = mis["atomic"];
  }
  else if (misidx == 0) {
    microsteps[t].atomic = 0;
  }
  else {
    microsteps[t].atomic = microsteps[t-1].atomic;
  }

  if (mis.hasOwnProperty("readonly")) {
    microsteps[t].readonly = mis["readonly"];
  }
  else if (misidx == 0) {
    microsteps[t].readonly = 0;
  }
  else {
    microsteps[t].readonly = microsteps[t-1].readonly;
  }

  if (mis.hasOwnProperty("interruptlevel")) {
    microsteps[t].interruptlevel = mis["interruptlevel"];
  }
  else if (misidx == 0) {
    microsteps[t].interruptlevel = 0;
  }
  else {
    microsteps[t].interruptlevel = microsteps[t-1].interruptlevel;
  }

  if (mis.hasOwnProperty("choose")) {
    microsteps[t].choose = "chose " + json_string(mis["choose"]);
  }
  else {
    microsteps[t].choose = null;
  }
  if (mis.hasOwnProperty("print")) {
    microsteps[t].print = json_string(mis["print"]);
  }
  else {
    microsteps[t].print = null;
  }

  if (mis.hasOwnProperty("failure")) {
    microsteps[t].failure = mis.failure;
    microsteps[t].cloc = null;
  }
  else {
    microsteps[t].failure = null;
  }

  if (mis.hasOwnProperty("trace")) {
    microsteps[t].trace = mis.trace;
  }
  else if (misidx == 0) {
    microsteps[t].trace = [];
  }
  else {
    microsteps[t].trace = microsteps[t-1].trace;
  }

  // Update local variables
  var trl = microsteps[t].trace.length; 
  if (trl > 0 && mis.hasOwnProperty("local")) {
    // deep copy first
    microsteps[t].trace = JSON.parse(JSON.stringify(microsteps[t].trace))
    microsteps[t].trace[trl - 1].vars = mis.local;
  }

  if (mis.hasOwnProperty("shared")) {
    microsteps[t].shared = convert_vars(mis.shared);
  }
  else if (t == 0) {
    microsteps[t].shared = {};
  }
  else {
    microsteps[t].shared = microsteps[t-1].shared;
  }

  if (mis.hasOwnProperty("fp")) {
    microsteps[t].fp = mis.fp;
  }
  else if (misidx == 0) {
    microsteps[t].fp = 0;
  }
  else {
    microsteps[t].fp = microsteps[t-1].fp;
  }
  if (mis.hasOwnProperty("pop")) {
    var n = parseInt(mis.pop);
    microsteps[t].stack = microsteps[t-1].stack.slice(0,
                              microsteps[t-1].stack.length - n);
  }
  else if (misidx == 0) {
    microsteps[t].stack = [];
  }
  else {
    microsteps[t].stack = microsteps[t-1].stack;
  }
  if (mis.hasOwnProperty("push")) {
    var vals = mis.push.map(x => json_string(x));
    microsteps[t].stack = microsteps[t].stack.concat(vals);
  }
  // microsteps[t].choose = microsteps[t].stack;
}

function init_macrostep(i) {
  var mas = state.macrosteps[i];
  for (var j = 0; j < mas.microsteps.length; j++) {
    init_microstep(i, j);
  }
  for (var ctx = 0; ctx < mas.contexts.length; ctx++) {
    var tid = parseInt(mas.contexts[ctx].tid);
    threads[tid].name = mas.contexts[ctx].name;
  }
}

function dict_convert(d) {
  if (typeof d === "string") {
    return d;
  }
  result = "";
  for (var k in d) {
    if (result != "") {
      result += ", ";
    }
    result += dict_convert(k) + ":" + dict_convert(d[k]);;
  }
  return "{" + result + "}";
}

function get_shared(shared, path) {
  if (!shared.hasOwnProperty(path[0])) {
    return "";
  }
  if (path.length == 1) {
    return dict_convert(shared[path[0]]);
  }
  return get_shared(shared[path[0]], path.slice(1));
}

function get_status(ctx) {
  var status = ctx.mode;
  if (status != "terminated") {
    if (ctx.atomic > 0) {
      status += " atomic";
    }
    if (ctx.readonly > 0) {
      status += " read-only";
    }
    if (ctx.interruptlevel > 0) {
      status += " interrupts-disabled";
    }
  }
  return status;
}

function escapeHTML(s) {
  return s
     .replace(/&/g, "&amp;")
     .replace(/</g, "&lt;")
     .replace(/>/g, "&gt;")
     .replace(/"/g, "&quot;")
     .replace(/'/g, "&#039;");
}

function run_microstep(t) {
  var mis = microsteps[t];
  var mesrow = mestable.rows[mis.mesidx];
  mesrow.cells[3].innerHTML = mis.npc;

  for (var i = 0; i < vardir.length; i++) {
    mesrow.cells[i + 4].innerHTML = get_shared(mis.shared, vardir[i])
  }

  if (mis.failure != null) {
    stackTrace(mis.tid, mis.trace, mis.failure);
  }
  else if (mis.print != null) {
    stackTrace(mis.tid, mis.trace, "print " + mis.print);
    addToLog(mis.mesidx, mis.print)
  }
  else {
    stackTrace(mis.tid, mis.trace, mis.choose);
  }

  for (var ctx = 0; ctx < mis.contexts.length; ctx++) {
    var tid = parseInt(mis.contexts[ctx].tid);
    threads[tid].name = mis.contexts[ctx].name;
    threadtable.rows[tid].cells[1].innerHTML = get_status(mis.contexts[ctx]);
  }
  var mes = megasteps[mis.mesidx];
  if (t != mes.startTime + mes.nsteps - 1) {
    threadtable.rows[mis.tid].cells[1].innerHTML = get_status(mis);
  }
  threadtable.rows[mis.tid].cells[3].innerHTML = mis.stack.slice(mis.fp);

  if (mis.invfails.length > 0) {
    inv = mis.invfails[0];
    code = getCode(inv.pc);
    coderow.style.color = "red";
    coderow.innerHTML = code.file + ":" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code) + " (" + inv.reason + ")";
    mis.cloc = null;
  }
  else {
    coderow.style.color = "blue";
    coderow.innerHTML = mis.code.file + ":" + mis.code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(mis.code.code);
  }

  currCloc = mis.cloc;
  currOffset = mis.offset;
}

function run_microsteps() {
  coderow.innerHTML = "";
  if (currCloc != null) {
    currCloc.style.color = "black";
    currCloc = null;
  }
  for (var i = 0; i < nmegasteps; i++) {
    mestable.rows[i].cells[3].innerHTML = "";
    for (var j = 0; j < vardir.length; j++) {
      mestable.rows[i].cells[j + 4].innerHTML = "";
    }
    megasteps[i].log.innerHTML = "";
  }
  for (var tid = 0; tid < nthreads; tid++) {
    threadtable.rows[tid].cells[1].innerHTML = "init";
    stackTrace(tid, [], null);
    threadtable.rows[tid].cells[3].innerHTML = "";
  }
  for (var t = 0; t < currentTime; t++) {
    run_microstep(t);
  }
  for (var i = 0; i < nmegasteps; i++) {
    drawTimeLine(megasteps[i]);
  }
  container.scrollTop = currOffset.offsetTop;

  if (currCloc != null) {
    currCloc.style.color = "red";
  }

  var curmes = microsteps[currentTime == 0 ? 0 : (currentTime-1)].mesidx;
  for (var mes = 0; mes < nmegasteps; mes++) {
    var row = document.getElementById("mes" + mes)
    if (mes == curmes) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }

  var curtid = microsteps[currentTime == 0 ? 0 : (currentTime-1)].tid;
  for (var tid = 0; tid < nthreads; tid++) {
    var row = document.getElementById("thread" + tid)
    if (tid == curtid) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }
}

// Initialization starts here

for (var tid = 0; tid < nthreads; tid++) {
  threads[tid] = {
    name: "T" + tid,
    status: "normal",
    stack: [],
    stacktrace: [],
    tracetable: document.getElementById("threadinfo" + tid)
  };
}
for (let i = 0; i < nmegasteps; i++) {
  var canvas = document.getElementById("timeline" + i);
  megasteps[i] = {
    canvas: canvas,
    startTime: 0,
    nsteps: 0,
    contexts: [],
    log: document.getElementById("log" + i)
  };
  canvas.addEventListener('mousedown', function(e){handleClick(e, i)});
}
for (var j = 0; j < state.macrosteps.length; j++) {
  init_macrostep(j);
}

currentTime = totalTime = microsteps.length;
run_microsteps();
document.addEventListener('keydown', handleKeyPress);

</script>
</body>
</html>
