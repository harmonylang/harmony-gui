<html>
<head>
  <meta charset='UTF-8'></meta>
  <style>
#table-wrapper {
  position:relative;
}
#table-scroll {
  height:200px;
  overflow:auto;  
}
#table-wrapper table {
  width:100%;
}
#table-wrapper table * {
  color:black;
}
#table-wrapper table thead th .text {
  position:absolute;   
  top:-20px;
  z-index:2;
  height:20px;
  width:35%;
  border:1px solid red;
}
table {
    border-collapse: collapse;
    border-style: hidden;
}
table td, table th {
    border: 1px solid black;
}

  </style>
</head>
<body>
<table>
  <tr>
    <td colspan='2'>
<table border='1'>
  <thead>
    <tr>
      <th colspan='4' style='color:red;'>
        Issue: Non-terminating state
      </th>
      <th align='center' colspan='1'>
        Shared Variables
      </th>
      <th align='center' colspan='1'>
        Output
      </th>
    </tr>
    <tr>
      <th align='center' rowspan='1'>
        Turn
      </th>
      <th align='center' rowspan='1'>
        Thread
      </th>
      <th align='center' rowspan='1'>
        Instructions Executed
      </th>
      <th align='center' rowspan='1'>
        &nbsp;PC&nbsp;
      </th>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>forks</td>
</tr><tr>
    </tr>
  </thead>
  <tbody id='mestable'>
<tr id='mes0'>
  <td align='right'>
    1&nbsp;
  </td>
  <td>
    T0: __init__()  </td>
  <td>
    <canvas id='timeline0' width='300px' height='40px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log0' border='1'>
    </table>
  </td>
</tr>
<tr id='mes1'>
  <td align='right'>
    2&nbsp;
  </td>
  <td>
    T4: diner(3)  </td>
  <td>
    <canvas id='timeline1' width='300px' height='20px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log1' border='1'>
    </table>
  </td>
</tr>
<tr id='mes2'>
  <td align='right'>
    3&nbsp;
  </td>
  <td>
    T5: diner(4)  </td>
  <td>
    <canvas id='timeline2' width='300px' height='20px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log2' border='1'>
    </table>
  </td>
</tr>
<tr id='mes3'>
  <td align='right'>
    4&nbsp;
  </td>
  <td>
    T1: diner(0)  </td>
  <td>
    <canvas id='timeline3' width='300px' height='20px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log3' border='1'>
    </table>
  </td>
</tr>
<tr id='mes4'>
  <td align='right'>
    5&nbsp;
  </td>
  <td>
    T3: diner(2)  </td>
  <td>
    <canvas id='timeline4' width='300px' height='20px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log4' border='1'>
    </table>
  </td>
</tr>
<tr id='mes5'>
  <td align='right'>
    6&nbsp;
  </td>
  <td>
    T2: diner(1)  </td>
  <td>
    <canvas id='timeline5' width='300px' height='20px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log5' border='1'>
    </table>
  </td>
</tr>
  </tbody>
</table>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td colspan='2'>
      <h3 style='color:blue;'>
        <div id='coderow'>
        </div>
      </h3>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td valign='top'>
<div id='table-wrapper'>
  <div id='table-scroll'>
    <table border='1'>
      <tbody>
        <tr id='P0'>
          <td align='right'>
            <a name='P0'>0</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method __init__' id='C0'>
              Frame __init__ ()
            </span>
          </td>
        </tr>
        <tr id='P1'>
          <td align='right'>
            <a name='P1'>1</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 52' id='C1'>
              Jump 52
            </span>
          </td>
        </tr>
        <tr id='P2'>
          <td align='right'>
            <a name='P2'>2</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method subseq' id='C2'>
              Frame subseq (s, b, e)
            </span>
          </td>
        </tr>
        <tr id='P3'>
          <td align='right'>
            <a name='P3'>3</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C3'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P4'>
          <td align='right'>
            <a name='P4'>4</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C4'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P5'>
          <td align='right'>
            <a name='P5'>5</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu3' id='C5'>
              StoreVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P6'>
          <td align='right'>
            <a name='P6'>6</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of b' id='C6'>
              LoadVar b
            </span>
          </td>
        </tr>
        <tr id='P7'>
          <td align='right'>
            <a name='P7'>7</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable b' id='C7'>
              DelVar b
            </span>
          </td>
        </tr>
        <tr id='P8'>
          <td align='right'>
            <a name='P8'>8</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C8'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P9'>
          <td align='right'>
            <a name='P9'>9</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C9'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P10'>
          <td align='right'>
            <a name='P10'>10</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C10'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P11'>
          <td align='right'>
            <a name='P11'>11</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C11'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P12'>
          <td align='right'>
            <a name='P12'>12</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C12'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P13'>
          <td align='right'>
            <a name='P13'>13</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C13'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P14'>
          <td align='right'>
            <a name='P14'>14</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to x' id='C14'>
              Cut(x)
            </span>
          </td>
        </tr>
        <tr id='P15'>
          <td align='right'>
            <a name='P15'>15</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 25 if the value is False' id='C15'>
              JumpCond False 25
            </span>
          </td>
        </tr>
        <tr id='P16'>
          <td align='right'>
            <a name='P16'>16</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $accu3' id='C16'>
              LoadVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P17'>
          <td align='right'>
            <a name='P17'>17</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu3' id='C17'>
              DelVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P18'>
          <td align='right'>
            <a name='P18'>18</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C18'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P19'>
          <td align='right'>
            <a name='P19'>19</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of x' id='C19'>
              LoadVar x
            </span>
          </td>
        </tr>
        <tr id='P20'>
          <td align='right'>
            <a name='P20'>20</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable x' id='C20'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P21'>
          <td align='right'>
            <a name='P21'>21</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C21'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P22'>
          <td align='right'>
            <a name='P22'>22</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C22'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P23'>
          <td align='right'>
            <a name='P23'>23</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu3' id='C23'>
              StoreVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P24'>
          <td align='right'>
            <a name='P24'>24</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 14' id='C24'>
              Jump 14
            </span>
          </td>
        </tr>
        <tr id='P25'>
          <td align='right'>
            <a name='P25'>25</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C25'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P26'>
          <td align='right'>
            <a name='P26'>26</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable x' id='C26'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P27'>
          <td align='right'>
            <a name='P27'>27</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu3' id='C27'>
              LoadVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P28'>
          <td align='right'>
            <a name='P28'>28</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu3' id='C28'>
              DelVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P29'>
          <td align='right'>
            <a name='P29'>29</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C29'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P30'>
          <td align='right'>
            <a name='P30'>30</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C30'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P31'>
          <td align='right'>
            <a name='P31'>31</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 52' id='C31'>
              Jump 52
            </span>
          </td>
        </tr>
        <tr id='P32'>
          <td align='right'>
            <a name='P32'>32</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method append' id='C32'>
              Frame append (s, e)
            </span>
          </td>
        </tr>
        <tr id='P33'>
          <td align='right'>
            <a name='P33'>33</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C33'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P34'>
          <td align='right'>
            <a name='P34'>34</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C34'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P35'>
          <td align='right'>
            <a name='P35'>35</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C35'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P36'>
          <td align='right'>
            <a name='P36'>36</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C36'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P37'>
          <td align='right'>
            <a name='P37'>37</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C37'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P38'>
          <td align='right'>
            <a name='P38'>38</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C38'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P39'>
          <td align='right'>
            <a name='P39'>39</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C39'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P40'>
          <td align='right'>
            <a name='P40'>40</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C40'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P41'>
          <td align='right'>
            <a name='P41'>41</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C41'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P42'>
          <td align='right'>
            <a name='P42'>42</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C42'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P43'>
          <td align='right'>
            <a name='P43'>43</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 52' id='C43'>
              Jump 52
            </span>
          </td>
        </tr>
        <tr id='P44'>
          <td align='right'>
            <a name='P44'>44</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method head' id='C44'>
              Frame head s
            </span>
          </td>
        </tr>
        <tr id='P45'>
          <td align='right'>
            <a name='P45'>45</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C45'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P46'>
          <td align='right'>
            <a name='P46'>46</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C46'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P47'>
          <td align='right'>
            <a name='P47'>47</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C47'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P48'>
          <td align='right'>
            <a name='P48'>48</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C48'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P49'>
          <td align='right'>
            <a name='P49'>49</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C49'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P50'>
          <td align='right'>
            <a name='P50'>50</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C50'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P51'>
          <td align='right'>
            <a name='P51'>51</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C51'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P52'>
          <td align='right'>
            <a name='P52'>52</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(55)' id='C52'>
              Push PC(55)
            </span>
          </td>
        </tr>
        <tr id='P53'>
          <td align='right'>
            <a name='P53'>53</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called list$tail' id='C53'>
              Builtin(list$tail)
            </span>
          </td>
        </tr>
        <tr id='P54'>
          <td align='right'>
            <a name='P54'>54</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 371' id='C54'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P55'>
          <td align='right'>
            <a name='P55'>55</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method tail' id='C55'>
              Frame tail s
            </span>
          </td>
        </tr>
        <tr id='P56'>
          <td align='right'>
            <a name='P56'>56</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C56'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P57'>
          <td align='right'>
            <a name='P57'>57</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(2)' id='C57'>
              Push PC(2)
            </span>
          </td>
        </tr>
        <tr id='P58'>
          <td align='right'>
            <a name='P58'>58</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C58'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P59'>
          <td align='right'>
            <a name='P59'>59</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C59'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P60'>
          <td align='right'>
            <a name='P60'>60</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C60'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P61'>
          <td align='right'>
            <a name='P61'>61</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C61'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P62'>
          <td align='right'>
            <a name='P62'>62</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C62'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P63'>
          <td align='right'>
            <a name='P63'>63</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C63'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P64'>
          <td align='right'>
            <a name='P64'>64</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C64'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P65'>
          <td align='right'>
            <a name='P65'>65</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C65'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P66'>
          <td align='right'>
            <a name='P66'>66</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C66'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P67'>
          <td align='right'>
            <a name='P67'>67</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C67'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P68'>
          <td align='right'>
            <a name='P68'>68</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C68'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P69'>
          <td align='right'>
            <a name='P69'>69</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C69'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P70'>
          <td align='right'>
            <a name='P70'>70</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 371' id='C70'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P71'>
          <td align='right'>
            <a name='P71'>71</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method sum' id='C71'>
              Frame sum a
            </span>
          </td>
        </tr>
        <tr id='P72'>
          <td align='right'>
            <a name='P72'>72</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C72'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P73'>
          <td align='right'>
            <a name='P73'>73</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C73'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P74'>
          <td align='right'>
            <a name='P74'>74</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C74'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P75'>
          <td align='right'>
            <a name='P75'>75</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C75'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P76'>
          <td align='right'>
            <a name='P76'>76</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C76'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P77'>
          <td align='right'>
            <a name='P77'>77</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C77'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P78'>
          <td align='right'>
            <a name='P78'>78</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v' id='C78'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P79'>
          <td align='right'>
            <a name='P79'>79</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 87 if the value is False' id='C79'>
              JumpCond False 87
            </span>
          </td>
        </tr>
        <tr id='P80'>
          <td align='right'>
            <a name='P80'>80</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C80'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P81'>
          <td align='right'>
            <a name='P81'>81</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C81'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P82'>
          <td align='right'>
            <a name='P82'>82</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C82'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P83'>
          <td align='right'>
            <a name='P83'>83</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C83'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P84'>
          <td align='right'>
            <a name='P84'>84</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C84'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P85'>
          <td align='right'>
            <a name='P85'>85</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C85'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P86'>
          <td align='right'>
            <a name='P86'>86</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 78' id='C86'>
              Jump 78
            </span>
          </td>
        </tr>
        <tr id='P87'>
          <td align='right'>
            <a name='P87'>87</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C87'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P88'>
          <td align='right'>
            <a name='P88'>88</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C88'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P89'>
          <td align='right'>
            <a name='P89'>89</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 371' id='C89'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P90'>
          <td align='right'>
            <a name='P90'>90</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method set' id='C90'>
              Frame set a
            </span>
          </td>
        </tr>
        <tr id='P91'>
          <td align='right'>
            <a name='P91'>91</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C91'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P92'>
          <td align='right'>
            <a name='P92'>92</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C92'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P93'>
          <td align='right'>
            <a name='P93'>93</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu71' id='C93'>
              StoreVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P94'>
          <td align='right'>
            <a name='P94'>94</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of a' id='C94'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P95'>
          <td align='right'>
            <a name='P95'>95</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable a' id='C95'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P96'>
          <td align='right'>
            <a name='P96'>96</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C96'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P97'>
          <td align='right'>
            <a name='P97'>97</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to v' id='C97'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P98'>
          <td align='right'>
            <a name='P98'>98</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 106 if the value is False' id='C98'>
              JumpCond False 106
            </span>
          </td>
        </tr>
        <tr id='P99'>
          <td align='right'>
            <a name='P99'>99</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu71' id='C99'>
              LoadVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P100'>
          <td align='right'>
            <a name='P100'>100</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu71' id='C100'>
              DelVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P101'>
          <td align='right'>
            <a name='P101'>101</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C101'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P102'>
          <td align='right'>
            <a name='P102'>102</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C102'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P103'>
          <td align='right'>
            <a name='P103'>103</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C103'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P104'>
          <td align='right'>
            <a name='P104'>104</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in $accu71' id='C104'>
              StoreVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P105'>
          <td align='right'>
            <a name='P105'>105</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 97' id='C105'>
              Jump 97
            </span>
          </td>
        </tr>
        <tr id='P106'>
          <td align='right'>
            <a name='P106'>106</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C106'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P107'>
          <td align='right'>
            <a name='P107'>107</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu71' id='C107'>
              LoadVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P108'>
          <td align='right'>
            <a name='P108'>108</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu71' id='C108'>
              DelVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P109'>
          <td align='right'>
            <a name='P109'>109</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C109'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P110'>
          <td align='right'>
            <a name='P110'>110</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C110'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P111'>
          <td align='right'>
            <a name='P111'>111</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 371' id='C111'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P112'>
          <td align='right'>
            <a name='P112'>112</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method list' id='C112'>
              Frame list a
            </span>
          </td>
        </tr>
        <tr id='P113'>
          <td align='right'>
            <a name='P113'>113</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C113'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P114'>
          <td align='right'>
            <a name='P114'>114</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C114'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P115'>
          <td align='right'>
            <a name='P115'>115</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu87' id='C115'>
              StoreVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P116'>
          <td align='right'>
            <a name='P116'>116</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of a' id='C116'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P117'>
          <td align='right'>
            <a name='P117'>117</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable a' id='C117'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P118'>
          <td align='right'>
            <a name='P118'>118</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C118'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P119'>
          <td align='right'>
            <a name='P119'>119</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to v' id='C119'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P120'>
          <td align='right'>
            <a name='P120'>120</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 128 if the value is False' id='C120'>
              JumpCond False 128
            </span>
          </td>
        </tr>
        <tr id='P121'>
          <td align='right'>
            <a name='P121'>121</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu87' id='C121'>
              LoadVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P122'>
          <td align='right'>
            <a name='P122'>122</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu87' id='C122'>
              DelVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P123'>
          <td align='right'>
            <a name='P123'>123</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C123'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P124'>
          <td align='right'>
            <a name='P124'>124</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C124'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P125'>
          <td align='right'>
            <a name='P125'>125</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C125'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P126'>
          <td align='right'>
            <a name='P126'>126</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in $accu87' id='C126'>
              StoreVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P127'>
          <td align='right'>
            <a name='P127'>127</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 119' id='C127'>
              Jump 119
            </span>
          </td>
        </tr>
        <tr id='P128'>
          <td align='right'>
            <a name='P128'>128</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C128'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P129'>
          <td align='right'>
            <a name='P129'>129</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu87' id='C129'>
              LoadVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P130'>
          <td align='right'>
            <a name='P130'>130</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu87' id='C130'>
              DelVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P131'>
          <td align='right'>
            <a name='P131'>131</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C131'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P132'>
          <td align='right'>
            <a name='P132'>132</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C132'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P133'>
          <td align='right'>
            <a name='P133'>133</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 371' id='C133'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P134'>
          <td align='right'>
            <a name='P134'>134</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method values' id='C134'>
              Frame values d
            </span>
          </td>
        </tr>
        <tr id='P135'>
          <td align='right'>
            <a name='P135'>135</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C135'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P136'>
          <td align='right'>
            <a name='P136'>136</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C136'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P137'>
          <td align='right'>
            <a name='P137'>137</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu103' id='C137'>
              StoreVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P138'>
          <td align='right'>
            <a name='P138'>138</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C138'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P139'>
          <td align='right'>
            <a name='P139'>139</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C139'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P140'>
          <td align='right'>
            <a name='P140'>140</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C140'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P141'>
          <td align='right'>
            <a name='P141'>141</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to _:v' id='C141'>
              Cut(_, v)
            </span>
          </td>
        </tr>
        <tr id='P142'>
          <td align='right'>
            <a name='P142'>142</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable _' id='C142'>
              DelVar _
            </span>
          </td>
        </tr>
        <tr id='P143'>
          <td align='right'>
            <a name='P143'>143</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 151 if the value is False' id='C143'>
              JumpCond False 151
            </span>
          </td>
        </tr>
        <tr id='P144'>
          <td align='right'>
            <a name='P144'>144</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $accu103' id='C144'>
              LoadVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P145'>
          <td align='right'>
            <a name='P145'>145</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu103' id='C145'>
              DelVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P146'>
          <td align='right'>
            <a name='P146'>146</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C146'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P147'>
          <td align='right'>
            <a name='P147'>147</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C147'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P148'>
          <td align='right'>
            <a name='P148'>148</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C148'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P149'>
          <td align='right'>
            <a name='P149'>149</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu103' id='C149'>
              StoreVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P150'>
          <td align='right'>
            <a name='P150'>150</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 141' id='C150'>
              Jump 141
            </span>
          </td>
        </tr>
        <tr id='P151'>
          <td align='right'>
            <a name='P151'>151</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C151'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P152'>
          <td align='right'>
            <a name='P152'>152</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $accu103' id='C152'>
              LoadVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P153'>
          <td align='right'>
            <a name='P153'>153</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu103' id='C153'>
              DelVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P154'>
          <td align='right'>
            <a name='P154'>154</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C154'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P155'>
          <td align='right'>
            <a name='P155'>155</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C155'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P156'>
          <td align='right'>
            <a name='P156'>156</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 371' id='C156'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P157'>
          <td align='right'>
            <a name='P157'>157</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method items' id='C157'>
              Frame items d
            </span>
          </td>
        </tr>
        <tr id='P158'>
          <td align='right'>
            <a name='P158'>158</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C158'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P159'>
          <td align='right'>
            <a name='P159'>159</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C159'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P160'>
          <td align='right'>
            <a name='P160'>160</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in $accu119' id='C160'>
              StoreVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P161'>
          <td align='right'>
            <a name='P161'>161</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C161'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P162'>
          <td align='right'>
            <a name='P162'>162</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C162'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P163'>
          <td align='right'>
            <a name='P163'>163</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C163'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P164'>
          <td align='right'>
            <a name='P164'>164</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to k:v' id='C164'>
              Cut(k, v)
            </span>
          </td>
        </tr>
        <tr id='P165'>
          <td align='right'>
            <a name='P165'>165</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 178 if the value is False' id='C165'>
              JumpCond False 178
            </span>
          </td>
        </tr>
        <tr id='P166'>
          <td align='right'>
            <a name='P166'>166</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $accu119' id='C166'>
              LoadVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P167'>
          <td align='right'>
            <a name='P167'>167</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu119' id='C167'>
              DelVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P168'>
          <td align='right'>
            <a name='P168'>168</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C168'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P169'>
          <td align='right'>
            <a name='P169'>169</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of k' id='C169'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P170'>
          <td align='right'>
            <a name='P170'>170</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable k' id='C170'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P171'>
          <td align='right'>
            <a name='P171'>171</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C171'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P172'>
          <td align='right'>
            <a name='P172'>172</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C172'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P173'>
          <td align='right'>
            <a name='P173'>173</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C173'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P174'>
          <td align='right'>
            <a name='P174'>174</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C174'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P175'>
          <td align='right'>
            <a name='P175'>175</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C175'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P176'>
          <td align='right'>
            <a name='P176'>176</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in $accu119' id='C176'>
              StoreVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P177'>
          <td align='right'>
            <a name='P177'>177</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 164' id='C177'>
              Jump 164
            </span>
          </td>
        </tr>
        <tr id='P178'>
          <td align='right'>
            <a name='P178'>178</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable k' id='C178'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P179'>
          <td align='right'>
            <a name='P179'>179</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C179'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P180'>
          <td align='right'>
            <a name='P180'>180</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $accu119' id='C180'>
              LoadVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P181'>
          <td align='right'>
            <a name='P181'>181</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu119' id='C181'>
              DelVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P182'>
          <td align='right'>
            <a name='P182'>182</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C182'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P183'>
          <td align='right'>
            <a name='P183'>183</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C183'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P184'>
          <td align='right'>
            <a name='P184'>184</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 371' id='C184'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P185'>
          <td align='right'>
            <a name='P185'>185</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method qsort' id='C185'>
              Frame qsort a
            </span>
          </td>
        </tr>
        <tr id='P186'>
          <td align='right'>
            <a name='P186'>186</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C186'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P187'>
          <td align='right'>
            <a name='P187'>187</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C187'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P188'>
          <td align='right'>
            <a name='P188'>188</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C188'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P189'>
          <td align='right'>
            <a name='P189'>189</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C189'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P190'>
          <td align='right'>
            <a name='P190'>190</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 195 if the value is False' id='C190'>
              JumpCond False 195
            </span>
          </td>
        </tr>
        <tr id='P191'>
          <td align='right'>
            <a name='P191'>191</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable a' id='C191'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P192'>
          <td align='right'>
            <a name='P192'>192</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C192'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P193'>
          <td align='right'>
            <a name='P193'>193</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C193'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P194'>
          <td align='right'>
            <a name='P194'>194</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 265' id='C194'>
              Jump 265
            </span>
          </td>
        </tr>
        <tr id='P195'>
          <td align='right'>
            <a name='P195'>195</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C195'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P196'>
          <td align='right'>
            <a name='P196'>196</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(44)' id='C196'>
              Push PC(44)
            </span>
          </td>
        </tr>
        <tr id='P197'>
          <td align='right'>
            <a name='P197'>197</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C197'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P198'>
          <td align='right'>
            <a name='P198'>198</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C198'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P199'>
          <td align='right'>
            <a name='P199'>199</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C199'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P200'>
          <td align='right'>
            <a name='P200'>200</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(55)' id='C200'>
              Push PC(55)
            </span>
          </td>
        </tr>
        <tr id='P201'>
          <td align='right'>
            <a name='P201'>201</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C201'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P202'>
          <td align='right'>
            <a name='P202'>202</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C202'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P203'>
          <td align='right'>
            <a name='P203'>203</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C203'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P204'>
          <td align='right'>
            <a name='P204'>204</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C204'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P205'>
          <td align='right'>
            <a name='P205'>205</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in (pivot, rest)' id='C205'>
              StoreVar (pivot, rest)
            </span>
          </td>
        </tr>
        <tr id='P206'>
          <td align='right'>
            <a name='P206'>206</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C206'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P207'>
          <td align='right'>
            <a name='P207'>207</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu156' id='C207'>
              StoreVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P208'>
          <td align='right'>
            <a name='P208'>208</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of rest' id='C208'>
              LoadVar rest
            </span>
          </td>
        </tr>
        <tr id='P209'>
          <td align='right'>
            <a name='P209'>209</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C209'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P210'>
          <td align='right'>
            <a name='P210'>210</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C210'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P211'>
          <td align='right'>
            <a name='P211'>211</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to v' id='C211'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P212'>
          <td align='right'>
            <a name='P212'>212</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 224 if the value is False' id='C212'>
              JumpCond False 224
            </span>
          </td>
        </tr>
        <tr id='P213'>
          <td align='right'>
            <a name='P213'>213</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C213'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P214'>
          <td align='right'>
            <a name='P214'>214</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of pivot' id='C214'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P215'>
          <td align='right'>
            <a name='P215'>215</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying <' id='C215'>
              2-ary <
            </span>
          </td>
        </tr>
        <tr id='P216'>
          <td align='right'>
            <a name='P216'>216</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 210 if the value is False' id='C216'>
              JumpCond False 210
            </span>
          </td>
        </tr>
        <tr id='P217'>
          <td align='right'>
            <a name='P217'>217</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu156' id='C217'>
              LoadVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P218'>
          <td align='right'>
            <a name='P218'>218</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu156' id='C218'>
              DelVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P219'>
          <td align='right'>
            <a name='P219'>219</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C219'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P220'>
          <td align='right'>
            <a name='P220'>220</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C220'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P221'>
          <td align='right'>
            <a name='P221'>221</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C221'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P222'>
          <td align='right'>
            <a name='P222'>222</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in $accu156' id='C222'>
              StoreVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P223'>
          <td align='right'>
            <a name='P223'>223</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 210' id='C223'>
              Jump 210
            </span>
          </td>
        </tr>
        <tr id='P224'>
          <td align='right'>
            <a name='P224'>224</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C224'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P225'>
          <td align='right'>
            <a name='P225'>225</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu156' id='C225'>
              LoadVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P226'>
          <td align='right'>
            <a name='P226'>226</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu156' id='C226'>
              DelVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P227'>
          <td align='right'>
            <a name='P227'>227</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in lower' id='C227'>
              StoreVar lower
            </span>
          </td>
        </tr>
        <tr id='P228'>
          <td align='right'>
            <a name='P228'>228</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C228'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P229'>
          <td align='right'>
            <a name='P229'>229</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu173' id='C229'>
              StoreVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P230'>
          <td align='right'>
            <a name='P230'>230</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of rest' id='C230'>
              LoadVar rest
            </span>
          </td>
        </tr>
        <tr id='P231'>
          <td align='right'>
            <a name='P231'>231</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable rest' id='C231'>
              DelVar rest
            </span>
          </td>
        </tr>
        <tr id='P232'>
          <td align='right'>
            <a name='P232'>232</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C232'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P233'>
          <td align='right'>
            <a name='P233'>233</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C233'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P234'>
          <td align='right'>
            <a name='P234'>234</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v' id='C234'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P235'>
          <td align='right'>
            <a name='P235'>235</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 247 if the value is False' id='C235'>
              JumpCond False 247
            </span>
          </td>
        </tr>
        <tr id='P236'>
          <td align='right'>
            <a name='P236'>236</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C236'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P237'>
          <td align='right'>
            <a name='P237'>237</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of pivot' id='C237'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P238'>
          <td align='right'>
            <a name='P238'>238</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying >=' id='C238'>
              2-ary >=
            </span>
          </td>
        </tr>
        <tr id='P239'>
          <td align='right'>
            <a name='P239'>239</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 233 if the value is False' id='C239'>
              JumpCond False 233
            </span>
          </td>
        </tr>
        <tr id='P240'>
          <td align='right'>
            <a name='P240'>240</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $accu173' id='C240'>
              LoadVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P241'>
          <td align='right'>
            <a name='P241'>241</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu173' id='C241'>
              DelVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P242'>
          <td align='right'>
            <a name='P242'>242</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C242'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P243'>
          <td align='right'>
            <a name='P243'>243</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C243'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P244'>
          <td align='right'>
            <a name='P244'>244</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C244'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P245'>
          <td align='right'>
            <a name='P245'>245</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu173' id='C245'>
              StoreVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P246'>
          <td align='right'>
            <a name='P246'>246</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 233' id='C246'>
              Jump 233
            </span>
          </td>
        </tr>
        <tr id='P247'>
          <td align='right'>
            <a name='P247'>247</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C247'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P248'>
          <td align='right'>
            <a name='P248'>248</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $accu173' id='C248'>
              LoadVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P249'>
          <td align='right'>
            <a name='P249'>249</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu173' id='C249'>
              DelVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P250'>
          <td align='right'>
            <a name='P250'>250</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in higher' id='C250'>
              StoreVar higher
            </span>
          </td>
        </tr>
        <tr id='P251'>
          <td align='right'>
            <a name='P251'>251</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(185)' id='C251'>
              Push PC(185)
            </span>
          </td>
        </tr>
        <tr id='P252'>
          <td align='right'>
            <a name='P252'>252</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lower' id='C252'>
              LoadVar lower
            </span>
          </td>
        </tr>
        <tr id='P253'>
          <td align='right'>
            <a name='P253'>253</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable lower' id='C253'>
              DelVar lower
            </span>
          </td>
        </tr>
        <tr id='P254'>
          <td align='right'>
            <a name='P254'>254</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C254'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P255'>
          <td align='right'>
            <a name='P255'>255</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C255'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P256'>
          <td align='right'>
            <a name='P256'>256</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of pivot' id='C256'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P257'>
          <td align='right'>
            <a name='P257'>257</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable pivot' id='C257'>
              DelVar pivot
            </span>
          </td>
        </tr>
        <tr id='P258'>
          <td align='right'>
            <a name='P258'>258</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C258'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P259'>
          <td align='right'>
            <a name='P259'>259</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(185)' id='C259'>
              Push PC(185)
            </span>
          </td>
        </tr>
        <tr id='P260'>
          <td align='right'>
            <a name='P260'>260</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of higher' id='C260'>
              LoadVar higher
            </span>
          </td>
        </tr>
        <tr id='P261'>
          <td align='right'>
            <a name='P261'>261</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable higher' id='C261'>
              DelVar higher
            </span>
          </td>
        </tr>
        <tr id='P262'>
          <td align='right'>
            <a name='P262'>262</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C262'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P263'>
          <td align='right'>
            <a name='P263'>263</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying +' id='C263'>
              3-ary +
            </span>
          </td>
        </tr>
        <tr id='P264'>
          <td align='right'>
            <a name='P264'>264</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C264'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P265'>
          <td align='right'>
            <a name='P265'>265</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C265'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P266'>
          <td align='right'>
            <a name='P266'>266</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 371' id='C266'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P267'>
          <td align='right'>
            <a name='P267'>267</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method sorted' id='C267'>
              Frame sorted d
            </span>
          </td>
        </tr>
        <tr id='P268'>
          <td align='right'>
            <a name='P268'>268</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C268'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P269'>
          <td align='right'>
            <a name='P269'>269</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(185)' id='C269'>
              Push PC(185)
            </span>
          </td>
        </tr>
        <tr id='P270'>
          <td align='right'>
            <a name='P270'>270</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(112)' id='C270'>
              Push PC(112)
            </span>
          </td>
        </tr>
        <tr id='P271'>
          <td align='right'>
            <a name='P271'>271</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C271'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P272'>
          <td align='right'>
            <a name='P272'>272</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C272'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P273'>
          <td align='right'>
            <a name='P273'>273</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C273'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P274'>
          <td align='right'>
            <a name='P274'>274</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C274'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P275'>
          <td align='right'>
            <a name='P275'>275</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C275'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P276'>
          <td align='right'>
            <a name='P276'>276</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C276'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P277'>
          <td align='right'>
            <a name='P277'>277</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 371' id='C277'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P278'>
          <td align='right'>
            <a name='P278'>278</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method reversed' id='C278'>
              Frame reversed d
            </span>
          </td>
        </tr>
        <tr id='P279'>
          <td align='right'>
            <a name='P279'>279</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C279'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P280'>
          <td align='right'>
            <a name='P280'>280</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C280'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P281'>
          <td align='right'>
            <a name='P281'>281</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C281'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P282'>
          <td align='right'>
            <a name='P282'>282</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in n' id='C282'>
              StoreVar n
            </span>
          </td>
        </tr>
        <tr id='P283'>
          <td align='right'>
            <a name='P283'>283</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C283'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P284'>
          <td align='right'>
            <a name='P284'>284</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in $accu216' id='C284'>
              StoreVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P285'>
          <td align='right'>
            <a name='P285'>285</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C285'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P286'>
          <td align='right'>
            <a name='P286'>286</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C286'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P287'>
          <td align='right'>
            <a name='P287'>287</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ..' id='C287'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P288'>
          <td align='right'>
            <a name='P288'>288</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C288'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P289'>
          <td align='right'>
            <a name='P289'>289</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to i' id='C289'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P290'>
          <td align='right'>
            <a name='P290'>290</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 302 if the value is False' id='C290'>
              JumpCond False 302
            </span>
          </td>
        </tr>
        <tr id='P291'>
          <td align='right'>
            <a name='P291'>291</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu216' id='C291'>
              LoadVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P292'>
          <td align='right'>
            <a name='P292'>292</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu216' id='C292'>
              DelVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P293'>
          <td align='right'>
            <a name='P293'>293</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C293'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P294'>
          <td align='right'>
            <a name='P294'>294</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C294'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P295'>
          <td align='right'>
            <a name='P295'>295</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C295'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P296'>
          <td align='right'>
            <a name='P296'>296</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C296'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P297'>
          <td align='right'>
            <a name='P297'>297</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C297'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P298'>
          <td align='right'>
            <a name='P298'>298</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C298'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P299'>
          <td align='right'>
            <a name='P299'>299</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C299'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P300'>
          <td align='right'>
            <a name='P300'>300</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in $accu216' id='C300'>
              StoreVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P301'>
          <td align='right'>
            <a name='P301'>301</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 289' id='C301'>
              Jump 289
            </span>
          </td>
        </tr>
        <tr id='P302'>
          <td align='right'>
            <a name='P302'>302</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C302'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P303'>
          <td align='right'>
            <a name='P303'>303</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C303'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P304'>
          <td align='right'>
            <a name='P304'>304</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable n' id='C304'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P305'>
          <td align='right'>
            <a name='P305'>305</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu216' id='C305'>
              LoadVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P306'>
          <td align='right'>
            <a name='P306'>306</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu216' id='C306'>
              DelVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P307'>
          <td align='right'>
            <a name='P307'>307</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C307'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P308'>
          <td align='right'>
            <a name='P308'>308</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C308'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P309'>
          <td align='right'>
            <a name='P309'>309</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 371' id='C309'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P310'>
          <td align='right'>
            <a name='P310'>310</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method empty' id='C310'>
              Frame empty ()
            </span>
          </td>
        </tr>
        <tr id='P311'>
          <td align='right'>
            <a name='P311'>311</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C311'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P312'>
          <td align='right'>
            <a name='P312'>312</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C312'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P313'>
          <td align='right'>
            <a name='P313'>313</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C313'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P314'>
          <td align='right'>
            <a name='P314'>314</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C314'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P315'>
          <td align='right'>
            <a name='P315'>315</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 371' id='C315'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P316'>
          <td align='right'>
            <a name='P316'>316</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method fromSet' id='C316'>
              Frame fromSet s
            </span>
          </td>
        </tr>
        <tr id='P317'>
          <td align='right'>
            <a name='P317'>317</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C317'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P318'>
          <td align='right'>
            <a name='P318'>318</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C318'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P319'>
          <td align='right'>
            <a name='P319'>319</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu243' id='C319'>
              StoreVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P320'>
          <td align='right'>
            <a name='P320'>320</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C320'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P321'>
          <td align='right'>
            <a name='P321'>321</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C321'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P322'>
          <td align='right'>
            <a name='P322'>322</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C322'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P323'>
          <td align='right'>
            <a name='P323'>323</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to elt' id='C323'>
              Cut(elt)
            </span>
          </td>
        </tr>
        <tr id='P324'>
          <td align='right'>
            <a name='P324'>324</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 333 if the value is False' id='C324'>
              JumpCond False 333
            </span>
          </td>
        </tr>
        <tr id='P325'>
          <td align='right'>
            <a name='P325'>325</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu243' id='C325'>
              LoadVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P326'>
          <td align='right'>
            <a name='P326'>326</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu243' id='C326'>
              DelVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P327'>
          <td align='right'>
            <a name='P327'>327</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C327'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P328'>
          <td align='right'>
            <a name='P328'>328</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable elt' id='C328'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P329'>
          <td align='right'>
            <a name='P329'>329</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C329'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P330'>
          <td align='right'>
            <a name='P330'>330</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C330'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P331'>
          <td align='right'>
            <a name='P331'>331</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu243' id='C331'>
              StoreVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P332'>
          <td align='right'>
            <a name='P332'>332</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 323' id='C332'>
              Jump 323
            </span>
          </td>
        </tr>
        <tr id='P333'>
          <td align='right'>
            <a name='P333'>333</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C333'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P334'>
          <td align='right'>
            <a name='P334'>334</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $accu243' id='C334'>
              LoadVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P335'>
          <td align='right'>
            <a name='P335'>335</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu243' id='C335'>
              DelVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P336'>
          <td align='right'>
            <a name='P336'>336</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C336'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P337'>
          <td align='right'>
            <a name='P337'>337</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C337'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P338'>
          <td align='right'>
            <a name='P338'>338</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 371' id='C338'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P339'>
          <td align='right'>
            <a name='P339'>339</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method fromList' id='C339'>
              Frame fromList a
            </span>
          </td>
        </tr>
        <tr id='P340'>
          <td align='right'>
            <a name='P340'>340</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C340'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P341'>
          <td align='right'>
            <a name='P341'>341</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C341'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P342'>
          <td align='right'>
            <a name='P342'>342</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C342'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P343'>
          <td align='right'>
            <a name='P343'>343</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C343'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P344'>
          <td align='right'>
            <a name='P344'>344</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C344'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P345'>
          <td align='right'>
            <a name='P345'>345</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C345'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P346'>
          <td align='right'>
            <a name='P346'>346</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v' id='C346'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P347'>
          <td align='right'>
            <a name='P347'>347</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 369 if the value is False' id='C347'>
              JumpCond False 369
            </span>
          </td>
        </tr>
        <tr id='P348'>
          <td align='right'>
            <a name='P348'>348</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C348'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P349'>
          <td align='right'>
            <a name='P349'>349</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of result' id='C349'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P350'>
          <td align='right'>
            <a name='P350'>350</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying in' id='C350'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P351'>
          <td align='right'>
            <a name='P351'>351</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 362 if the value is False' id='C351'>
              JumpCond False 362
            </span>
          </td>
        </tr>
        <tr id='P352'>
          <td align='right'>
            <a name='P352'>352</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?result' id='C352'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P353'>
          <td align='right'>
            <a name='P353'>353</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C353'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P354'>
          <td align='right'>
            <a name='P354'>354</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C354'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P355'>
          <td align='right'>
            <a name='P355'>355</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C355'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P356'>
          <td align='right'>
            <a name='P356'>356</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C356'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P357'>
          <td align='right'>
            <a name='P357'>357</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop the address of a method variable and push the value of that variable' id='C357'>
              LoadVar [result]
            </span>
          </td>
        </tr>
        <tr id='P358'>
          <td align='right'>
            <a name='P358'>358</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C358'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P359'>
          <td align='right'>
            <a name='P359'>359</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C359'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P360'>
          <td align='right'>
            <a name='P360'>360</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C360'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P361'>
          <td align='right'>
            <a name='P361'>361</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 346' id='C361'>
              Jump 346
            </span>
          </td>
        </tr>
        <tr id='P362'>
          <td align='right'>
            <a name='P362'>362</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?result' id='C362'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P363'>
          <td align='right'>
            <a name='P363'>363</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C363'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P364'>
          <td align='right'>
            <a name='P364'>364</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C364'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P365'>
          <td align='right'>
            <a name='P365'>365</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C365'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P366'>
          <td align='right'>
            <a name='P366'>366</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C366'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P367'>
          <td align='right'>
            <a name='P367'>367</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C367'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P368'>
          <td align='right'>
            <a name='P368'>368</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 346' id='C368'>
              Jump 346
            </span>
          </td>
        </tr>
        <tr id='P369'>
          <td align='right'>
            <a name='P369'>369</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C369'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P370'>
          <td align='right'>
            <a name='P370'>370</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C370'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P371'>
          <td align='right'>
            <a name='P371'>371</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(374)' id='C371'>
              Push PC(374)
            </span>
          </td>
        </tr>
        <tr id='P372'>
          <td align='right'>
            <a name='P372'>372</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='top of stack is a built-in operation called bag$multiplicity' id='C372'>
              Builtin(bag$multiplicity)
            </span>
          </td>
        </tr>
        <tr id='P373'>
          <td align='right'>
            <a name='P373'>373</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 392' id='C373'>
              Jump 392
            </span>
          </td>
        </tr>
        <tr id='P374'>
          <td align='right'>
            <a name='P374'>374</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method multiplicity' id='C374'>
              Frame multiplicity (bg, elt)
            </span>
          </td>
        </tr>
        <tr id='P375'>
          <td align='right'>
            <a name='P375'>375</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C375'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P376'>
          <td align='right'>
            <a name='P376'>376</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C376'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P377'>
          <td align='right'>
            <a name='P377'>377</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C377'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P378'>
          <td align='right'>
            <a name='P378'>378</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying in' id='C378'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P379'>
          <td align='right'>
            <a name='P379'>379</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 387 if the value is False' id='C379'>
              JumpCond False 387
            </span>
          </td>
        </tr>
        <tr id='P380'>
          <td align='right'>
            <a name='P380'>380</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C380'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P381'>
          <td align='right'>
            <a name='P381'>381</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C381'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P382'>
          <td align='right'>
            <a name='P382'>382</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C382'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P383'>
          <td align='right'>
            <a name='P383'>383</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C383'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P384'>
          <td align='right'>
            <a name='P384'>384</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C384'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P385'>
          <td align='right'>
            <a name='P385'>385</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C385'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P386'>
          <td align='right'>
            <a name='P386'>386</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 391' id='C386'>
              Jump 391
            </span>
          </td>
        </tr>
        <tr id='P387'>
          <td align='right'>
            <a name='P387'>387</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C387'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P388'>
          <td align='right'>
            <a name='P388'>388</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable elt' id='C388'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P389'>
          <td align='right'>
            <a name='P389'>389</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C389'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P390'>
          <td align='right'>
            <a name='P390'>390</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C390'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P391'>
          <td align='right'>
            <a name='P391'>391</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C391'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P392'>
          <td align='right'>
            <a name='P392'>392</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(395)' id='C392'>
              Push PC(395)
            </span>
          </td>
        </tr>
        <tr id='P393'>
          <td align='right'>
            <a name='P393'>393</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called bag$size' id='C393'>
              Builtin(bag$size)
            </span>
          </td>
        </tr>
        <tr id='P394'>
          <td align='right'>
            <a name='P394'>394</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 414' id='C394'>
              Jump 414
            </span>
          </td>
        </tr>
        <tr id='P395'>
          <td align='right'>
            <a name='P395'>395</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method size' id='C395'>
              Frame size bg
            </span>
          </td>
        </tr>
        <tr id='P396'>
          <td align='right'>
            <a name='P396'>396</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C396'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P397'>
          <td align='right'>
            <a name='P397'>397</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C397'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P398'>
          <td align='right'>
            <a name='P398'>398</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C398'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P399'>
          <td align='right'>
            <a name='P399'>399</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C399'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P400'>
          <td align='right'>
            <a name='P400'>400</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C400'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P401'>
          <td align='right'>
            <a name='P401'>401</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C401'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P402'>
          <td align='right'>
            <a name='P402'>402</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to _:c' id='C402'>
              Cut(_, c)
            </span>
          </td>
        </tr>
        <tr id='P403'>
          <td align='right'>
            <a name='P403'>403</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable _' id='C403'>
              DelVar _
            </span>
          </td>
        </tr>
        <tr id='P404'>
          <td align='right'>
            <a name='P404'>404</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 412 if the value is False' id='C404'>
              JumpCond False 412
            </span>
          </td>
        </tr>
        <tr id='P405'>
          <td align='right'>
            <a name='P405'>405</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of result' id='C405'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P406'>
          <td align='right'>
            <a name='P406'>406</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C406'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P407'>
          <td align='right'>
            <a name='P407'>407</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C407'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P408'>
          <td align='right'>
            <a name='P408'>408</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable c' id='C408'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P409'>
          <td align='right'>
            <a name='P409'>409</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C409'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P410'>
          <td align='right'>
            <a name='P410'>410</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C410'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P411'>
          <td align='right'>
            <a name='P411'>411</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 402' id='C411'>
              Jump 402
            </span>
          </td>
        </tr>
        <tr id='P412'>
          <td align='right'>
            <a name='P412'>412</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable c' id='C412'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P413'>
          <td align='right'>
            <a name='P413'>413</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C413'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P414'>
          <td align='right'>
            <a name='P414'>414</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(417)' id='C414'>
              Push PC(417)
            </span>
          </td>
        </tr>
        <tr id='P415'>
          <td align='right'>
            <a name='P415'>415</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called bag$bmin' id='C415'>
              Builtin(bag$bmin)
            </span>
          </td>
        </tr>
        <tr id='P416'>
          <td align='right'>
            <a name='P416'>416</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 433' id='C416'>
              Jump 433
            </span>
          </td>
        </tr>
        <tr id='P417'>
          <td align='right'>
            <a name='P417'>417</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method bmin' id='C417'>
              Frame bmin bg
            </span>
          </td>
        </tr>
        <tr id='P418'>
          <td align='right'>
            <a name='P418'>418</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C418'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P419'>
          <td align='right'>
            <a name='P419'>419</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C419'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P420'>
          <td align='right'>
            <a name='P420'>420</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C420'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P421'>
          <td align='right'>
            <a name='P421'>421</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C421'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P422'>
          <td align='right'>
            <a name='P422'>422</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C422'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P423'>
          <td align='right'>
            <a name='P423'>423</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying !=' id='C423'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P424'>
          <td align='right'>
            <a name='P424'>424</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C424'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P425'>
          <td align='right'>
            <a name='P425'>425</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C425'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P426'>
          <td align='right'>
            <a name='P426'>426</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C426'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P427'>
          <td align='right'>
            <a name='P427'>427</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C427'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P428'>
          <td align='right'>
            <a name='P428'>428</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C428'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P429'>
          <td align='right'>
            <a name='P429'>429</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying keys' id='C429'>
              1-ary keys
            </span>
          </td>
        </tr>
        <tr id='P430'>
          <td align='right'>
            <a name='P430'>430</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying min' id='C430'>
              1-ary min
            </span>
          </td>
        </tr>
        <tr id='P431'>
          <td align='right'>
            <a name='P431'>431</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C431'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P432'>
          <td align='right'>
            <a name='P432'>432</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C432'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P433'>
          <td align='right'>
            <a name='P433'>433</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(436)' id='C433'>
              Push PC(436)
            </span>
          </td>
        </tr>
        <tr id='P434'>
          <td align='right'>
            <a name='P434'>434</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='top of stack is a built-in operation called bag$bmax' id='C434'>
              Builtin(bag$bmax)
            </span>
          </td>
        </tr>
        <tr id='P435'>
          <td align='right'>
            <a name='P435'>435</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 461' id='C435'>
              Jump 461
            </span>
          </td>
        </tr>
        <tr id='P436'>
          <td align='right'>
            <a name='P436'>436</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method bmax' id='C436'>
              Frame bmax bg
            </span>
          </td>
        </tr>
        <tr id='P437'>
          <td align='right'>
            <a name='P437'>437</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C437'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P438'>
          <td align='right'>
            <a name='P438'>438</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C438'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P439'>
          <td align='right'>
            <a name='P439'>439</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C439'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P440'>
          <td align='right'>
            <a name='P440'>440</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C440'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P441'>
          <td align='right'>
            <a name='P441'>441</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C441'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P442'>
          <td align='right'>
            <a name='P442'>442</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying !=' id='C442'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P443'>
          <td align='right'>
            <a name='P443'>443</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a condition and raise exception if condition is false' id='C443'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P444'>
          <td align='right'>
            <a name='P444'>444</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C444'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P445'>
          <td align='right'>
            <a name='P445'>445</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C445'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P446'>
          <td align='right'>
            <a name='P446'>446</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C446'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P447'>
          <td align='right'>
            <a name='P447'>447</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C447'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P448'>
          <td align='right'>
            <a name='P448'>448</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying keys' id='C448'>
              1-ary keys
            </span>
          </td>
        </tr>
        <tr id='P449'>
          <td align='right'>
            <a name='P449'>449</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying max' id='C449'>
              1-ary max
            </span>
          </td>
        </tr>
        <tr id='P450'>
          <td align='right'>
            <a name='P450'>450</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C450'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P451'>
          <td align='right'>
            <a name='P451'>451</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C451'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P452'>
          <td align='right'>
            <a name='P452'>452</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 461' id='C452'>
              Jump 461
            </span>
          </td>
        </tr>
        <tr id='P453'>
          <td align='right'>
            <a name='P453'>453</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method bchoose' id='C453'>
              Frame bchoose bg
            </span>
          </td>
        </tr>
        <tr id='P454'>
          <td align='right'>
            <a name='P454'>454</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C454'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P455'>
          <td align='right'>
            <a name='P455'>455</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C455'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P456'>
          <td align='right'>
            <a name='P456'>456</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C456'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P457'>
          <td align='right'>
            <a name='P457'>457</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying keys' id='C457'>
              1-ary keys
            </span>
          </td>
        </tr>
        <tr id='P458'>
          <td align='right'>
            <a name='P458'>458</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a set value and push one of its elements' id='C458'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P459'>
          <td align='right'>
            <a name='P459'>459</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C459'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P460'>
          <td align='right'>
            <a name='P460'>460</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C460'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P461'>
          <td align='right'>
            <a name='P461'>461</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(464)' id='C461'>
              Push PC(464)
            </span>
          </td>
        </tr>
        <tr id='P462'>
          <td align='right'>
            <a name='P462'>462</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='top of stack is a built-in operation called bag$add' id='C462'>
              Builtin(bag$add)
            </span>
          </td>
        </tr>
        <tr id='P463'>
          <td align='right'>
            <a name='P463'>463</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 490' id='C463'>
              Jump 490
            </span>
          </td>
        </tr>
        <tr id='P464'>
          <td align='right'>
            <a name='P464'>464</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method add' id='C464'>
              Frame add (bg, elt)
            </span>
          </td>
        </tr>
        <tr id='P465'>
          <td align='right'>
            <a name='P465'>465</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C465'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P466'>
          <td align='right'>
            <a name='P466'>466</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C466'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P467'>
          <td align='right'>
            <a name='P467'>467</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C467'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P468'>
          <td align='right'>
            <a name='P468'>468</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C468'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P469'>
          <td align='right'>
            <a name='P469'>469</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C469'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P470'>
          <td align='right'>
            <a name='P470'>470</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C470'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P471'>
          <td align='right'>
            <a name='P471'>471</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying in' id='C471'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P472'>
          <td align='right'>
            <a name='P472'>472</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 483 if the value is False' id='C472'>
              JumpCond False 483
            </span>
          </td>
        </tr>
        <tr id='P473'>
          <td align='right'>
            <a name='P473'>473</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?result' id='C473'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P474'>
          <td align='right'>
            <a name='P474'>474</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C474'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P475'>
          <td align='right'>
            <a name='P475'>475</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C475'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P476'>
          <td align='right'>
            <a name='P476'>476</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C476'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P477'>
          <td align='right'>
            <a name='P477'>477</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C477'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P478'>
          <td align='right'>
            <a name='P478'>478</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop the address of a method variable and push the value of that variable' id='C478'>
              LoadVar [result]
            </span>
          </td>
        </tr>
        <tr id='P479'>
          <td align='right'>
            <a name='P479'>479</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C479'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P480'>
          <td align='right'>
            <a name='P480'>480</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C480'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P481'>
          <td align='right'>
            <a name='P481'>481</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C481'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P482'>
          <td align='right'>
            <a name='P482'>482</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 489' id='C482'>
              Jump 489
            </span>
          </td>
        </tr>
        <tr id='P483'>
          <td align='right'>
            <a name='P483'>483</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?result' id='C483'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P484'>
          <td align='right'>
            <a name='P484'>484</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C484'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P485'>
          <td align='right'>
            <a name='P485'>485</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C485'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P486'>
          <td align='right'>
            <a name='P486'>486</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C486'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P487'>
          <td align='right'>
            <a name='P487'>487</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C487'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P488'>
          <td align='right'>
            <a name='P488'>488</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C488'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P489'>
          <td align='right'>
            <a name='P489'>489</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C489'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P490'>
          <td align='right'>
            <a name='P490'>490</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(493)' id='C490'>
              Push PC(493)
            </span>
          </td>
        </tr>
        <tr id='P491'>
          <td align='right'>
            <a name='P491'>491</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called bag$remove' id='C491'>
              Builtin(bag$remove)
            </span>
          </td>
        </tr>
        <tr id='P492'>
          <td align='right'>
            <a name='P492'>492</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 943' id='C492'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P493'>
          <td align='right'>
            <a name='P493'>493</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method remove' id='C493'>
              Frame remove (bg, elt)
            </span>
          </td>
        </tr>
        <tr id='P494'>
          <td align='right'>
            <a name='P494'>494</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C494'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P495'>
          <td align='right'>
            <a name='P495'>495</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C495'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P496'>
          <td align='right'>
            <a name='P496'>496</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C496'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P497'>
          <td align='right'>
            <a name='P497'>497</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C497'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P498'>
          <td align='right'>
            <a name='P498'>498</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C498'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P499'>
          <td align='right'>
            <a name='P499'>499</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of result' id='C499'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P500'>
          <td align='right'>
            <a name='P500'>500</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying in' id='C500'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P501'>
          <td align='right'>
            <a name='P501'>501</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 510 if the value is False' id='C501'>
              JumpCond False 510
            </span>
          </td>
        </tr>
        <tr id='P502'>
          <td align='right'>
            <a name='P502'>502</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?result' id='C502'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P503'>
          <td align='right'>
            <a name='P503'>503</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C503'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P504'>
          <td align='right'>
            <a name='P504'>504</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C504'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P505'>
          <td align='right'>
            <a name='P505'>505</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C505'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P506'>
          <td align='right'>
            <a name='P506'>506</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop the address of a method variable and push the value of that variable' id='C506'>
              LoadVar [result]
            </span>
          </td>
        </tr>
        <tr id='P507'>
          <td align='right'>
            <a name='P507'>507</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C507'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P508'>
          <td align='right'>
            <a name='P508'>508</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C508'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P509'>
          <td align='right'>
            <a name='P509'>509</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C509'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P510'>
          <td align='right'>
            <a name='P510'>510</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C510'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P511'>
          <td align='right'>
            <a name='P511'>511</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C511'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P512'>
          <td align='right'>
            <a name='P512'>512</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C512'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P513'>
          <td align='right'>
            <a name='P513'>513</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C513'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P514'>
          <td align='right'>
            <a name='P514'>514</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying <=' id='C514'>
              2-ary <=
            </span>
          </td>
        </tr>
        <tr id='P515'>
          <td align='right'>
            <a name='P515'>515</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 521 if the value is False' id='C515'>
              JumpCond False 521
            </span>
          </td>
        </tr>
        <tr id='P516'>
          <td align='right'>
            <a name='P516'>516</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?result' id='C516'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P517'>
          <td align='right'>
            <a name='P517'>517</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C517'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P518'>
          <td align='right'>
            <a name='P518'>518</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable elt' id='C518'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P519'>
          <td align='right'>
            <a name='P519'>519</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C519'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P520'>
          <td align='right'>
            <a name='P520'>520</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address of a method variable and delete that variable' id='C520'>
              DelVar [result]
            </span>
          </td>
        </tr>
        <tr id='P521'>
          <td align='right'>
            <a name='P521'>521</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C521'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P522'>
          <td align='right'>
            <a name='P522'>522</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C522'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P523'>
          <td align='right'>
            <a name='P523'>523</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C523'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P524'>
          <td align='right'>
            <a name='P524'>524</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method combinations' id='C524'>
              Frame combinations (bg, k)
            </span>
          </td>
        </tr>
        <tr id='P525'>
          <td align='right'>
            <a name='P525'>525</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C525'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P526'>
          <td align='right'>
            <a name='P526'>526</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C526'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P527'>
          <td align='right'>
            <a name='P527'>527</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C527'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P528'>
          <td align='right'>
            <a name='P528'>528</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C528'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P529'>
          <td align='right'>
            <a name='P529'>529</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 535 if the value is False' id='C529'>
              JumpCond False 535
            </span>
          </td>
        </tr>
        <tr id='P530'>
          <td align='right'>
            <a name='P530'>530</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C530'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P531'>
          <td align='right'>
            <a name='P531'>531</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable k' id='C531'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P532'>
          <td align='right'>
            <a name='P532'>532</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { {:} }' id='C532'>
              Push { {:} }
            </span>
          </td>
        </tr>
        <tr id='P533'>
          <td align='right'>
            <a name='P533'>533</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C533'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P534'>
          <td align='right'>
            <a name='P534'>534</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 616' id='C534'>
              Jump 616
            </span>
          </td>
        </tr>
        <tr id='P535'>
          <td align='right'>
            <a name='P535'>535</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(395)' id='C535'>
              Push PC(395)
            </span>
          </td>
        </tr>
        <tr id='P536'>
          <td align='right'>
            <a name='P536'>536</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C536'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P537'>
          <td align='right'>
            <a name='P537'>537</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C537'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P538'>
          <td align='right'>
            <a name='P538'>538</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in n' id='C538'>
              StoreVar n
            </span>
          </td>
        </tr>
        <tr id='P539'>
          <td align='right'>
            <a name='P539'>539</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of k' id='C539'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P540'>
          <td align='right'>
            <a name='P540'>540</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C540'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P541'>
          <td align='right'>
            <a name='P541'>541</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying >' id='C541'>
              2-ary >
            </span>
          </td>
        </tr>
        <tr id='P542'>
          <td align='right'>
            <a name='P542'>542</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 549 if the value is False' id='C542'>
              JumpCond False 549
            </span>
          </td>
        </tr>
        <tr id='P543'>
          <td align='right'>
            <a name='P543'>543</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C543'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P544'>
          <td align='right'>
            <a name='P544'>544</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable k' id='C544'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P545'>
          <td align='right'>
            <a name='P545'>545</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable n' id='C545'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P546'>
          <td align='right'>
            <a name='P546'>546</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C546'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P547'>
          <td align='right'>
            <a name='P547'>547</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C547'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P548'>
          <td align='right'>
            <a name='P548'>548</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 616' id='C548'>
              Jump 616
            </span>
          </td>
        </tr>
        <tr id='P549'>
          <td align='right'>
            <a name='P549'>549</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of k' id='C549'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P550'>
          <td align='right'>
            <a name='P550'>550</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C550'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P551'>
          <td align='right'>
            <a name='P551'>551</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable n' id='C551'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P552'>
          <td align='right'>
            <a name='P552'>552</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C552'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P553'>
          <td align='right'>
            <a name='P553'>553</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 561 if the value is False' id='C553'>
              JumpCond False 561
            </span>
          </td>
        </tr>
        <tr id='P554'>
          <td align='right'>
            <a name='P554'>554</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable k' id='C554'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P555'>
          <td align='right'>
            <a name='P555'>555</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {}' id='C555'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P556'>
          <td align='right'>
            <a name='P556'>556</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C556'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P557'>
          <td align='right'>
            <a name='P557'>557</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C557'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P558'>
          <td align='right'>
            <a name='P558'>558</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C558'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P559'>
          <td align='right'>
            <a name='P559'>559</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C559'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P560'>
          <td align='right'>
            <a name='P560'>560</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 616' id='C560'>
              Jump 616
            </span>
          </td>
        </tr>
        <tr id='P561'>
          <td align='right'>
            <a name='P561'>561</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(417)' id='C561'>
              Push PC(417)
            </span>
          </td>
        </tr>
        <tr id='P562'>
          <td align='right'>
            <a name='P562'>562</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C562'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P563'>
          <td align='right'>
            <a name='P563'>563</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C563'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P564'>
          <td align='right'>
            <a name='P564'>564</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in hd' id='C564'>
              StoreVar hd
            </span>
          </td>
        </tr>
        <tr id='P565'>
          <td align='right'>
            <a name='P565'>565</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(493)' id='C565'>
              Push PC(493)
            </span>
          </td>
        </tr>
        <tr id='P566'>
          <td align='right'>
            <a name='P566'>566</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C566'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P567'>
          <td align='right'>
            <a name='P567'>567</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C567'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P568'>
          <td align='right'>
            <a name='P568'>568</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C568'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P569'>
          <td align='right'>
            <a name='P569'>569</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C569'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P570'>
          <td align='right'>
            <a name='P570'>570</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of hd' id='C570'>
              LoadVar hd
            </span>
          </td>
        </tr>
        <tr id='P571'>
          <td align='right'>
            <a name='P571'>571</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C571'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P572'>
          <td align='right'>
            <a name='P572'>572</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C572'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P573'>
          <td align='right'>
            <a name='P573'>573</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in tl' id='C573'>
              StoreVar tl
            </span>
          </td>
        </tr>
        <tr id='P574'>
          <td align='right'>
            <a name='P574'>574</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C574'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P575'>
          <td align='right'>
            <a name='P575'>575</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu454' id='C575'>
              StoreVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P576'>
          <td align='right'>
            <a name='P576'>576</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(524)' id='C576'>
              Push PC(524)
            </span>
          </td>
        </tr>
        <tr id='P577'>
          <td align='right'>
            <a name='P577'>577</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C577'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P578'>
          <td align='right'>
            <a name='P578'>578</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of tl' id='C578'>
              LoadVar tl
            </span>
          </td>
        </tr>
        <tr id='P579'>
          <td align='right'>
            <a name='P579'>579</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C579'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P580'>
          <td align='right'>
            <a name='P580'>580</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C580'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P581'>
          <td align='right'>
            <a name='P581'>581</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C581'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P582'>
          <td align='right'>
            <a name='P582'>582</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C582'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P583'>
          <td align='right'>
            <a name='P583'>583</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C583'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P584'>
          <td align='right'>
            <a name='P584'>584</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C584'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P585'>
          <td align='right'>
            <a name='P585'>585</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C585'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P586'>
          <td align='right'>
            <a name='P586'>586</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to x' id='C586'>
              Cut(x)
            </span>
          </td>
        </tr>
        <tr id='P587'>
          <td align='right'>
            <a name='P587'>587</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 601 if the value is False' id='C587'>
              JumpCond False 601
            </span>
          </td>
        </tr>
        <tr id='P588'>
          <td align='right'>
            <a name='P588'>588</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $accu454' id='C588'>
              LoadVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P589'>
          <td align='right'>
            <a name='P589'>589</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu454' id='C589'>
              DelVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P590'>
          <td align='right'>
            <a name='P590'>590</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(464)' id='C590'>
              Push PC(464)
            </span>
          </td>
        </tr>
        <tr id='P591'>
          <td align='right'>
            <a name='P591'>591</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C591'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P592'>
          <td align='right'>
            <a name='P592'>592</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of x' id='C592'>
              LoadVar x
            </span>
          </td>
        </tr>
        <tr id='P593'>
          <td align='right'>
            <a name='P593'>593</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable x' id='C593'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P594'>
          <td align='right'>
            <a name='P594'>594</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C594'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P595'>
          <td align='right'>
            <a name='P595'>595</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of hd' id='C595'>
              LoadVar hd
            </span>
          </td>
        </tr>
        <tr id='P596'>
          <td align='right'>
            <a name='P596'>596</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C596'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P597'>
          <td align='right'>
            <a name='P597'>597</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C597'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P598'>
          <td align='right'>
            <a name='P598'>598</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C598'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P599'>
          <td align='right'>
            <a name='P599'>599</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $accu454' id='C599'>
              StoreVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P600'>
          <td align='right'>
            <a name='P600'>600</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 586' id='C600'>
              Jump 586
            </span>
          </td>
        </tr>
        <tr id='P601'>
          <td align='right'>
            <a name='P601'>601</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable hd' id='C601'>
              DelVar hd
            </span>
          </td>
        </tr>
        <tr id='P602'>
          <td align='right'>
            <a name='P602'>602</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable x' id='C602'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P603'>
          <td align='right'>
            <a name='P603'>603</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of $accu454' id='C603'>
              LoadVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P604'>
          <td align='right'>
            <a name='P604'>604</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu454' id='C604'>
              DelVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P605'>
          <td align='right'>
            <a name='P605'>605</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(524)' id='C605'>
              Push PC(524)
            </span>
          </td>
        </tr>
        <tr id='P606'>
          <td align='right'>
            <a name='P606'>606</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C606'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P607'>
          <td align='right'>
            <a name='P607'>607</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of tl' id='C607'>
              LoadVar tl
            </span>
          </td>
        </tr>
        <tr id='P608'>
          <td align='right'>
            <a name='P608'>608</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable tl' id='C608'>
              DelVar tl
            </span>
          </td>
        </tr>
        <tr id='P609'>
          <td align='right'>
            <a name='P609'>609</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C609'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P610'>
          <td align='right'>
            <a name='P610'>610</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C610'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P611'>
          <td align='right'>
            <a name='P611'>611</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable k' id='C611'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P612'>
          <td align='right'>
            <a name='P612'>612</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C612'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P613'>
          <td align='right'>
            <a name='P613'>613</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C613'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P614'>
          <td align='right'>
            <a name='P614'>614</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying |' id='C614'>
              2-ary |
            </span>
          </td>
        </tr>
        <tr id='P615'>
          <td align='right'>
            <a name='P615'>615</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C615'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P616'>
          <td align='right'>
            <a name='P616'>616</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C616'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P617'>
          <td align='right'>
            <a name='P617'>617</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C617'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P618'>
          <td align='right'>
            <a name='P618'>618</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method atomic_load' id='C618'>
              Frame atomic_load p
            </span>
          </td>
        </tr>
        <tr id='P619'>
          <td align='right'>
            <a name='P619'>619</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C619'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P620'>
          <td align='right'>
            <a name='P620'>620</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C620'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P621'>
          <td align='right'>
            <a name='P621'>621</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of p' id='C621'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P622'>
          <td align='right'>
            <a name='P622'>622</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable p' id='C622'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P623'>
          <td align='right'>
            <a name='P623'>623</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C623'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P624'>
          <td align='right'>
            <a name='P624'>624</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C624'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P625'>
          <td align='right'>
            <a name='P625'>625</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C625'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P626'>
          <td align='right'>
            <a name='P626'>626</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C626'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P627'>
          <td align='right'>
            <a name='P627'>627</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C627'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P628'>
          <td align='right'>
            <a name='P628'>628</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method atomic_store' id='C628'>
              Frame atomic_store (p, v)
            </span>
          </td>
        </tr>
        <tr id='P629'>
          <td align='right'>
            <a name='P629'>629</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C629'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P630'>
          <td align='right'>
            <a name='P630'>630</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p' id='C630'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P631'>
          <td align='right'>
            <a name='P631'>631</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p' id='C631'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P632'>
          <td align='right'>
            <a name='P632'>632</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C632'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P633'>
          <td align='right'>
            <a name='P633'>633</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C633'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P634'>
          <td align='right'>
            <a name='P634'>634</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C634'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P635'>
          <td align='right'>
            <a name='P635'>635</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C635'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P636'>
          <td align='right'>
            <a name='P636'>636</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C636'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P637'>
          <td align='right'>
            <a name='P637'>637</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C637'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P638'>
          <td align='right'>
            <a name='P638'>638</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method tas' id='C638'>
              Frame tas lk
            </span>
          </td>
        </tr>
        <tr id='P639'>
          <td align='right'>
            <a name='P639'>639</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C639'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P640'>
          <td align='right'>
            <a name='P640'>640</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C640'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P641'>
          <td align='right'>
            <a name='P641'>641</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of lk' id='C641'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P642'>
          <td align='right'>
            <a name='P642'>642</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C642'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P643'>
          <td align='right'>
            <a name='P643'>643</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C643'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P644'>
          <td align='right'>
            <a name='P644'>644</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C644'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P645'>
          <td align='right'>
            <a name='P645'>645</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable lk' id='C645'>
              DelVar lk
            </span>
          </td>
        </tr>
        <tr id='P646'>
          <td align='right'>
            <a name='P646'>646</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C646'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P647'>
          <td align='right'>
            <a name='P647'>647</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C647'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P648'>
          <td align='right'>
            <a name='P648'>648</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C648'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P649'>
          <td align='right'>
            <a name='P649'>649</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C649'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P650'>
          <td align='right'>
            <a name='P650'>650</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 943' id='C650'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P651'>
          <td align='right'>
            <a name='P651'>651</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method cas' id='C651'>
              Frame cas (p, old, new)
            </span>
          </td>
        </tr>
        <tr id='P652'>
          <td align='right'>
            <a name='P652'>652</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C652'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P653'>
          <td align='right'>
            <a name='P653'>653</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C653'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P654'>
          <td align='right'>
            <a name='P654'>654</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p' id='C654'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P655'>
          <td align='right'>
            <a name='P655'>655</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C655'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P656'>
          <td align='right'>
            <a name='P656'>656</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of old' id='C656'>
              LoadVar old
            </span>
          </td>
        </tr>
        <tr id='P657'>
          <td align='right'>
            <a name='P657'>657</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable old' id='C657'>
              DelVar old
            </span>
          </td>
        </tr>
        <tr id='P658'>
          <td align='right'>
            <a name='P658'>658</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C658'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P659'>
          <td align='right'>
            <a name='P659'>659</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C659'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P660'>
          <td align='right'>
            <a name='P660'>660</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C660'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P661'>
          <td align='right'>
            <a name='P661'>661</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 667 if the value is False' id='C661'>
              JumpCond False 667
            </span>
          </td>
        </tr>
        <tr id='P662'>
          <td align='right'>
            <a name='P662'>662</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p' id='C662'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P663'>
          <td align='right'>
            <a name='P663'>663</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p' id='C663'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P664'>
          <td align='right'>
            <a name='P664'>664</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of new' id='C664'>
              LoadVar new
            </span>
          </td>
        </tr>
        <tr id='P665'>
          <td align='right'>
            <a name='P665'>665</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable new' id='C665'>
              DelVar new
            </span>
          </td>
        </tr>
        <tr id='P666'>
          <td align='right'>
            <a name='P666'>666</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C666'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P667'>
          <td align='right'>
            <a name='P667'>667</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable new' id='C667'>
              DelVar new
            </span>
          </td>
        </tr>
        <tr id='P668'>
          <td align='right'>
            <a name='P668'>668</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable p' id='C668'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P669'>
          <td align='right'>
            <a name='P669'>669</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C669'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P670'>
          <td align='right'>
            <a name='P670'>670</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C670'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P671'>
          <td align='right'>
            <a name='P671'>671</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C671'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P672'>
          <td align='right'>
            <a name='P672'>672</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method BinSema' id='C672'>
              Frame BinSema acquired
            </span>
          </td>
        </tr>
        <tr id='P673'>
          <td align='right'>
            <a name='P673'>673</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C673'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P674'>
          <td align='right'>
            <a name='P674'>674</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acquired' id='C674'>
              LoadVar acquired
            </span>
          </td>
        </tr>
        <tr id='P675'>
          <td align='right'>
            <a name='P675'>675</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acquired' id='C675'>
              DelVar acquired
            </span>
          </td>
        </tr>
        <tr id='P676'>
          <td align='right'>
            <a name='P676'>676</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C676'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P677'>
          <td align='right'>
            <a name='P677'>677</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C677'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P678'>
          <td align='right'>
            <a name='P678'>678</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 943' id='C678'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P679'>
          <td align='right'>
            <a name='P679'>679</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method Lock' id='C679'>
              Frame Lock ()
            </span>
          </td>
        </tr>
        <tr id='P680'>
          <td align='right'>
            <a name='P680'>680</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C680'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P681'>
          <td align='right'>
            <a name='P681'>681</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(672)' id='C681'>
              Push PC(672)
            </span>
          </td>
        </tr>
        <tr id='P682'>
          <td align='right'>
            <a name='P682'>682</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C682'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P683'>
          <td align='right'>
            <a name='P683'>683</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C683'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P684'>
          <td align='right'>
            <a name='P684'>684</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C684'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P685'>
          <td align='right'>
            <a name='P685'>685</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C685'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P686'>
          <td align='right'>
            <a name='P686'>686</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 943' id='C686'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P687'>
          <td align='right'>
            <a name='P687'>687</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method acquired' id='C687'>
              Frame acquired binsema
            </span>
          </td>
        </tr>
        <tr id='P688'>
          <td align='right'>
            <a name='P688'>688</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C688'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P689'>
          <td align='right'>
            <a name='P689'>689</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of binsema' id='C689'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P690'>
          <td align='right'>
            <a name='P690'>690</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable binsema' id='C690'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P691'>
          <td align='right'>
            <a name='P691'>691</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C691'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P692'>
          <td align='right'>
            <a name='P692'>692</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C692'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P693'>
          <td align='right'>
            <a name='P693'>693</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C693'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P694'>
          <td align='right'>
            <a name='P694'>694</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 943' id='C694'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P695'>
          <td align='right'>
            <a name='P695'>695</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method acquire' id='C695'>
              Frame acquire binsema
            </span>
          </td>
        </tr>
        <tr id='P696'>
          <td align='right'>
            <a name='P696'>696</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C696'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P697'>
          <td align='right'>
            <a name='P697'>697</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C697'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P698'>
          <td align='right'>
            <a name='P698'>698</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of binsema' id='C698'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P699'>
          <td align='right'>
            <a name='P699'>699</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C699'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P700'>
          <td align='right'>
            <a name='P700'>700</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying not' id='C700'>
              1-ary not
            </span>
          </td>
        </tr>
        <tr id='P701'>
          <td align='right'>
            <a name='P701'>701</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 703 if the value is False' id='C701'>
              JumpCond False 703
            </span>
          </td>
        </tr>
        <tr id='P702'>
          <td align='right'>
            <a name='P702'>702</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 706' id='C702'>
              Jump 706
            </span>
          </td>
        </tr>
        <tr id='P703'>
          <td align='right'>
            <a name='P703'>703</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C703'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P704'>
          <td align='right'>
            <a name='P704'>704</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C704'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P705'>
          <td align='right'>
            <a name='P705'>705</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 696' id='C705'>
              Jump 696
            </span>
          </td>
        </tr>
        <tr id='P706'>
          <td align='right'>
            <a name='P706'>706</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C706'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P707'>
          <td align='right'>
            <a name='P707'>707</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of binsema' id='C707'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P708'>
          <td align='right'>
            <a name='P708'>708</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable binsema' id='C708'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P709'>
          <td align='right'>
            <a name='P709'>709</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C709'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P710'>
          <td align='right'>
            <a name='P710'>710</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C710'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P711'>
          <td align='right'>
            <a name='P711'>711</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C711'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P712'>
          <td align='right'>
            <a name='P712'>712</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C712'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P713'>
          <td align='right'>
            <a name='P713'>713</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C713'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P714'>
          <td align='right'>
            <a name='P714'>714</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method release' id='C714'>
              Frame release binsema
            </span>
          </td>
        </tr>
        <tr id='P715'>
          <td align='right'>
            <a name='P715'>715</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C715'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P716'>
          <td align='right'>
            <a name='P716'>716</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C716'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P717'>
          <td align='right'>
            <a name='P717'>717</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C717'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P718'>
          <td align='right'>
            <a name='P718'>718</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of binsema' id='C718'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P719'>
          <td align='right'>
            <a name='P719'>719</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C719'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P720'>
          <td align='right'>
            <a name='P720'>720</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C720'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P721'>
          <td align='right'>
            <a name='P721'>721</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C721'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P722'>
          <td align='right'>
            <a name='P722'>722</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C722'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P723'>
          <td align='right'>
            <a name='P723'>723</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of binsema' id='C723'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P724'>
          <td align='right'>
            <a name='P724'>724</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable binsema' id='C724'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P725'>
          <td align='right'>
            <a name='P725'>725</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C725'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P726'>
          <td align='right'>
            <a name='P726'>726</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C726'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P727'>
          <td align='right'>
            <a name='P727'>727</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C727'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P728'>
          <td align='right'>
            <a name='P728'>728</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C728'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P729'>
          <td align='right'>
            <a name='P729'>729</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C729'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P730'>
          <td align='right'>
            <a name='P730'>730</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method held' id='C730'>
              Frame held binsema
            </span>
          </td>
        </tr>
        <tr id='P731'>
          <td align='right'>
            <a name='P731'>731</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C731'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P732'>
          <td align='right'>
            <a name='P732'>732</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of binsema' id='C732'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P733'>
          <td align='right'>
            <a name='P733'>733</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable binsema' id='C733'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P734'>
          <td align='right'>
            <a name='P734'>734</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C734'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P735'>
          <td align='right'>
            <a name='P735'>735</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C735'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P736'>
          <td align='right'>
            <a name='P736'>736</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C736'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P737'>
          <td align='right'>
            <a name='P737'>737</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C737'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P738'>
          <td align='right'>
            <a name='P738'>738</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method Condition' id='C738'>
              Frame Condition ()
            </span>
          </td>
        </tr>
        <tr id='P739'>
          <td align='right'>
            <a name='P739'>739</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C739'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P740'>
          <td align='right'>
            <a name='P740'>740</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(310)' id='C740'>
              Push PC(310)
            </span>
          </td>
        </tr>
        <tr id='P741'>
          <td align='right'>
            <a name='P741'>741</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C741'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P742'>
          <td align='right'>
            <a name='P742'>742</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C742'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P743'>
          <td align='right'>
            <a name='P743'>743</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C743'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P744'>
          <td align='right'>
            <a name='P744'>744</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C744'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P745'>
          <td align='right'>
            <a name='P745'>745</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C745'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P746'>
          <td align='right'>
            <a name='P746'>746</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method wait' id='C746'>
              Frame wait (c, lk)
            </span>
          </td>
        </tr>
        <tr id='P747'>
          <td align='right'>
            <a name='P747'>747</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C747'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P748'>
          <td align='right'>
            <a name='P748'>748</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in cnt' id='C748'>
              StoreVar cnt
            </span>
          </td>
        </tr>
        <tr id='P749'>
          <td align='right'>
            <a name='P749'>749</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable cnt' id='C749'>
              DelVar cnt
            </span>
          </td>
        </tr>
        <tr id='P750'>
          <td align='right'>
            <a name='P750'>750</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C750'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P751'>
          <td align='right'>
            <a name='P751'>751</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and save context' id='C751'>
              Save
            </span>
          </td>
        </tr>
        <tr id='P752'>
          <td align='right'>
            <a name='P752'>752</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='a no-op, must follow a Stop operation' id='C752'>
              Continue
            </span>
          </td>
        </tr>
        <tr id='P753'>
          <td align='right'>
            <a name='P753'>753</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in ((), ctx)' id='C753'>
              StoreVar ((), ctx)
            </span>
          </td>
        </tr>
        <tr id='P754'>
          <td align='right'>
            <a name='P754'>754</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C754'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P755'>
          <td align='right'>
            <a name='P755'>755</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(374)' id='C755'>
              Push PC(374)
            </span>
          </td>
        </tr>
        <tr id='P756'>
          <td align='right'>
            <a name='P756'>756</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C756'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P757'>
          <td align='right'>
            <a name='P757'>757</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C757'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P758'>
          <td align='right'>
            <a name='P758'>758</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C758'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P759'>
          <td align='right'>
            <a name='P759'>759</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C759'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P760'>
          <td align='right'>
            <a name='P760'>760</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of ctx' id='C760'>
              LoadVar ctx
            </span>
          </td>
        </tr>
        <tr id='P761'>
          <td align='right'>
            <a name='P761'>761</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C761'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P762'>
          <td align='right'>
            <a name='P762'>762</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C762'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P763'>
          <td align='right'>
            <a name='P763'>763</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in cnt' id='C763'>
              StoreVar cnt
            </span>
          </td>
        </tr>
        <tr id='P764'>
          <td align='right'>
            <a name='P764'>764</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C764'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P765'>
          <td align='right'>
            <a name='P765'>765</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(464)' id='C765'>
              Push PC(464)
            </span>
          </td>
        </tr>
        <tr id='P766'>
          <td align='right'>
            <a name='P766'>766</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C766'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P767'>
          <td align='right'>
            <a name='P767'>767</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C767'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P768'>
          <td align='right'>
            <a name='P768'>768</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C768'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P769'>
          <td align='right'>
            <a name='P769'>769</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C769'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P770'>
          <td align='right'>
            <a name='P770'>770</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of ctx' id='C770'>
              LoadVar ctx
            </span>
          </td>
        </tr>
        <tr id='P771'>
          <td align='right'>
            <a name='P771'>771</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C771'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P772'>
          <td align='right'>
            <a name='P772'>772</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C772'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P773'>
          <td align='right'>
            <a name='P773'>773</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C773'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P774'>
          <td align='right'>
            <a name='P774'>774</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C774'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P775'>
          <td align='right'>
            <a name='P775'>775</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C775'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P776'>
          <td align='right'>
            <a name='P776'>776</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C776'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P777'>
          <td align='right'>
            <a name='P777'>777</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C777'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P778'>
          <td align='right'>
            <a name='P778'>778</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C778'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P779'>
          <td align='right'>
            <a name='P779'>779</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C779'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P780'>
          <td align='right'>
            <a name='P780'>780</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C780'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P781'>
          <td align='right'>
            <a name='P781'>781</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C781'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P782'>
          <td align='right'>
            <a name='P782'>782</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying not' id='C782'>
              1-ary not
            </span>
          </td>
        </tr>
        <tr id='P783'>
          <td align='right'>
            <a name='P783'>783</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 795 if the value is False' id='C783'>
              JumpCond False 795
            </span>
          </td>
        </tr>
        <tr id='P784'>
          <td align='right'>
            <a name='P784'>784</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(374)' id='C784'>
              Push PC(374)
            </span>
          </td>
        </tr>
        <tr id='P785'>
          <td align='right'>
            <a name='P785'>785</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C785'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P786'>
          <td align='right'>
            <a name='P786'>786</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C786'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P787'>
          <td align='right'>
            <a name='P787'>787</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C787'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P788'>
          <td align='right'>
            <a name='P788'>788</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C788'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P789'>
          <td align='right'>
            <a name='P789'>789</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of ctx' id='C789'>
              LoadVar ctx
            </span>
          </td>
        </tr>
        <tr id='P790'>
          <td align='right'>
            <a name='P790'>790</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C790'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P791'>
          <td align='right'>
            <a name='P791'>791</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C791'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P792'>
          <td align='right'>
            <a name='P792'>792</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of cnt' id='C792'>
              LoadVar cnt
            </span>
          </td>
        </tr>
        <tr id='P793'>
          <td align='right'>
            <a name='P793'>793</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying <=' id='C793'>
              2-ary <=
            </span>
          </td>
        </tr>
        <tr id='P794'>
          <td align='right'>
            <a name='P794'>794</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 796' id='C794'>
              Jump 796
            </span>
          </td>
        </tr>
        <tr id='P795'>
          <td align='right'>
            <a name='P795'>795</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C795'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P796'>
          <td align='right'>
            <a name='P796'>796</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 801 if the value is False' id='C796'>
              JumpCond False 801
            </span>
          </td>
        </tr>
        <tr id='P797'>
          <td align='right'>
            <a name='P797'>797</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C797'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P798'>
          <td align='right'>
            <a name='P798'>798</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable cnt' id='C798'>
              DelVar cnt
            </span>
          </td>
        </tr>
        <tr id='P799'>
          <td align='right'>
            <a name='P799'>799</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable ctx' id='C799'>
              DelVar ctx
            </span>
          </td>
        </tr>
        <tr id='P800'>
          <td align='right'>
            <a name='P800'>800</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 804' id='C800'>
              Jump 804
            </span>
          </td>
        </tr>
        <tr id='P801'>
          <td align='right'>
            <a name='P801'>801</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C801'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P802'>
          <td align='right'>
            <a name='P802'>802</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C802'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P803'>
          <td align='right'>
            <a name='P803'>803</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 778' id='C803'>
              Jump 778
            </span>
          </td>
        </tr>
        <tr id='P804'>
          <td align='right'>
            <a name='P804'>804</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C804'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P805'>
          <td align='right'>
            <a name='P805'>805</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of lk' id='C805'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P806'>
          <td align='right'>
            <a name='P806'>806</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable lk' id='C806'>
              DelVar lk
            </span>
          </td>
        </tr>
        <tr id='P807'>
          <td align='right'>
            <a name='P807'>807</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C807'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P808'>
          <td align='right'>
            <a name='P808'>808</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C808'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P809'>
          <td align='right'>
            <a name='P809'>809</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C809'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P810'>
          <td align='right'>
            <a name='P810'>810</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C810'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P811'>
          <td align='right'>
            <a name='P811'>811</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C811'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P812'>
          <td align='right'>
            <a name='P812'>812</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method notify' id='C812'>
              Frame notify c
            </span>
          </td>
        </tr>
        <tr id='P813'>
          <td align='right'>
            <a name='P813'>813</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C813'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P814'>
          <td align='right'>
            <a name='P814'>814</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C814'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P815'>
          <td align='right'>
            <a name='P815'>815</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C815'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P816'>
          <td align='right'>
            <a name='P816'>816</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(310)' id='C816'>
              Push PC(310)
            </span>
          </td>
        </tr>
        <tr id='P817'>
          <td align='right'>
            <a name='P817'>817</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C817'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P818'>
          <td align='right'>
            <a name='P818'>818</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C818'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P819'>
          <td align='right'>
            <a name='P819'>819</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying !=' id='C819'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P820'>
          <td align='right'>
            <a name='P820'>820</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 835 if the value is False' id='C820'>
              JumpCond False 835
            </span>
          </td>
        </tr>
        <tr id='P821'>
          <td align='right'>
            <a name='P821'>821</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C821'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P822'>
          <td align='right'>
            <a name='P822'>822</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(493)' id='C822'>
              Push PC(493)
            </span>
          </td>
        </tr>
        <tr id='P823'>
          <td align='right'>
            <a name='P823'>823</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C823'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P824'>
          <td align='right'>
            <a name='P824'>824</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C824'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P825'>
          <td align='right'>
            <a name='P825'>825</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C825'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P826'>
          <td align='right'>
            <a name='P826'>826</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C826'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P827'>
          <td align='right'>
            <a name='P827'>827</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(453)' id='C827'>
              Push PC(453)
            </span>
          </td>
        </tr>
        <tr id='P828'>
          <td align='right'>
            <a name='P828'>828</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C828'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P829'>
          <td align='right'>
            <a name='P829'>829</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C829'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P830'>
          <td align='right'>
            <a name='P830'>830</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C830'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P831'>
          <td align='right'>
            <a name='P831'>831</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C831'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P832'>
          <td align='right'>
            <a name='P832'>832</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C832'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P833'>
          <td align='right'>
            <a name='P833'>833</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C833'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P834'>
          <td align='right'>
            <a name='P834'>834</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C834'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P835'>
          <td align='right'>
            <a name='P835'>835</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C835'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P836'>
          <td align='right'>
            <a name='P836'>836</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C836'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P837'>
          <td align='right'>
            <a name='P837'>837</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C837'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P838'>
          <td align='right'>
            <a name='P838'>838</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 943' id='C838'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P839'>
          <td align='right'>
            <a name='P839'>839</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method notifyAll' id='C839'>
              Frame notifyAll c
            </span>
          </td>
        </tr>
        <tr id='P840'>
          <td align='right'>
            <a name='P840'>840</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C840'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P841'>
          <td align='right'>
            <a name='P841'>841</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C841'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P842'>
          <td align='right'>
            <a name='P842'>842</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable c' id='C842'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P843'>
          <td align='right'>
            <a name='P843'>843</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(310)' id='C843'>
              Push PC(310)
            </span>
          </td>
        </tr>
        <tr id='P844'>
          <td align='right'>
            <a name='P844'>844</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C844'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P845'>
          <td align='right'>
            <a name='P845'>845</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C845'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P846'>
          <td align='right'>
            <a name='P846'>846</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C846'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P847'>
          <td align='right'>
            <a name='P847'>847</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C847'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P848'>
          <td align='right'>
            <a name='P848'>848</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C848'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P849'>
          <td align='right'>
            <a name='P849'>849</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C849'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P850'>
          <td align='right'>
            <a name='P850'>850</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method Semaphore' id='C850'>
              Frame Semaphore cnt
            </span>
          </td>
        </tr>
        <tr id='P851'>
          <td align='right'>
            <a name='P851'>851</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C851'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P852'>
          <td align='right'>
            <a name='P852'>852</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of cnt' id='C852'>
              LoadVar cnt
            </span>
          </td>
        </tr>
        <tr id='P853'>
          <td align='right'>
            <a name='P853'>853</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable cnt' id='C853'>
              DelVar cnt
            </span>
          </td>
        </tr>
        <tr id='P854'>
          <td align='right'>
            <a name='P854'>854</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C854'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P855'>
          <td align='right'>
            <a name='P855'>855</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C855'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P856'>
          <td align='right'>
            <a name='P856'>856</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 943' id='C856'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P857'>
          <td align='right'>
            <a name='P857'>857</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method P' id='C857'>
              Frame P sema
            </span>
          </td>
        </tr>
        <tr id='P858'>
          <td align='right'>
            <a name='P858'>858</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C858'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P859'>
          <td align='right'>
            <a name='P859'>859</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C859'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P860'>
          <td align='right'>
            <a name='P860'>860</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of sema' id='C860'>
              LoadVar sema
            </span>
          </td>
        </tr>
        <tr id='P861'>
          <td align='right'>
            <a name='P861'>861</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C861'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P862'>
          <td align='right'>
            <a name='P862'>862</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C862'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P863'>
          <td align='right'>
            <a name='P863'>863</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying >' id='C863'>
              2-ary >
            </span>
          </td>
        </tr>
        <tr id='P864'>
          <td align='right'>
            <a name='P864'>864</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 866 if the value is False' id='C864'>
              JumpCond False 866
            </span>
          </td>
        </tr>
        <tr id='P865'>
          <td align='right'>
            <a name='P865'>865</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 869' id='C865'>
              Jump 869
            </span>
          </td>
        </tr>
        <tr id='P866'>
          <td align='right'>
            <a name='P866'>866</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C866'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P867'>
          <td align='right'>
            <a name='P867'>867</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C867'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P868'>
          <td align='right'>
            <a name='P868'>868</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 858' id='C868'>
              Jump 858
            </span>
          </td>
        </tr>
        <tr id='P869'>
          <td align='right'>
            <a name='P869'>869</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C869'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P870'>
          <td align='right'>
            <a name='P870'>870</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of sema' id='C870'>
              LoadVar sema
            </span>
          </td>
        </tr>
        <tr id='P871'>
          <td align='right'>
            <a name='P871'>871</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable sema' id='C871'>
              DelVar sema
            </span>
          </td>
        </tr>
        <tr id='P872'>
          <td align='right'>
            <a name='P872'>872</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C872'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P873'>
          <td align='right'>
            <a name='P873'>873</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C873'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P874'>
          <td align='right'>
            <a name='P874'>874</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C874'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P875'>
          <td align='right'>
            <a name='P875'>875</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C875'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P876'>
          <td align='right'>
            <a name='P876'>876</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C876'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P877'>
          <td align='right'>
            <a name='P877'>877</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C877'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P878'>
          <td align='right'>
            <a name='P878'>878</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C878'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P879'>
          <td align='right'>
            <a name='P879'>879</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C879'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P880'>
          <td align='right'>
            <a name='P880'>880</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method V' id='C880'>
              Frame V sema
            </span>
          </td>
        </tr>
        <tr id='P881'>
          <td align='right'>
            <a name='P881'>881</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C881'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P882'>
          <td align='right'>
            <a name='P882'>882</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of sema' id='C882'>
              LoadVar sema
            </span>
          </td>
        </tr>
        <tr id='P883'>
          <td align='right'>
            <a name='P883'>883</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable sema' id='C883'>
              DelVar sema
            </span>
          </td>
        </tr>
        <tr id='P884'>
          <td align='right'>
            <a name='P884'>884</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C884'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P885'>
          <td align='right'>
            <a name='P885'>885</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C885'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P886'>
          <td align='right'>
            <a name='P886'>886</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C886'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P887'>
          <td align='right'>
            <a name='P887'>887</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C887'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P888'>
          <td align='right'>
            <a name='P888'>888</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C888'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P889'>
          <td align='right'>
            <a name='P889'>889</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C889'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P890'>
          <td align='right'>
            <a name='P890'>890</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C890'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P891'>
          <td align='right'>
            <a name='P891'>891</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C891'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P892'>
          <td align='right'>
            <a name='P892'>892</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method Queue' id='C892'>
              Frame Queue ()
            </span>
          </td>
        </tr>
        <tr id='P893'>
          <td align='right'>
            <a name='P893'>893</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C893'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P894'>
          <td align='right'>
            <a name='P894'>894</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C894'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P895'>
          <td align='right'>
            <a name='P895'>895</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C895'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P896'>
          <td align='right'>
            <a name='P896'>896</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C896'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P897'>
          <td align='right'>
            <a name='P897'>897</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 943' id='C897'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P898'>
          <td align='right'>
            <a name='P898'>898</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method get' id='C898'>
              Frame get q
            </span>
          </td>
        </tr>
        <tr id='P899'>
          <td align='right'>
            <a name='P899'>899</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C899'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P900'>
          <td align='right'>
            <a name='P900'>900</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C900'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P901'>
          <td align='right'>
            <a name='P901'>901</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C901'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P902'>
          <td align='right'>
            <a name='P902'>902</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of q' id='C902'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P903'>
          <td align='right'>
            <a name='P903'>903</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C903'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P904'>
          <td align='right'>
            <a name='P904'>904</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C904'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P905'>
          <td align='right'>
            <a name='P905'>905</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying !=' id='C905'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P906'>
          <td align='right'>
            <a name='P906'>906</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 908 if the value is False' id='C906'>
              JumpCond False 908
            </span>
          </td>
        </tr>
        <tr id='P907'>
          <td align='right'>
            <a name='P907'>907</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 911' id='C907'>
              Jump 911
            </span>
          </td>
        </tr>
        <tr id='P908'>
          <td align='right'>
            <a name='P908'>908</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C908'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P909'>
          <td align='right'>
            <a name='P909'>909</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C909'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P910'>
          <td align='right'>
            <a name='P910'>910</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 899' id='C910'>
              Jump 899
            </span>
          </td>
        </tr>
        <tr id='P911'>
          <td align='right'>
            <a name='P911'>911</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C911'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P912'>
          <td align='right'>
            <a name='P912'>912</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(44)' id='C912'>
              Push PC(44)
            </span>
          </td>
        </tr>
        <tr id='P913'>
          <td align='right'>
            <a name='P913'>913</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C913'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P914'>
          <td align='right'>
            <a name='P914'>914</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C914'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P915'>
          <td align='right'>
            <a name='P915'>915</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C915'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P916'>
          <td align='right'>
            <a name='P916'>916</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C916'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P917'>
          <td align='right'>
            <a name='P917'>917</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C917'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P918'>
          <td align='right'>
            <a name='P918'>918</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(55)' id='C918'>
              Push PC(55)
            </span>
          </td>
        </tr>
        <tr id='P919'>
          <td align='right'>
            <a name='P919'>919</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C919'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P920'>
          <td align='right'>
            <a name='P920'>920</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable q' id='C920'>
              DelVar q
            </span>
          </td>
        </tr>
        <tr id='P921'>
          <td align='right'>
            <a name='P921'>921</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C921'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P922'>
          <td align='right'>
            <a name='P922'>922</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C922'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P923'>
          <td align='right'>
            <a name='P923'>923</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C923'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P924'>
          <td align='right'>
            <a name='P924'>924</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C924'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P925'>
          <td align='right'>
            <a name='P925'>925</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C925'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P926'>
          <td align='right'>
            <a name='P926'>926</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 943' id='C926'>
              Jump 943
            </span>
          </td>
        </tr>
        <tr id='P927'>
          <td align='right'>
            <a name='P927'>927</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method put' id='C927'>
              Frame put (q, item)
            </span>
          </td>
        </tr>
        <tr id='P928'>
          <td align='right'>
            <a name='P928'>928</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C928'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P929'>
          <td align='right'>
            <a name='P929'>929</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C929'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P930'>
          <td align='right'>
            <a name='P930'>930</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(32)' id='C930'>
              Push PC(32)
            </span>
          </td>
        </tr>
        <tr id='P931'>
          <td align='right'>
            <a name='P931'>931</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C931'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P932'>
          <td align='right'>
            <a name='P932'>932</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of q' id='C932'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P933'>
          <td align='right'>
            <a name='P933'>933</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable q' id='C933'>
              DelVar q
            </span>
          </td>
        </tr>
        <tr id='P934'>
          <td align='right'>
            <a name='P934'>934</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C934'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P935'>
          <td align='right'>
            <a name='P935'>935</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C935'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P936'>
          <td align='right'>
            <a name='P936'>936</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of item' id='C936'>
              LoadVar item
            </span>
          </td>
        </tr>
        <tr id='P937'>
          <td align='right'>
            <a name='P937'>937</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable item' id='C937'>
              DelVar item
            </span>
          </td>
        </tr>
        <tr id='P938'>
          <td align='right'>
            <a name='P938'>938</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C938'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P939'>
          <td align='right'>
            <a name='P939'>939</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C939'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P940'>
          <td align='right'>
            <a name='P940'>940</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C940'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P941'>
          <td align='right'>
            <a name='P941'>941</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C941'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P942'>
          <td align='right'>
            <a name='P942'>942</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C942'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P943'>
          <td align='right'>
            <a name='P943'>943</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C943'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P944'>
          <td align='right'>
            <a name='P944'>944</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(679)' id='C944'>
              Push PC(679)
            </span>
          </td>
        </tr>
        <tr id='P945'>
          <td align='right'>
            <a name='P945'>945</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C945'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P946'>
          <td align='right'>
            <a name='P946'>946</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C946'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P947'>
          <td align='right'>
            <a name='P947'>947</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C947'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P948'>
          <td align='right'>
            <a name='P948'>948</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 5' id='C948'>
              Push 5
            </span>
          </td>
        </tr>
        <tr id='P949'>
          <td align='right'>
            <a name='P949'>949</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying *' id='C949'>
              2-ary *
            </span>
          </td>
        </tr>
        <tr id='P950'>
          <td align='right'>
            <a name='P950'>950</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable forks' id='C950'>
              Store forks
            </span>
          </td>
        </tr>
        <tr id='P951'>
          <td align='right'>
            <a name='P951'>951</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 995' id='C951'>
              Jump 995
            </span>
          </td>
        </tr>
        <tr id='P952'>
          <td align='right'>
            <a name='P952'>952</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method diner' id='C952'>
              Frame diner which
            </span>
          </td>
        </tr>
        <tr id='P953'>
          <td align='right'>
            <a name='P953'>953</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C953'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P954'>
          <td align='right'>
            <a name='P954'>954</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of which' id='C954'>
              LoadVar which
            </span>
          </td>
        </tr>
        <tr id='P955'>
          <td align='right'>
            <a name='P955'>955</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C955'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P956'>
          <td align='right'>
            <a name='P956'>956</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of which' id='C956'>
              LoadVar which
            </span>
          </td>
        </tr>
        <tr id='P957'>
          <td align='right'>
            <a name='P957'>957</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable which' id='C957'>
              DelVar which
            </span>
          </td>
        </tr>
        <tr id='P958'>
          <td align='right'>
            <a name='P958'>958</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C958'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P959'>
          <td align='right'>
            <a name='P959'>959</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C959'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P960'>
          <td align='right'>
            <a name='P960'>960</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 5' id='C960'>
              Push 5
            </span>
          </td>
        </tr>
        <tr id='P961'>
          <td align='right'>
            <a name='P961'>961</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying %' id='C961'>
              2-ary %
            </span>
          </td>
        </tr>
        <tr id='P962'>
          <td align='right'>
            <a name='P962'>962</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C962'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P963'>
          <td align='right'>
            <a name='P963'>963</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in (left, right)' id='C963'>
              StoreVar (left, right)
            </span>
          </td>
        </tr>
        <tr id='P964'>
          <td align='right'>
            <a name='P964'>964</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { False, True }' id='C964'>
              Push { False, True }
            </span>
          </td>
        </tr>
        <tr id='P965'>
          <td align='right'>
            <a name='P965'>965</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C965'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P966'>
          <td align='right'>
            <a name='P966'>966</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 992 if the value is False' id='C966'>
              JumpCond False 992
            </span>
          </td>
        </tr>
        <tr id='P967'>
          <td align='right'>
            <a name='P967'>967</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(695)' id='C967'>
              Push PC(695)
            </span>
          </td>
        </tr>
        <tr id='P968'>
          <td align='right'>
            <a name='P968'>968</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?forks' id='C968'>
              Push ?forks
            </span>
          </td>
        </tr>
        <tr id='P969'>
          <td align='right'>
            <a name='P969'>969</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of left' id='C969'>
              LoadVar left
            </span>
          </td>
        </tr>
        <tr id='P970'>
          <td align='right'>
            <a name='P970'>970</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C970'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P971'>
          <td align='right'>
            <a name='P971'>971</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C971'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P972'>
          <td align='right'>
            <a name='P972'>972</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C972'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P973'>
          <td align='right'>
            <a name='P973'>973</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(695)' id='C973'>
              Push PC(695)
            </span>
          </td>
        </tr>
        <tr id='P974'>
          <td align='right'>
            <a name='P974'>974</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?forks' id='C974'>
              Push ?forks
            </span>
          </td>
        </tr>
        <tr id='P975'>
          <td align='right'>
            <a name='P975'>975</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of right' id='C975'>
              LoadVar right
            </span>
          </td>
        </tr>
        <tr id='P976'>
          <td align='right'>
            <a name='P976'>976</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C976'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P977'>
          <td align='right'>
            <a name='P977'>977</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C977'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P978'>
          <td align='right'>
            <a name='P978'>978</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C978'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P979'>
          <td align='right'>
            <a name='P979'>979</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(714)' id='C979'>
              Push PC(714)
            </span>
          </td>
        </tr>
        <tr id='P980'>
          <td align='right'>
            <a name='P980'>980</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?forks' id='C980'>
              Push ?forks
            </span>
          </td>
        </tr>
        <tr id='P981'>
          <td align='right'>
            <a name='P981'>981</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of left' id='C981'>
              LoadVar left
            </span>
          </td>
        </tr>
        <tr id='P982'>
          <td align='right'>
            <a name='P982'>982</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C982'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P983'>
          <td align='right'>
            <a name='P983'>983</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C983'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P984'>
          <td align='right'>
            <a name='P984'>984</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C984'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P985'>
          <td align='right'>
            <a name='P985'>985</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(714)' id='C985'>
              Push PC(714)
            </span>
          </td>
        </tr>
        <tr id='P986'>
          <td align='right'>
            <a name='P986'>986</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?forks' id='C986'>
              Push ?forks
            </span>
          </td>
        </tr>
        <tr id='P987'>
          <td align='right'>
            <a name='P987'>987</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of right' id='C987'>
              LoadVar right
            </span>
          </td>
        </tr>
        <tr id='P988'>
          <td align='right'>
            <a name='P988'>988</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C988'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P989'>
          <td align='right'>
            <a name='P989'>989</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C989'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P990'>
          <td align='right'>
            <a name='P990'>990</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C990'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P991'>
          <td align='right'>
            <a name='P991'>991</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 964' id='C991'>
              Jump 964
            </span>
          </td>
        </tr>
        <tr id='P992'>
          <td align='right'>
            <a name='P992'>992</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable left' id='C992'>
              DelVar left
            </span>
          </td>
        </tr>
        <tr id='P993'>
          <td align='right'>
            <a name='P993'>993</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable right' id='C993'>
              DelVar right
            </span>
          </td>
        </tr>
        <tr id='P994'>
          <td align='right'>
            <a name='P994'>994</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C994'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P995'>
          <td align='right'>
            <a name='P995'>995</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant { 0, 1, 2, 3, 4 }' id='C995'>
              Push { 0, 1, 2, 3, 4 }
            </span>
          </td>
        </tr>
        <tr id='P996'>
          <td align='right'>
            <a name='P996'>996</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C996'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P997'>
          <td align='right'>
            <a name='P997'>997</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to i' id='C997'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P998'>
          <td align='right'>
            <a name='P998'>998</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 1005 if the value is False' id='C998'>
              JumpCond False 1005
            </span>
          </td>
        </tr>
        <tr id='P999'>
          <td align='right'>
            <a name='P999'>999</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(952)' id='C999'>
              Push PC(952)
            </span>
          </td>
        </tr>
        <tr id='P1000'>
          <td align='right'>
            <a name='P1000'>1000</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C1000'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1001'>
          <td align='right'>
            <a name='P1001'>1001</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1001'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1002'>
          <td align='right'>
            <a name='P1002'>1002</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C1002'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1003'>
          <td align='right'>
            <a name='P1003'>1003</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1003'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1004'>
          <td align='right'>
            <a name='P1004'>1004</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 997' id='C1004'>
              Jump 997
            </span>
          </td>
        </tr>
        <tr id='P1005'>
          <td align='right'>
            <a name='P1005'>1005</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1005'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1006'>
          <td align='right'>
            <a name='P1006'>1006</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1006'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1007'>
          <td align='right'>
            <a name='P1007'>1007</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C1007'>
              DelVar result
            </span>
          </td>
        </tr>
      </body>
    </table>
  </div>
</div>
    </td>
    <td valign='top'>
<table border='1'
  <thead>
    <tr>
      <th colspan='4'>Threads</th>
    </tr>
    <tr>
      <th>
        ID
      </th>
      <th>
        Status
      </th>
      <th>
        Stack Trace
      </th>
      <th>
        Stack Top
      </th>
    </tr>
  </thead>
  <tbody id='threadtable'>
    <tr id='thread0'>
      <td align='center'>
        T0
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo0' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread1'>
      <td align='center'>
        T1
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo1' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread2'>
      <td align='center'>
        T2
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo2' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread3'>
      <td align='center'>
        T3
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo3' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread4'>
      <td align='center'>
        T4
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo4' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread5'>
      <td align='center'>
        T5
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo5' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
  </tbody>
</table>
    </td>
  </tr>
</table>
<script>
var nthreads = 6;
var nmegasteps = 6;
var vardir = [
  ['forks']
];
var state =
{
  "issue": "Non-terminating state",
  "macrosteps": [
    {
      "id": "9003",
      "len": "1",
      "tid": "0",
      "ctx": "7feba04bfa89",
      "name": "__init__()",
      "microsteps": [
        {
          "shared": { },
          "npc": "1",
          "fp": "1",
          "trace": [
            {
              "pc": "1",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } },
              "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },
        {
          "npc": "52",
          "push": [ ],
          "pc": "1"
        },
        {
          "npc": "53",
          "push": [ { "type": "pc", "value": "55" } ],
          "pc": "52"
        },
        {
          "npc": "54",
          "pop": "1",
          "push": [ ],
          "pc": "53"
        },
        {
          "npc": "371",
          "push": [ ],
          "pc": "54"
        },
        {
          "npc": "372",
          "push": [ { "type": "pc", "value": "374" } ],
          "pc": "371"
        },
        {
          "npc": "373",
          "pop": "1",
          "push": [ ],
          "pc": "372"
        },
        {
          "npc": "392",
          "push": [ ],
          "pc": "373"
        },
        {
          "npc": "393",
          "push": [ { "type": "pc", "value": "395" } ],
          "pc": "392"
        },
        {
          "npc": "394",
          "pop": "1",
          "push": [ ],
          "pc": "393"
        },
        {
          "npc": "414",
          "push": [ ],
          "pc": "394"
        },
        {
          "npc": "415",
          "push": [ { "type": "pc", "value": "417" } ],
          "pc": "414"
        },
        {
          "npc": "416",
          "pop": "1",
          "push": [ ],
          "pc": "415"
        },
        {
          "npc": "433",
          "push": [ ],
          "pc": "416"
        },
        {
          "npc": "434",
          "push": [ { "type": "pc", "value": "436" } ],
          "pc": "433"
        },
        {
          "npc": "435",
          "pop": "1",
          "push": [ ],
          "pc": "434"
        },
        {
          "npc": "461",
          "push": [ ],
          "pc": "435"
        },
        {
          "npc": "462",
          "push": [ { "type": "pc", "value": "464" } ],
          "pc": "461"
        },
        {
          "npc": "463",
          "pop": "1",
          "push": [ ],
          "pc": "462"
        },
        {
          "npc": "490",
          "push": [ ],
          "pc": "463"
        },
        {
          "npc": "491",
          "push": [ { "type": "pc", "value": "493" } ],
          "pc": "490"
        },
        {
          "npc": "492",
          "pop": "1",
          "push": [ ],
          "pc": "491"
        },
        {
          "npc": "943",
          "push": [ ],
          "pc": "492"
        },
        {
          "npc": "944",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "943"
        },
        {
          "npc": "945",
          "push": [ { "type": "pc", "value": "679" } ],
          "pc": "944"
        },
        {
          "npc": "946",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "945"
        },
        {
          "npc": "679",
          "fp": "4",
          "trace": [
            {
              "pc": "947",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } },
              "sp": 0
            },
            {
              "pc": "679",
              "xpc": "679",
              "method": "Lock()",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] } },
              "sp": 3
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15154" }, { "type": "list", "value": [] } ],
          "pc": "946"
        },
        {
          "npc": "680",
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "679"
        },
        {
          "npc": "681",
          "local": { },
          "push": [ ],
          "pc": "680"
        },
        {
          "npc": "682",
          "push": [ { "type": "pc", "value": "672" } ],
          "pc": "681"
        },
        {
          "npc": "683",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "682"
        },
        {
          "npc": "672",
          "fp": "6",
          "trace": [
            {
              "pc": "947",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } },
              "sp": 0
            },
            {
              "pc": "684",
              "xpc": "679",
              "method": "Lock()",
              "calltype": "normal",
              "vars": { },
              "sp": 3
            },
            {
              "pc": "672",
              "xpc": "672",
              "method": "BinSema(False)",
              "calltype": "normal",
              "vars": { },
              "sp": 5
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "10946" }, { "type": "bool", "value": "False" } ],
          "pc": "683"
        },
        {
          "npc": "673",
          "local": { "acquired": { "type": "bool", "value": "False" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "672"
        },
        {
          "npc": "674",
          "local": { "acquired": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "673"
        },
        {
          "npc": "675",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "674"
        },
        {
          "npc": "676",
          "local": { },
          "push": [ ],
          "pc": "675"
        },
        {
          "npc": "677",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "676"
        },
        {
          "npc": "684",
          "fp": "4",
          "trace": [
            {
              "pc": "947",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } },
              "sp": 0
            },
            {
              "pc": "684",
              "xpc": "679",
              "method": "Lock()",
              "calltype": "normal",
              "vars": { },
              "sp": 3
            }
          ],
          "local": { },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "677"
        },
        {
          "npc": "685",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "684"
        },
        {
          "npc": "947",
          "fp": "1",
          "trace": [
            {
              "pc": "947",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } },
              "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "685"
        },
        {
          "npc": "948",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "947"
        },
        {
          "npc": "949",
          "push": [ { "type": "int", "value": "5" } ],
          "pc": "948"
        },
        {
          "npc": "950",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ],
          "pc": "949"
        },
        {
          "shared": { "forks": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } },
          "npc": "951",
          "pop": "1",
          "push": [ ],
          "pc": "950"
        },
        {
          "npc": "995",
          "push": [ ],
          "pc": "951"
        },
        {
          "npc": "996",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "int", "value": "4" } ] } ],
          "pc": "995"
        },
        {
          "npc": "997",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "996"
        },
        {
          "npc": "998",
          "local": { "i": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "997"
        },
        {
          "npc": "999",
          "pop": "1",
          "push": [ ],
          "pc": "998"
        },
        {
          "npc": "1000",
          "push": [ { "type": "pc", "value": "952" } ],
          "pc": "999"
        },
        {
          "npc": "1001",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1000"
        },
        {
          "npc": "1002",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1001"
        },
        {
          "npc": "1003",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1002"
        },
        {
          "npc": "1004",
          "pop": "3",
          "push": [ ],
          "pc": "1003"
        },
        {
          "npc": "997",
          "push": [ ],
          "pc": "1004"
        },
        {
          "npc": "998",
          "local": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "997"
        },
        {
          "npc": "999",
          "pop": "1",
          "push": [ ],
          "pc": "998"
        },
        {
          "npc": "1000",
          "push": [ { "type": "pc", "value": "952" } ],
          "pc": "999"
        },
        {
          "npc": "1001",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1000"
        },
        {
          "npc": "1002",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1001"
        },
        {
          "npc": "1003",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1002"
        },
        {
          "npc": "1004",
          "pop": "3",
          "push": [ ],
          "pc": "1003"
        },
        {
          "npc": "997",
          "push": [ ],
          "pc": "1004"
        },
        {
          "npc": "998",
          "local": { "i": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "997"
        },
        {
          "npc": "999",
          "pop": "1",
          "push": [ ],
          "pc": "998"
        },
        {
          "npc": "1000",
          "push": [ { "type": "pc", "value": "952" } ],
          "pc": "999"
        },
        {
          "npc": "1001",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1000"
        },
        {
          "npc": "1002",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1001"
        },
        {
          "npc": "1003",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1002"
        },
        {
          "npc": "1004",
          "pop": "3",
          "push": [ ],
          "pc": "1003"
        },
        {
          "npc": "997",
          "push": [ ],
          "pc": "1004"
        },
        {
          "npc": "998",
          "local": { "i": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "4" }, { "type": "bool", "value": "True" } ],
          "pc": "997"
        },
        {
          "npc": "999",
          "pop": "1",
          "push": [ ],
          "pc": "998"
        },
        {
          "npc": "1000",
          "push": [ { "type": "pc", "value": "952" } ],
          "pc": "999"
        },
        {
          "npc": "1001",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1000"
        },
        {
          "npc": "1002",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1001"
        },
        {
          "npc": "1003",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1002"
        },
        {
          "npc": "1004",
          "pop": "3",
          "push": [ ],
          "pc": "1003"
        },
        {
          "npc": "997",
          "push": [ ],
          "pc": "1004"
        },
        {
          "npc": "998",
          "local": { "i": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "5" }, { "type": "bool", "value": "True" } ],
          "pc": "997"
        },
        {
          "npc": "999",
          "pop": "1",
          "push": [ ],
          "pc": "998"
        },
        {
          "npc": "1000",
          "push": [ { "type": "pc", "value": "952" } ],
          "pc": "999"
        },
        {
          "npc": "1001",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "1000"
        },
        {
          "npc": "1002",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1001"
        },
        {
          "npc": "1003",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1002"
        },
        {
          "npc": "1004",
          "pop": "3",
          "push": [ ],
          "pc": "1003"
        },
        {
          "npc": "997",
          "push": [ ],
          "pc": "1004"
        },
        {
          "npc": "998",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "997"
        },
        {
          "npc": "1005",
          "pop": "1",
          "push": [ ],
          "pc": "998"
        },
        {
          "npc": "1006",
          "push": [ ],
          "pc": "1005"
        },
        {
          "npc": "1006",
          "local": { },
          "mode": "terminated",
          "pop": "1",
          "push": [ ],
          "pc": "1006"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba5800199": "1",
          "7feba5800209": "1",
          "7feba5800279": "1",
          "7feba58002e9": "1",
          "7feba5800359": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba5800199",
          "fp": "1",
          "name": "diner(0)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba5800279",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba58002e9",
          "fp": "1",
          "name": "diner(3)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7feba5800359",
          "fp": "1",
          "name": "diner(4)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "9085",
      "len": "2",
      "tid": "4",
      "ctx": "7feba58002e9",
      "name": "diner(3)",
      "microsteps": [
        {
          "npc": "953",
          "fp": "1",
          "trace": [
            {
              "pc": "953",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "which": { "type": "int", "value": "3" } },
              "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] }, "which": { "type": "int", "value": "3" } },
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "952"
        },
        {
          "npc": "954",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "953"
        },
        {
          "npc": "955",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "954"
        },
        {
          "npc": "956",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "955"
        },
        {
          "npc": "957",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "956"
        },
        {
          "npc": "958",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "957"
        },
        {
          "npc": "959",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "958"
        },
        {
          "npc": "960",
          "pop": "2",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "959"
        },
        {
          "npc": "961",
          "push": [ { "type": "int", "value": "5" } ],
          "pc": "960"
        },
        {
          "npc": "962",
          "pop": "1",
          "push": [ ],
          "pc": "961"
        },
        {
          "npc": "963",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "4" } ] } ],
          "pc": "962"
        },
        {
          "npc": "964",
          "local": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
          "pop": "1",
          "push": [ ],
          "pc": "963"
        },
        {
          "npc": "965",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "964"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3d8f819": "1",
          "7feba5800199": "1",
          "7feba5800209": "1",
          "7feba5800279": "1",
          "7feba5800359": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba5800199",
          "fp": "1",
          "name": "diner(0)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba5800279",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba3d8f819",
          "fp": "1",
          "name": "diner(3)",
          "entry": "952",
          "pc": "965",
          "trace": [
            {
              "pc": "965",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            }
          ],
          "mode": "choosing"
        },
        {
          "tid": "5",
          "hvalue": "7feba5800359",
          "fp": "1",
          "name": "diner(4)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "9089",
      "len": "2",
      "tid": "4",
      "ctx": "7feba3d8f819",
      "name": "diner(3)",
      "choice": { "type": "bool", "value": "True" },
      "microsteps": [
        {
          "choose": { "type": "bool", "value": "True" },
          "npc": "966",
          "fp": "1",
          "trace": [
            {
              "pc": "966",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            }
          ],
          "local": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
          "push": [ { "type": "dict", "value": [] }, { "type": "bool", "value": "True" } ],
          "pc": "965"
        },
        {
          "npc": "967",
          "pop": "1",
          "push": [ ],
          "pc": "966"
        },
        {
          "npc": "968",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "967"
        },
        {
          "npc": "969",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "968"
        },
        {
          "npc": "970",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "969"
        },
        {
          "npc": "971",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] } ],
          "pc": "970"
        },
        {
          "npc": "695",
          "fp": "3",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "695",
              "xpc": "695",
              "method": "acquire(?forks[3])",
              "calltype": "normal",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15554" }, { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] } ],
          "pc": "971"
        },
        {
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "3" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "4" } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3d90039": "1",
          "7feba5800199": "1",
          "7feba5800209": "1",
          "7feba5800279": "1",
          "7feba5800359": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba5800199",
          "fp": "1",
          "name": "diner(0)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba5800279",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba3d90039",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[3])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7feba5800359",
          "fp": "1",
          "name": "diner(4)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "9088",
      "len": "2",
      "tid": "4",
      "ctx": "7feba3d90039",
      "name": "diner(3)",
      "microsteps": [
        {
          "npc": "697",
          "fp": "3",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "697",
              "xpc": "695",
              "method": "acquire(?forks[3])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] }, "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "dict", "value": [] }, { "type": "int", "value": "15554" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "3" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "4" } } ] } ],
          "pc": "696"
        },
        {
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] } ],
          "pc": "698"
        },
        {
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] } ],
          "pc": "707"
        },
        {
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "shared": { "forks": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "npc": "972",
          "fp": "1",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            }
          ],
          "local": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "npc": "973",
          "pop": "1",
          "push": [ ],
          "pc": "972"
        },
        {
          "npc": "974",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "973"
        },
        {
          "npc": "975",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "974"
        },
        {
          "npc": "976",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "975"
        },
        {
          "npc": "977",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] } ],
          "pc": "976"
        },
        {
          "npc": "695",
          "fp": "3",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "695",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15650" }, { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] } ],
          "pc": "977"
        },
        {
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "3" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "4" } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3e90cd9": "1",
          "7feba5800199": "1",
          "7feba5800209": "1",
          "7feba5800279": "1",
          "7feba5800359": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba5800199",
          "fp": "1",
          "name": "diner(0)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba5800279",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7feba5800359",
          "fp": "1",
          "name": "diner(4)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8927",
      "len": "3",
      "tid": "5",
      "ctx": "7feba5800359",
      "name": "diner(4)",
      "microsteps": [
        {
          "npc": "953",
          "fp": "1",
          "trace": [
            {
              "pc": "953",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "which": { "type": "int", "value": "4" } },
              "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] }, "which": { "type": "int", "value": "4" } },
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "952"
        },
        {
          "npc": "954",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "953"
        },
        {
          "npc": "955",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "954"
        },
        {
          "npc": "956",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "4" } ] } ],
          "pc": "955"
        },
        {
          "npc": "957",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "956"
        },
        {
          "npc": "958",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "957"
        },
        {
          "npc": "959",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "958"
        },
        {
          "npc": "960",
          "pop": "2",
          "push": [ { "type": "int", "value": "5" } ],
          "pc": "959"
        },
        {
          "npc": "961",
          "push": [ { "type": "int", "value": "5" } ],
          "pc": "960"
        },
        {
          "npc": "962",
          "pop": "2",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "961"
        },
        {
          "npc": "963",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "4" }, { "type": "int", "value": "0" } ] } ],
          "pc": "962"
        },
        {
          "npc": "964",
          "local": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "963"
        },
        {
          "npc": "965",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "964"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3d8fa69": "1",
          "7feba3e90cd9": "1",
          "7feba5800199": "1",
          "7feba5800209": "1",
          "7feba5800279": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba5800199",
          "fp": "1",
          "name": "diner(0)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba5800279",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7feba3d8fa69",
          "fp": "1",
          "name": "diner(4)",
          "entry": "952",
          "pc": "965",
          "trace": [
            {
              "pc": "965",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            }
          ],
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "8925",
      "len": "3",
      "tid": "5",
      "ctx": "7feba3d8fa69",
      "name": "diner(4)",
      "choice": { "type": "bool", "value": "True" },
      "microsteps": [
        {
          "choose": { "type": "bool", "value": "True" },
          "npc": "966",
          "fp": "1",
          "trace": [
            {
              "pc": "966",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            }
          ],
          "local": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
          "push": [ { "type": "dict", "value": [] }, { "type": "bool", "value": "True" } ],
          "pc": "965"
        },
        {
          "npc": "967",
          "pop": "1",
          "push": [ ],
          "pc": "966"
        },
        {
          "npc": "968",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "967"
        },
        {
          "npc": "969",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "968"
        },
        {
          "npc": "970",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "969"
        },
        {
          "npc": "971",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] } ],
          "pc": "970"
        },
        {
          "npc": "695",
          "fp": "3",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "695",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15554" }, { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] } ],
          "pc": "971"
        },
        {
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "4" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "0" } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3d8fd69": "1",
          "7feba3e90cd9": "1",
          "7feba5800199": "1",
          "7feba5800209": "1",
          "7feba5800279": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba5800199",
          "fp": "1",
          "name": "diner(0)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba5800279",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7feba3d8fd69",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8930",
      "len": "3",
      "tid": "5",
      "ctx": "7feba3d8fd69",
      "name": "diner(4)",
      "microsteps": [
        {
          "npc": "697",
          "fp": "3",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "697",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "dict", "value": [] }, { "type": "int", "value": "15554" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "4" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "0" } } ] } ],
          "pc": "696"
        },
        {
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] } ],
          "pc": "698"
        },
        {
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] } ],
          "pc": "707"
        },
        {
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "shared": { "forks": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "npc": "972",
          "fp": "1",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            }
          ],
          "local": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "npc": "973",
          "pop": "1",
          "push": [ ],
          "pc": "972"
        },
        {
          "npc": "974",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "973"
        },
        {
          "npc": "975",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "974"
        },
        {
          "npc": "976",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "975"
        },
        {
          "npc": "977",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] } ],
          "pc": "976"
        },
        {
          "npc": "695",
          "fp": "3",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "695",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15650" }, { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] } ],
          "pc": "977"
        },
        {
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "4" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "0" } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3e90cd9": "1",
          "7feba3e91639": "1",
          "7feba5800199": "1",
          "7feba5800209": "1",
          "7feba5800279": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba5800199",
          "fp": "1",
          "name": "diner(0)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba5800279",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "5",
          "hvalue": "7feba3e91639",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8705",
      "len": "4",
      "tid": "1",
      "ctx": "7feba5800199",
      "name": "diner(0)",
      "microsteps": [
        {
          "npc": "953",
          "fp": "1",
          "trace": [
            {
              "pc": "953",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "which": { "type": "int", "value": "0" } },
              "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] }, "which": { "type": "int", "value": "0" } },
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "952"
        },
        {
          "npc": "954",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "953"
        },
        {
          "npc": "955",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "954"
        },
        {
          "npc": "956",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "955"
        },
        {
          "npc": "957",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "956"
        },
        {
          "npc": "958",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "957"
        },
        {
          "npc": "959",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "958"
        },
        {
          "npc": "960",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "959"
        },
        {
          "npc": "961",
          "push": [ { "type": "int", "value": "5" } ],
          "pc": "960"
        },
        {
          "npc": "962",
          "pop": "1",
          "push": [ ],
          "pc": "961"
        },
        {
          "npc": "963",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "962"
        },
        {
          "npc": "964",
          "local": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ ],
          "pc": "963"
        },
        {
          "npc": "965",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "964"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3d8f129": "1",
          "7feba3e90cd9": "1",
          "7feba3e91639": "1",
          "7feba5800209": "1",
          "7feba5800279": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba3d8f129",
          "fp": "1",
          "name": "diner(0)",
          "entry": "952",
          "pc": "965",
          "trace": [
            {
              "pc": "965",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            }
          ],
          "mode": "choosing"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba5800279",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "5",
          "hvalue": "7feba3e91639",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8693",
      "len": "4",
      "tid": "1",
      "ctx": "7feba3d8f129",
      "name": "diner(0)",
      "choice": { "type": "bool", "value": "True" },
      "microsteps": [
        {
          "choose": { "type": "bool", "value": "True" },
          "npc": "966",
          "fp": "1",
          "trace": [
            {
              "pc": "966",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            }
          ],
          "local": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
          "push": [ { "type": "dict", "value": [] }, { "type": "bool", "value": "True" } ],
          "pc": "965"
        },
        {
          "npc": "967",
          "pop": "1",
          "push": [ ],
          "pc": "966"
        },
        {
          "npc": "968",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "967"
        },
        {
          "npc": "969",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "968"
        },
        {
          "npc": "970",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "969"
        },
        {
          "npc": "971",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] } ],
          "pc": "970"
        },
        {
          "npc": "695",
          "fp": "3",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "695",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15554" }, { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] } ],
          "pc": "971"
        },
        {
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3d908a9": "1",
          "7feba3e90cd9": "1",
          "7feba3e91639": "1",
          "7feba5800209": "1",
          "7feba5800279": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba3d908a9",
          "fp": "3",
          "name": "diner(0)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba5800279",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "5",
          "hvalue": "7feba3e91639",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8719",
      "len": "4",
      "tid": "1",
      "ctx": "7feba3d908a9",
      "name": "diner(0)",
      "microsteps": [
        {
          "npc": "697",
          "fp": "3",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "697",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "dict", "value": [] }, { "type": "int", "value": "15554" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "696"
        },
        {
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] } ],
          "pc": "698"
        },
        {
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] } ],
          "pc": "707"
        },
        {
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "shared": { "forks": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "npc": "972",
          "fp": "1",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            }
          ],
          "local": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "npc": "973",
          "pop": "1",
          "push": [ ],
          "pc": "972"
        },
        {
          "npc": "974",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "973"
        },
        {
          "npc": "975",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "974"
        },
        {
          "npc": "976",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "975"
        },
        {
          "npc": "977",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] } ],
          "pc": "976"
        },
        {
          "npc": "695",
          "fp": "3",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "695",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15650" }, { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] } ],
          "pc": "977"
        },
        {
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3e8f0b9": "1",
          "7feba3e90cd9": "1",
          "7feba3e91639": "1",
          "7feba5800209": "1",
          "7feba5800279": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba3e8f0b9",
          "fp": "3",
          "name": "diner(0)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba5800279",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "5",
          "hvalue": "7feba3e91639",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        }
      ]
    },
    {
      "id": "8087",
      "len": "5",
      "tid": "3",
      "ctx": "7feba5800279",
      "name": "diner(2)",
      "microsteps": [
        {
          "npc": "953",
          "fp": "1",
          "trace": [
            {
              "pc": "953",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "which": { "type": "int", "value": "2" } },
              "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] }, "which": { "type": "int", "value": "2" } },
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "952"
        },
        {
          "npc": "954",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "953"
        },
        {
          "npc": "955",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "954"
        },
        {
          "npc": "956",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "955"
        },
        {
          "npc": "957",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "956"
        },
        {
          "npc": "958",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "957"
        },
        {
          "npc": "959",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "958"
        },
        {
          "npc": "960",
          "pop": "2",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "959"
        },
        {
          "npc": "961",
          "push": [ { "type": "int", "value": "5" } ],
          "pc": "960"
        },
        {
          "npc": "962",
          "pop": "1",
          "push": [ ],
          "pc": "961"
        },
        {
          "npc": "963",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "962"
        },
        {
          "npc": "964",
          "local": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
          "pop": "1",
          "push": [ ],
          "pc": "963"
        },
        {
          "npc": "965",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "964"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3d8f5c9": "1",
          "7feba3e8f0b9": "1",
          "7feba3e90cd9": "1",
          "7feba3e91639": "1",
          "7feba5800209": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba3e8f0b9",
          "fp": "3",
          "name": "diner(0)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba3d8f5c9",
          "fp": "1",
          "name": "diner(2)",
          "entry": "952",
          "pc": "965",
          "trace": [
            {
              "pc": "965",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            }
          ],
          "mode": "choosing"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "5",
          "hvalue": "7feba3e91639",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        }
      ]
    },
    {
      "id": "7819",
      "len": "5",
      "tid": "3",
      "ctx": "7feba3d8f5c9",
      "name": "diner(2)",
      "choice": { "type": "bool", "value": "True" },
      "microsteps": [
        {
          "choose": { "type": "bool", "value": "True" },
          "npc": "966",
          "fp": "1",
          "trace": [
            {
              "pc": "966",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            }
          ],
          "local": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
          "push": [ { "type": "dict", "value": [] }, { "type": "bool", "value": "True" } ],
          "pc": "965"
        },
        {
          "npc": "967",
          "pop": "1",
          "push": [ ],
          "pc": "966"
        },
        {
          "npc": "968",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "967"
        },
        {
          "npc": "969",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "968"
        },
        {
          "npc": "970",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "969"
        },
        {
          "npc": "971",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] } ],
          "pc": "970"
        },
        {
          "npc": "695",
          "fp": "3",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            },
            {
              "pc": "695",
              "xpc": "695",
              "method": "acquire(?forks[2])",
              "calltype": "normal",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15554" }, { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] } ],
          "pc": "971"
        },
        {
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "3" } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3d90309": "1",
          "7feba3e8f0b9": "1",
          "7feba3e90cd9": "1",
          "7feba3e91639": "1",
          "7feba5800209": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba3e8f0b9",
          "fp": "3",
          "name": "diner(0)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba3d90309",
          "fp": "3",
          "name": "diner(2)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[2])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "5",
          "hvalue": "7feba3e91639",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        }
      ]
    },
    {
      "id": "7818",
      "len": "5",
      "tid": "3",
      "ctx": "7feba3d90309",
      "name": "diner(2)",
      "microsteps": [
        {
          "npc": "697",
          "fp": "3",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            },
            {
              "pc": "697",
              "xpc": "695",
              "method": "acquire(?forks[2])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "dict", "value": [] }, { "type": "int", "value": "15554" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "3" } } ] } ],
          "pc": "696"
        },
        {
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] } ],
          "pc": "698"
        },
        {
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] } ],
          "pc": "707"
        },
        {
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "shared": { "forks": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "npc": "972",
          "fp": "1",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            }
          ],
          "local": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "npc": "973",
          "pop": "1",
          "push": [ ],
          "pc": "972"
        },
        {
          "npc": "974",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "973"
        },
        {
          "npc": "975",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "974"
        },
        {
          "npc": "976",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "975"
        },
        {
          "npc": "977",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] } ],
          "pc": "976"
        },
        {
          "npc": "695",
          "fp": "3",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            },
            {
              "pc": "695",
              "xpc": "695",
              "method": "acquire(?forks[3])",
              "calltype": "normal",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15650" }, { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] } ],
          "pc": "977"
        },
        {
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "3" } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3e8f0b9": "1",
          "7feba3e90379": "1",
          "7feba3e90cd9": "1",
          "7feba3e91639": "1",
          "7feba5800209": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba3e8f0b9",
          "fp": "3",
          "name": "diner(0)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba5800209",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "952",
          "trace": [
            {
              "pc": "952",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba3e90379",
          "fp": "3",
          "name": "diner(2)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[3])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "5",
          "hvalue": "7feba3e91639",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        }
      ]
    },
    {
      "id": "5769",
      "len": "6",
      "tid": "2",
      "ctx": "7feba5800209",
      "name": "diner(1)",
      "microsteps": [
        {
          "npc": "953",
          "fp": "1",
          "trace": [
            {
              "pc": "953",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "which": { "type": "int", "value": "1" } },
              "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] }, "which": { "type": "int", "value": "1" } },
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "952"
        },
        {
          "npc": "954",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "953"
        },
        {
          "npc": "955",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "954"
        },
        {
          "npc": "956",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "955"
        },
        {
          "npc": "957",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "956"
        },
        {
          "npc": "958",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "957"
        },
        {
          "npc": "959",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "958"
        },
        {
          "npc": "960",
          "pop": "2",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "959"
        },
        {
          "npc": "961",
          "push": [ { "type": "int", "value": "5" } ],
          "pc": "960"
        },
        {
          "npc": "962",
          "pop": "1",
          "push": [ ],
          "pc": "961"
        },
        {
          "npc": "963",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "962"
        },
        {
          "npc": "964",
          "local": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ ],
          "pc": "963"
        },
        {
          "npc": "965",
          "push": [ { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } ],
          "pc": "964"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3d8f379": "1",
          "7feba3e8f0b9": "1",
          "7feba3e90379": "1",
          "7feba3e90cd9": "1",
          "7feba3e91639": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba3e8f0b9",
          "fp": "3",
          "name": "diner(0)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba3d8f379",
          "fp": "1",
          "name": "diner(1)",
          "entry": "952",
          "pc": "965",
          "trace": [
            {
              "pc": "965",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
              "sp": 0
            }
          ],
          "mode": "choosing"
        },
        {
          "tid": "3",
          "hvalue": "7feba3e90379",
          "fp": "3",
          "name": "diner(2)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[3])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "5",
          "hvalue": "7feba3e91639",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        }
      ]
    },
    {
      "id": "1525",
      "len": "6",
      "tid": "2",
      "ctx": "7feba3d8f379",
      "name": "diner(1)",
      "choice": { "type": "bool", "value": "True" },
      "microsteps": [
        {
          "choose": { "type": "bool", "value": "True" },
          "npc": "966",
          "fp": "1",
          "trace": [
            {
              "pc": "966",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
              "sp": 0
            }
          ],
          "local": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
          "push": [ { "type": "dict", "value": [] }, { "type": "bool", "value": "True" } ],
          "pc": "965"
        },
        {
          "npc": "967",
          "pop": "1",
          "push": [ ],
          "pc": "966"
        },
        {
          "npc": "968",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "967"
        },
        {
          "npc": "969",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "968"
        },
        {
          "npc": "970",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "969"
        },
        {
          "npc": "971",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] } ],
          "pc": "970"
        },
        {
          "npc": "695",
          "fp": "3",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
              "sp": 0
            },
            {
              "pc": "695",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
              "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15554" }, { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] } ],
          "pc": "971"
        },
        {
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3d905d9": "1",
          "7feba3e8f0b9": "1",
          "7feba3e90379": "1",
          "7feba3e90cd9": "1",
          "7feba3e91639": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba3e8f0b9",
          "fp": "3",
          "name": "diner(0)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7feba3d905d9",
          "fp": "3",
          "name": "diner(1)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7feba3e90379",
          "fp": "3",
          "name": "diner(2)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[3])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "5",
          "hvalue": "7feba3e91639",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        }
      ]
    },
    {
      "id": "2725",
      "len": "6",
      "tid": "2",
      "ctx": "7feba3d905d9",
      "name": "diner(1)",
      "microsteps": [
        {
          "npc": "697",
          "fp": "3",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
              "sp": 0
            },
            {
              "pc": "697",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "dict", "value": [] }, { "type": "int", "value": "15554" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "696"
        },
        {
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] } ],
          "pc": "698"
        },
        {
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] } ],
          "pc": "707"
        },
        {
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "shared": { "forks": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "npc": "972",
          "fp": "1",
          "trace": [
            {
              "pc": "972",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
              "sp": 0
            }
          ],
          "local": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "npc": "973",
          "pop": "1",
          "push": [ ],
          "pc": "972"
        },
        {
          "npc": "974",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "973"
        },
        {
          "npc": "975",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "974"
        },
        {
          "npc": "976",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "975"
        },
        {
          "npc": "977",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] } ],
          "pc": "976"
        },
        {
          "npc": "695",
          "fp": "3",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
              "sp": 0
            },
            {
              "pc": "695",
              "xpc": "695",
              "method": "acquire(?forks[2])",
              "calltype": "normal",
              "vars": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
              "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15650" }, { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] } ],
          "pc": "977"
        },
        {
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "left" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "right" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7feba3e8f0b9": "1",
          "7feba3e8fa19": "1",
          "7feba3e90379": "1",
          "7feba3e90cd9": "1",
          "7feba3e91639": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7feba5800389",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1006",
          "trace": [
            {
              "pc": "1006",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { },
              "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7feba3e8f0b9",
          "fp": "3",
          "name": "diner(0)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(0)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "1" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[1])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "2",
          "hvalue": "7feba3e8fa19",
          "fp": "3",
          "name": "diner(1)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(1)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "2" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[2])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "3",
          "hvalue": "7feba3e90379",
          "fp": "3",
          "name": "diner(2)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(2)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "3" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[3])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "3" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "4",
          "hvalue": "7feba3e90cd9",
          "fp": "3",
          "name": "diner(3)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(3)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "4" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[4])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "4" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        },
        {
          "tid": "5",
          "hvalue": "7feba3e91639",
          "fp": "3",
          "name": "diner(4)",
          "entry": "952",
          "pc": "696",
          "trace": [
            {
              "pc": "978",
              "xpc": "952",
              "method": "diner(4)",
              "calltype": "process",
              "vars": { "left": { "type": "int", "value": "4" }, "result": { "type": "address", "value": [] }, "right": { "type": "int", "value": "0" } },
              "sp": 0
            },
            {
              "pc": "696",
              "xpc": "695",
              "method": "acquire(?forks[0])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "forks" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
              "sp": 2
            }
          ],
          "mode": "blocked"
        }
      ]
    }
  ],
  "code": [
    "Frame __init__ ()",
    "Jump 52",
    "Frame subseq (s, b, e)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu3",
    "LoadVar b",
    "DelVar b",
    "LoadVar e",
    "DelVar e",
    "Push 1",
    "2-ary -",
    "2-ary ..",
    "Push 0",
    "Cut(x)",
    "JumpCond False 25",
    "LoadVar $accu3",
    "DelVar $accu3",
    "LoadVar s",
    "LoadVar x",
    "DelVar x",
    "Apply",
    "2-ary ListAdd",
    "StoreVar $accu3",
    "Jump 14",
    "DelVar s",
    "DelVar x",
    "LoadVar $accu3",
    "DelVar $accu3",
    "StoreVar result",
    "Return",
    "Jump 52",
    "Frame append (s, e)",
    "DelVar result",
    "LoadVar s",
    "DelVar s",
    "Push ()",
    "LoadVar e",
    "DelVar e",
    "2-ary ListAdd",
    "2-ary +",
    "StoreVar result",
    "Return",
    "Jump 52",
    "Frame head s",
    "DelVar result",
    "LoadVar s",
    "DelVar s",
    "Push 0",
    "Apply",
    "StoreVar result",
    "Return",
    "Push PC(55)",
    "Builtin(list$tail)",
    "Jump 371",
    "Frame tail s",
    "DelVar result",
    "Push PC(2)",
    "Push ()",
    "LoadVar s",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "LoadVar s",
    "DelVar s",
    "1-ary len",
    "2-ary ListAdd",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame sum a",
    "DelVar result",
    "Push 0",
    "StoreVar result",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 87",
    "LoadVar result",
    "DelVar result",
    "LoadVar v",
    "DelVar v",
    "2-ary +",
    "StoreVar result",
    "Jump 78",
    "DelVar v",
    "Return",
    "Jump 371",
    "Frame set a",
    "DelVar result",
    "Push {}",
    "StoreVar $accu71",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 106",
    "LoadVar $accu71",
    "DelVar $accu71",
    "LoadVar v",
    "DelVar v",
    "2-ary SetAdd",
    "StoreVar $accu71",
    "Jump 97",
    "DelVar v",
    "LoadVar $accu71",
    "DelVar $accu71",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame list a",
    "DelVar result",
    "Push ()",
    "StoreVar $accu87",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 128",
    "LoadVar $accu87",
    "DelVar $accu87",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu87",
    "Jump 119",
    "DelVar v",
    "LoadVar $accu87",
    "DelVar $accu87",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame values d",
    "DelVar result",
    "Push ()",
    "StoreVar $accu103",
    "LoadVar d",
    "DelVar d",
    "Push 0",
    "Cut(_, v)",
    "DelVar _",
    "JumpCond False 151",
    "LoadVar $accu103",
    "DelVar $accu103",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu103",
    "Jump 141",
    "DelVar v",
    "LoadVar $accu103",
    "DelVar $accu103",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame items d",
    "DelVar result",
    "Push ()",
    "StoreVar $accu119",
    "LoadVar d",
    "DelVar d",
    "Push 0",
    "Cut(k, v)",
    "JumpCond False 178",
    "LoadVar $accu119",
    "DelVar $accu119",
    "Push ()",
    "LoadVar k",
    "DelVar k",
    "2-ary ListAdd",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "2-ary ListAdd",
    "StoreVar $accu119",
    "Jump 164",
    "DelVar k",
    "DelVar v",
    "LoadVar $accu119",
    "DelVar $accu119",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame qsort a",
    "DelVar result",
    "LoadVar a",
    "Push ()",
    "2-ary ==",
    "JumpCond False 195",
    "DelVar a",
    "Push ()",
    "StoreVar result",
    "Jump 265",
    "Push ()",
    "Push PC(44)",
    "LoadVar a",
    "Apply",
    "2-ary ListAdd",
    "Push PC(55)",
    "LoadVar a",
    "DelVar a",
    "Apply",
    "2-ary ListAdd",
    "StoreVar (pivot, rest)",
    "Push ()",
    "StoreVar $accu156",
    "LoadVar rest",
    "Push 0",
    "DelVar v",
    "Cut(v)",
    "JumpCond False 224",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary <",
    "JumpCond False 210",
    "LoadVar $accu156",
    "DelVar $accu156",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu156",
    "Jump 210",
    "DelVar v",
    "LoadVar $accu156",
    "DelVar $accu156",
    "StoreVar lower",
    "Push ()",
    "StoreVar $accu173",
    "LoadVar rest",
    "DelVar rest",
    "Push 0",
    "DelVar v",
    "Cut(v)",
    "JumpCond False 247",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary >=",
    "JumpCond False 233",
    "LoadVar $accu173",
    "DelVar $accu173",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu173",
    "Jump 233",
    "DelVar v",
    "LoadVar $accu173",
    "DelVar $accu173",
    "StoreVar higher",
    "Push PC(185)",
    "LoadVar lower",
    "DelVar lower",
    "Apply",
    "Push ()",
    "LoadVar pivot",
    "DelVar pivot",
    "2-ary ListAdd",
    "Push PC(185)",
    "LoadVar higher",
    "DelVar higher",
    "Apply",
    "3-ary +",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame sorted d",
    "DelVar result",
    "Push PC(185)",
    "Push PC(112)",
    "LoadVar d",
    "DelVar d",
    "Apply",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame reversed d",
    "DelVar result",
    "LoadVar d",
    "1-ary len",
    "StoreVar n",
    "Push ()",
    "StoreVar $accu216",
    "Push 1",
    "LoadVar n",
    "2-ary ..",
    "Push 0",
    "Cut(i)",
    "JumpCond False 302",
    "LoadVar $accu216",
    "DelVar $accu216",
    "LoadVar d",
    "LoadVar n",
    "LoadVar i",
    "DelVar i",
    "2-ary -",
    "Apply",
    "2-ary ListAdd",
    "StoreVar $accu216",
    "Jump 289",
    "DelVar d",
    "DelVar i",
    "DelVar n",
    "LoadVar $accu216",
    "DelVar $accu216",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame empty ()",
    "DelVar result",
    "Push {:}",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame fromSet s",
    "DelVar result",
    "Push {:}",
    "StoreVar $accu243",
    "LoadVar s",
    "DelVar s",
    "Push 0",
    "Cut(elt)",
    "JumpCond False 333",
    "LoadVar $accu243",
    "DelVar $accu243",
    "LoadVar elt",
    "DelVar elt",
    "Push 1",
    "3-ary DictAdd",
    "StoreVar $accu243",
    "Jump 323",
    "DelVar elt",
    "LoadVar $accu243",
    "DelVar $accu243",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame fromList a",
    "DelVar result",
    "Push {:}",
    "StoreVar result",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 369",
    "LoadVar v",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 362",
    "Push ?result",
    "LoadVar v",
    "DelVar v",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary +",
    "StoreVar [result]",
    "Jump 346",
    "Push ?result",
    "LoadVar v",
    "DelVar v",
    "Address",
    "Push 1",
    "StoreVar [result]",
    "Jump 346",
    "DelVar v",
    "Return",
    "Push PC(374)",
    "Builtin(bag$multiplicity)",
    "Jump 392",
    "Frame multiplicity (bg, elt)",
    "DelVar result",
    "LoadVar elt",
    "LoadVar bg",
    "2-ary in",
    "JumpCond False 387",
    "LoadVar bg",
    "DelVar bg",
    "LoadVar elt",
    "DelVar elt",
    "Apply",
    "StoreVar result",
    "Jump 391",
    "DelVar bg",
    "DelVar elt",
    "Push 0",
    "StoreVar result",
    "Return",
    "Push PC(395)",
    "Builtin(bag$size)",
    "Jump 414",
    "Frame size bg",
    "DelVar result",
    "Push 0",
    "StoreVar result",
    "LoadVar bg",
    "DelVar bg",
    "Push 0",
    "Cut(_, c)",
    "DelVar _",
    "JumpCond False 412",
    "LoadVar result",
    "DelVar result",
    "LoadVar c",
    "DelVar c",
    "2-ary +",
    "StoreVar result",
    "Jump 402",
    "DelVar c",
    "Return",
    "Push PC(417)",
    "Builtin(bag$bmin)",
    "Jump 433",
    "Frame bmin bg",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar bg",
    "Push {:}",
    "2-ary !=",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "1-ary min",
    "StoreVar result",
    "Return",
    "Push PC(436)",
    "Builtin(bag$bmax)",
    "Jump 461",
    "Frame bmax bg",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar bg",
    "Push {:}",
    "2-ary !=",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "1-ary max",
    "StoreVar result",
    "Return",
    "Jump 461",
    "Frame bchoose bg",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "Choose",
    "StoreVar result",
    "Return",
    "Push PC(464)",
    "Builtin(bag$add)",
    "Jump 490",
    "Frame add (bg, elt)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar result",
    "LoadVar elt",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 483",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary +",
    "StoreVar [result]",
    "Jump 489",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "Push 1",
    "StoreVar [result]",
    "Return",
    "Push PC(493)",
    "Builtin(bag$remove)",
    "Jump 943",
    "Frame remove (bg, elt)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar result",
    "LoadVar elt",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 510",
    "Push ?result",
    "LoadVar elt",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary -",
    "StoreVar [result]",
    "LoadVar result",
    "LoadVar elt",
    "Apply",
    "Push 0",
    "2-ary <=",
    "JumpCond False 521",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "DelVar [result]",
    "DelVar elt",
    "Return",
    "Jump 943",
    "Frame combinations (bg, k)",
    "DelVar result",
    "LoadVar k",
    "Push 0",
    "2-ary ==",
    "JumpCond False 535",
    "DelVar bg",
    "DelVar k",
    "Push { {:} }",
    "StoreVar result",
    "Jump 616",
    "Push PC(395)",
    "LoadVar bg",
    "Apply",
    "StoreVar n",
    "LoadVar k",
    "LoadVar n",
    "2-ary >",
    "JumpCond False 549",
    "DelVar bg",
    "DelVar k",
    "DelVar n",
    "Push {}",
    "StoreVar result",
    "Jump 616",
    "LoadVar k",
    "LoadVar n",
    "DelVar n",
    "2-ary ==",
    "JumpCond False 561",
    "DelVar k",
    "Push {}",
    "LoadVar bg",
    "DelVar bg",
    "2-ary SetAdd",
    "StoreVar result",
    "Jump 616",
    "Push PC(417)",
    "LoadVar bg",
    "Apply",
    "StoreVar hd",
    "Push PC(493)",
    "Push ()",
    "LoadVar bg",
    "DelVar bg",
    "2-ary ListAdd",
    "LoadVar hd",
    "2-ary ListAdd",
    "Apply",
    "StoreVar tl",
    "Push {}",
    "StoreVar $accu454",
    "Push PC(524)",
    "Push ()",
    "LoadVar tl",
    "2-ary ListAdd",
    "LoadVar k",
    "Push 1",
    "2-ary -",
    "2-ary ListAdd",
    "Apply",
    "Push 0",
    "Cut(x)",
    "JumpCond False 601",
    "LoadVar $accu454",
    "DelVar $accu454",
    "Push PC(464)",
    "Push ()",
    "LoadVar x",
    "DelVar x",
    "2-ary ListAdd",
    "LoadVar hd",
    "2-ary ListAdd",
    "Apply",
    "2-ary SetAdd",
    "StoreVar $accu454",
    "Jump 586",
    "DelVar hd",
    "DelVar x",
    "LoadVar $accu454",
    "DelVar $accu454",
    "Push PC(524)",
    "Push ()",
    "LoadVar tl",
    "DelVar tl",
    "2-ary ListAdd",
    "LoadVar k",
    "DelVar k",
    "2-ary ListAdd",
    "Apply",
    "2-ary |",
    "StoreVar result",
    "Return",
    "Jump 943",
    "Frame atomic_load p",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar p",
    "DelVar p",
    "Load",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame atomic_store (p, v)",
    "AtomicInc(lazy)",
    "LoadVar p",
    "DelVar p",
    "LoadVar v",
    "DelVar v",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame tas lk",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar lk",
    "Load",
    "StoreVar result",
    "LoadVar lk",
    "DelVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame cas (p, old, new)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar p",
    "Load",
    "LoadVar old",
    "DelVar old",
    "2-ary ==",
    "StoreVar result",
    "LoadVar result",
    "JumpCond False 667",
    "LoadVar p",
    "DelVar p",
    "LoadVar new",
    "DelVar new",
    "Store",
    "DelVar new",
    "DelVar p",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame BinSema acquired",
    "DelVar result",
    "LoadVar acquired",
    "DelVar acquired",
    "StoreVar result",
    "Return",
    "Jump 943",
    "Frame Lock ()",
    "DelVar result",
    "Push PC(672)",
    "Push False",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 943",
    "Frame acquired binsema",
    "DelVar result",
    "LoadVar binsema",
    "DelVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 943",
    "Frame acquire binsema",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar binsema",
    "Load",
    "1-ary not",
    "JumpCond False 703",
    "Jump 706",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 696",
    "ReadonlyDec",
    "LoadVar binsema",
    "DelVar binsema",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame release binsema",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar binsema",
    "Load",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar binsema",
    "DelVar binsema",
    "Push False",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame held binsema",
    "DelVar result",
    "LoadVar binsema",
    "DelVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 943",
    "Frame Condition ()",
    "DelVar result",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 943",
    "Frame wait (c, lk)",
    "Push 0",
    "StoreVar cnt",
    "DelVar cnt",
    "Push ()",
    "Save",
    "Continue",
    "StoreVar ((), ctx)",
    "AtomicInc(lazy)",
    "Push PC(374)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "StoreVar cnt",
    "LoadVar c",
    "Push PC(464)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "LoadVar lk",
    "Push False",
    "Store",
    "AtomicDec",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar lk",
    "Load",
    "1-ary not",
    "JumpCond False 795",
    "Push PC(374)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "LoadVar cnt",
    "2-ary <=",
    "Jump 796",
    "Push False",
    "JumpCond False 801",
    "DelVar c",
    "DelVar cnt",
    "DelVar ctx",
    "Jump 804",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 778",
    "ReadonlyDec",
    "LoadVar lk",
    "DelVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame notify c",
    "AtomicInc(lazy)",
    "LoadVar c",
    "Load",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "2-ary !=",
    "JumpCond False 835",
    "LoadVar c",
    "Push PC(493)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "Push PC(453)",
    "LoadVar c",
    "DelVar c",
    "Load",
    "Apply",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "DelVar c",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame notifyAll c",
    "AtomicInc(lazy)",
    "LoadVar c",
    "DelVar c",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame Semaphore cnt",
    "DelVar result",
    "LoadVar cnt",
    "DelVar cnt",
    "StoreVar result",
    "Return",
    "Jump 943",
    "Frame P sema",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar sema",
    "Load",
    "Push 0",
    "2-ary >",
    "JumpCond False 866",
    "Jump 869",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 858",
    "ReadonlyDec",
    "LoadVar sema",
    "DelVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame V sema",
    "AtomicInc(lazy)",
    "LoadVar sema",
    "DelVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame Queue ()",
    "DelVar result",
    "Push ()",
    "StoreVar result",
    "Return",
    "Jump 943",
    "Frame get q",
    "DelVar result",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar q",
    "Load",
    "Push ()",
    "2-ary !=",
    "JumpCond False 908",
    "Jump 911",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 899",
    "ReadonlyDec",
    "Push PC(44)",
    "LoadVar q",
    "Load",
    "Apply",
    "StoreVar result",
    "LoadVar q",
    "Push PC(55)",
    "LoadVar q",
    "DelVar q",
    "Load",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 943",
    "Frame put (q, item)",
    "AtomicInc(lazy)",
    "LoadVar q",
    "Push PC(32)",
    "Push ()",
    "LoadVar q",
    "DelVar q",
    "Load",
    "2-ary ListAdd",
    "LoadVar item",
    "DelVar item",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Push ()",
    "Push PC(679)",
    "Push ()",
    "Apply",
    "2-ary ListAdd",
    "Push 5",
    "2-ary *",
    "Store forks",
    "Jump 995",
    "Frame diner which",
    "Push ()",
    "LoadVar which",
    "2-ary ListAdd",
    "LoadVar which",
    "DelVar which",
    "Push 1",
    "2-ary +",
    "Push 5",
    "2-ary %",
    "2-ary ListAdd",
    "StoreVar (left, right)",
    "Push { False, True }",
    "Choose",
    "JumpCond False 992",
    "Push PC(695)",
    "Push ?forks",
    "LoadVar left",
    "Address",
    "Apply",
    "Pop",
    "Push PC(695)",
    "Push ?forks",
    "LoadVar right",
    "Address",
    "Apply",
    "Pop",
    "Push PC(714)",
    "Push ?forks",
    "LoadVar left",
    "Address",
    "Apply",
    "Pop",
    "Push PC(714)",
    "Push ?forks",
    "LoadVar right",
    "Address",
    "Apply",
    "Pop",
    "Jump 964",
    "DelVar left",
    "DelVar right",
    "Return",
    "Push { 0, 1, 2, 3, 4 }",
    "Push 0",
    "Cut(i)",
    "JumpCond False 1005",
    "Push PC(952)",
    "LoadVar i",
    "DelVar i",
    "Push {:}",
    "Spawn",
    "Jump 997",
    "DelVar i",
    "Return",
    "DelVar result"
  ],
  "explain": [
    "start of method __init__",
    "set program counter to 52",
    "start of method subseq",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in $accu3",
    "push the value of b",
    "delete method variable b",
    "push the value of e",
    "delete method variable e",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying ..",
    "push constant 0",
    "get next element and assign to x",
    "pop a value and jump to 25 if the value is False",
    "push the value of $accu3",
    "delete method variable $accu3",
    "push the value of s",
    "push the value of x",
    "delete method variable x",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in $accu3",
    "set program counter to 14",
    "delete method variable s",
    "delete method variable x",
    "push the value of $accu3",
    "delete method variable $accu3",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 52",
    "start of method append",
    "delete method variable result",
    "push the value of s",
    "delete method variable s",
    "push constant ()",
    "push the value of e",
    "delete method variable e",
    "pop 2 values and push the result of applying ListAdd",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 52",
    "start of method head",
    "delete method variable result",
    "push the value of s",
    "delete method variable s",
    "push constant 0",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(55)",
    "top of stack is a built-in operation called list$tail",
    "set program counter to 371",
    "start of method tail",
    "delete method variable result",
    "push constant PC(2)",
    "push constant ()",
    "push the value of s",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of s",
    "delete method variable s",
    "pop 1 value and push the result of applying len",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method sum",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in result",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v",
    "pop a value and jump to 87 if the value is False",
    "push the value of result",
    "delete method variable result",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 78",
    "delete method variable v",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method set",
    "delete method variable result",
    "push constant {}",
    "pop a value and store in $accu71",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v",
    "pop a value and jump to 106 if the value is False",
    "push the value of $accu71",
    "delete method variable $accu71",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying SetAdd",
    "pop a value and store in $accu71",
    "set program counter to 97",
    "delete method variable v",
    "push the value of $accu71",
    "delete method variable $accu71",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method list",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in $accu87",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v",
    "pop a value and jump to 128 if the value is False",
    "push the value of $accu87",
    "delete method variable $accu87",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in $accu87",
    "set program counter to 119",
    "delete method variable v",
    "push the value of $accu87",
    "delete method variable $accu87",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method values",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in $accu103",
    "push the value of d",
    "delete method variable d",
    "push constant 0",
    "get next element and assign to _:v",
    "delete method variable _",
    "pop a value and jump to 151 if the value is False",
    "push the value of $accu103",
    "delete method variable $accu103",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in $accu103",
    "set program counter to 141",
    "delete method variable v",
    "push the value of $accu103",
    "delete method variable $accu103",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method items",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in $accu119",
    "push the value of d",
    "delete method variable d",
    "push constant 0",
    "get next element and assign to k:v",
    "pop a value and jump to 178 if the value is False",
    "push the value of $accu119",
    "delete method variable $accu119",
    "push constant ()",
    "push the value of k",
    "delete method variable k",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in $accu119",
    "set program counter to 164",
    "delete method variable k",
    "delete method variable v",
    "push the value of $accu119",
    "delete method variable $accu119",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method qsort",
    "delete method variable result",
    "push the value of a",
    "push constant ()",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 195 if the value is False",
    "delete method variable a",
    "push constant ()",
    "pop a value and store in result",
    "set program counter to 265",
    "push constant ()",
    "push constant PC(44)",
    "push the value of a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(55)",
    "push the value of a",
    "delete method variable a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in (pivot, rest)",
    "push constant ()",
    "pop a value and store in $accu156",
    "push the value of rest",
    "push constant 0",
    "delete method variable v",
    "get next element and assign to v",
    "pop a value and jump to 224 if the value is False",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 210 if the value is False",
    "push the value of $accu156",
    "delete method variable $accu156",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in $accu156",
    "set program counter to 210",
    "delete method variable v",
    "push the value of $accu156",
    "delete method variable $accu156",
    "pop a value and store in lower",
    "push constant ()",
    "pop a value and store in $accu173",
    "push the value of rest",
    "delete method variable rest",
    "push constant 0",
    "delete method variable v",
    "get next element and assign to v",
    "pop a value and jump to 247 if the value is False",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying >=",
    "pop a value and jump to 233 if the value is False",
    "push the value of $accu173",
    "delete method variable $accu173",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in $accu173",
    "set program counter to 233",
    "delete method variable v",
    "push the value of $accu173",
    "delete method variable $accu173",
    "pop a value and store in higher",
    "push constant PC(185)",
    "push the value of lower",
    "delete method variable lower",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant ()",
    "push the value of pivot",
    "delete method variable pivot",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(185)",
    "push the value of higher",
    "delete method variable higher",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method sorted",
    "delete method variable result",
    "push constant PC(185)",
    "push constant PC(112)",
    "push the value of d",
    "delete method variable d",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method reversed",
    "delete method variable result",
    "push the value of d",
    "pop 1 value and push the result of applying len",
    "pop a value and store in n",
    "push constant ()",
    "pop a value and store in $accu216",
    "push constant 1",
    "push the value of n",
    "pop 2 values and push the result of applying ..",
    "push constant 0",
    "get next element and assign to i",
    "pop a value and jump to 302 if the value is False",
    "push the value of $accu216",
    "delete method variable $accu216",
    "push the value of d",
    "push the value of n",
    "push the value of i",
    "delete method variable i",
    "pop 2 values and push the result of applying -",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in $accu216",
    "set program counter to 289",
    "delete method variable d",
    "delete method variable i",
    "delete method variable n",
    "push the value of $accu216",
    "delete method variable $accu216",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method empty",
    "delete method variable result",
    "push constant {:}",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method fromSet",
    "delete method variable result",
    "push constant {:}",
    "pop a value and store in $accu243",
    "push the value of s",
    "delete method variable s",
    "push constant 0",
    "get next element and assign to elt",
    "pop a value and jump to 333 if the value is False",
    "push the value of $accu243",
    "delete method variable $accu243",
    "push the value of elt",
    "delete method variable elt",
    "push constant 1",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and store in $accu243",
    "set program counter to 323",
    "delete method variable elt",
    "push the value of $accu243",
    "delete method variable $accu243",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method fromList",
    "delete method variable result",
    "push constant {:}",
    "pop a value and store in result",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v",
    "pop a value and jump to 369 if the value is False",
    "push the value of v",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 362 if the value is False",
    "push constant ?result",
    "push the value of v",
    "delete method variable v",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 346",
    "push constant ?result",
    "push the value of v",
    "delete method variable v",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 346",
    "delete method variable v",
    "restore caller method state and push result",
    "push constant PC(374)",
    "top of stack is a built-in operation called bag$multiplicity",
    "set program counter to 392",
    "start of method multiplicity",
    "delete method variable result",
    "push the value of elt",
    "push the value of bg",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 387 if the value is False",
    "push the value of bg",
    "delete method variable bg",
    "push the value of elt",
    "delete method variable elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "set program counter to 391",
    "delete method variable bg",
    "delete method variable elt",
    "push constant 0",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(395)",
    "top of stack is a built-in operation called bag$size",
    "set program counter to 414",
    "start of method size",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in result",
    "push the value of bg",
    "delete method variable bg",
    "push constant 0",
    "get next element and assign to _:c",
    "delete method variable _",
    "pop a value and jump to 412 if the value is False",
    "push the value of result",
    "delete method variable result",
    "push the value of c",
    "delete method variable c",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 402",
    "delete method variable c",
    "restore caller method state and push result",
    "push constant PC(417)",
    "top of stack is a built-in operation called bag$bmin",
    "set program counter to 433",
    "start of method bmin",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bg",
    "push constant {:}",
    "pop 2 values and push the result of applying !=",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop 1 value and push the result of applying min",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(436)",
    "top of stack is a built-in operation called bag$bmax",
    "set program counter to 461",
    "start of method bmax",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bg",
    "push constant {:}",
    "pop 2 values and push the result of applying !=",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop 1 value and push the result of applying max",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 461",
    "start of method bchoose",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop a set value and push one of its elements",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(464)",
    "top of stack is a built-in operation called bag$add",
    "set program counter to 490",
    "start of method add",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in result",
    "push the value of elt",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 483 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 489",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "restore caller method state and push result",
    "push constant PC(493)",
    "top of stack is a built-in operation called bag$remove",
    "set program counter to 943",
    "start of method remove",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in result",
    "push the value of elt",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 510 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and the address of a method variable and store the value at that address",
    "push the value of result",
    "push the value of elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "pop 2 values and push the result of applying <=",
    "pop a value and jump to 521 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "pop an address of a method variable and delete that variable",
    "delete method variable elt",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method combinations",
    "delete method variable result",
    "push the value of k",
    "push constant 0",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 535 if the value is False",
    "delete method variable bg",
    "delete method variable k",
    "push constant { {:} }",
    "pop a value and store in result",
    "set program counter to 616",
    "push constant PC(395)",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in n",
    "push the value of k",
    "push the value of n",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 549 if the value is False",
    "delete method variable bg",
    "delete method variable k",
    "delete method variable n",
    "push constant {}",
    "pop a value and store in result",
    "set program counter to 616",
    "push the value of k",
    "push the value of n",
    "delete method variable n",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 561 if the value is False",
    "delete method variable k",
    "push constant {}",
    "push the value of bg",
    "delete method variable bg",
    "pop 2 values and push the result of applying SetAdd",
    "pop a value and store in result",
    "set program counter to 616",
    "push constant PC(417)",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in hd",
    "push constant PC(493)",
    "push constant ()",
    "push the value of bg",
    "delete method variable bg",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of hd",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in tl",
    "push constant {}",
    "pop a value and store in $accu454",
    "push constant PC(524)",
    "push constant ()",
    "push the value of tl",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of k",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "get next element and assign to x",
    "pop a value and jump to 601 if the value is False",
    "push the value of $accu454",
    "delete method variable $accu454",
    "push constant PC(464)",
    "push constant ()",
    "push the value of x",
    "delete method variable x",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of hd",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying SetAdd",
    "pop a value and store in $accu454",
    "set program counter to 586",
    "delete method variable hd",
    "delete method variable x",
    "push the value of $accu454",
    "delete method variable $accu454",
    "push constant PC(524)",
    "push constant ()",
    "push the value of tl",
    "delete method variable tl",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of k",
    "delete method variable k",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying |",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method atomic_load",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "delete method variable p",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method atomic_store",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "delete method variable p",
    "push the value of v",
    "delete method variable v",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method tas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "push the value of lk",
    "delete method variable lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method cas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "pop an address and push the value at the address",
    "push the value of old",
    "delete method variable old",
    "pop 2 values and push the result of applying ==",
    "pop a value and store in result",
    "push the value of result",
    "pop a value and jump to 667 if the value is False",
    "push the value of p",
    "delete method variable p",
    "push the value of new",
    "delete method variable new",
    "pop a value and an address and store the value at the address",
    "delete method variable new",
    "delete method variable p",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method BinSema",
    "delete method variable result",
    "push the value of acquired",
    "delete method variable acquired",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method Lock",
    "delete method variable result",
    "push constant PC(672)",
    "push constant False",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method acquired",
    "delete method variable result",
    "push the value of binsema",
    "delete method variable binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method acquire",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 703 if the value is False",
    "set program counter to 706",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 696",
    "decrement readonly counter of context",
    "push the value of binsema",
    "delete method variable binsema",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method release",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of binsema",
    "delete method variable binsema",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method held",
    "delete method variable result",
    "push the value of binsema",
    "delete method variable binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method Condition",
    "delete method variable result",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method wait",
    "push constant 0",
    "pop a value and store in cnt",
    "delete method variable cnt",
    "push constant ()",
    "pop a value and save context",
    "a no-op, must follow a Stop operation",
    "pop a value and store in ((), ctx)",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(374)",
    "push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in cnt",
    "push the value of c",
    "push constant PC(464)",
    "push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "push the value of lk",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 795 if the value is False",
    "push constant PC(374)",
    "push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push the value of cnt",
    "pop 2 values and push the result of applying <=",
    "set program counter to 796",
    "push constant False",
    "pop a value and jump to 801 if the value is False",
    "delete method variable c",
    "delete method variable cnt",
    "delete method variable ctx",
    "set program counter to 804",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 778",
    "decrement readonly counter of context",
    "push the value of lk",
    "delete method variable lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method notify",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 835 if the value is False",
    "push the value of c",
    "push constant PC(493)",
    "push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(453)",
    "push the value of c",
    "delete method variable c",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "delete method variable c",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method notifyAll",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of c",
    "delete method variable c",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method Semaphore",
    "delete method variable result",
    "push the value of cnt",
    "delete method variable cnt",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method P",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of sema",
    "pop an address and push the value at the address",
    "push constant 0",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 866 if the value is False",
    "set program counter to 869",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 858",
    "decrement readonly counter of context",
    "push the value of sema",
    "delete method variable sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method V",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of sema",
    "delete method variable sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method Queue",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method get",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of q",
    "pop an address and push the value at the address",
    "push constant ()",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 908 if the value is False",
    "set program counter to 911",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 899",
    "decrement readonly counter of context",
    "push constant PC(44)",
    "push the value of q",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "push the value of q",
    "push constant PC(55)",
    "push the value of q",
    "delete method variable q",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 943",
    "start of method put",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of q",
    "push constant PC(32)",
    "push constant ()",
    "push the value of q",
    "delete method variable q",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of item",
    "delete method variable item",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "push constant ()",
    "push constant PC(679)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 5",
    "pop 2 values and push the result of applying *",
    "pop a value and store it in shared variable forks",
    "set program counter to 995",
    "start of method diner",
    "push constant ()",
    "push the value of which",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of which",
    "delete method variable which",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "push constant 5",
    "pop 2 values and push the result of applying %",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in (left, right)",
    "push constant { False, True }",
    "pop a set value and push one of its elements",
    "pop a value and jump to 992 if the value is False",
    "push constant PC(695)",
    "push constant ?forks",
    "push the value of left",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(695)",
    "push constant ?forks",
    "push the value of right",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push constant ?forks",
    "push the value of left",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push constant ?forks",
    "push the value of right",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "set program counter to 964",
    "delete method variable left",
    "delete method variable right",
    "restore caller method state and push result",
    "push constant { 0, 1, 2, 3, 4 }",
    "push constant 0",
    "get next element and assign to i",
    "pop a value and jump to 1005 if the value is False",
    "push constant PC(952)",
    "push the value of i",
    "delete method variable i",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 997",
    "delete method variable i",
    "restore caller method state and push result",
    "delete method variable result"
  ],
  "locations": {
    "398": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "24", "column": "5", "endline": "24", "endcolumn": "12", "code": "    result = 0" },
    "813": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "58", "endcolumn": "1", "code": "    atomically if !c != bag.empty():" },
    "115": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "209": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "193": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "40", "column": "9", "endline": "40", "endcolumn": "16", "code": "        result = []" },
    "895": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "73", "column": "5", "endline": "73", "endcolumn": "12", "code": "    result = []" },
    "72": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "17", "column": "14", "endline": "17", "endcolumn": "14", "code": "    result = 0" },
    "829": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "42", "endline": "57", "endcolumn": "42", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "143": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "307": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "9", "endline": "54", "endcolumn": "16", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "263": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "60", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "845": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "60", "column": "21", "endline": "60", "endcolumn": "31", "code": "    atomically !c = bag.empty()" },
    "590": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "43": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "3", "code": "def head(s):" },
    "879": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "69", "endcolumn": "3", "code": "def V(sema):" },
    "835": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "58", "endcolumn": "1", "code": "    atomically if !c != bag.empty():" },
    "50": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "12", "code": "    result = s[0]" },
    "993": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "7", "column": "1", "endline": "16", "endcolumn": "1", "code": "def diner(which):" },
    "540": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "63", "column": "20", "endline": "63", "endcolumn": "20", "code": "            if k > n:" },
    "665": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "19", "column": "18", "endline": "19", "endcolumn": "20", "code": "            !p = new" },
    "259": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "48", "endline": "45", "endcolumn": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "705": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "33", "column": "1", "endline": "33", "endcolumn": "1", "code": "" },
    "889": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "code": "    atomically !sema += 1" },
    "943": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "5", "column": "10", "endline": "5", "endcolumn": "16", "code": "forks = [Lock(),] * N" },
    "530": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "code": "        result = { {:} }" },
    "188": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "39", "column": "13", "endline": "39", "endcolumn": "14", "code": "    if a == []:" },
    "942": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "82", "endcolumn": "1", "code": "def put(q, item):" },
    "454": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "code": "    result = choose(keys(bg))" },
    "357": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "code": "            result[v] += 1" },
    "755": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "49", "column": "19", "endline": "49", "endcolumn": "34", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "650": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "3", "code": "def cas(p, old, new):" },
    "932": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "34", "endline": "81", "endcolumn": "34", "code": "    atomically !q = list.append(!q, item)" },
    "354": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "20", "code": "            result[v] += 1" },
    "338": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "3", "code": "def fromList(a):" },
    "933": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "34", "endline": "81", "endcolumn": "34", "code": "    atomically !q = list.append(!q, item)" },
    "600": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "74", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "878": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "68", "endcolumn": "1", "code": "def P(sema):" },
    "418": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "code": "    assert bg != {:}" },
    "348": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "10", "column": "12", "endline": "10", "endcolumn": "12", "code": "        if v in result:" },
    "304": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "992": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "7", "column": "1", "endline": "16", "endcolumn": "1", "code": "def diner(which):" },
    "888": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "23", "code": "    atomically !sema += 1" },
    "404": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "27", "endcolumn": "1", "code": "    for _:c in bg:" },
    "62": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "code": "    result = subseq(s, 1, len(s))" },
    "419": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "code": "    assert bg != {:}" },
    "914": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "77", "column": "28", "endline": "77", "endcolumn": "29", "code": "        result = list.head(!q)" },
    "828": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "42", "endline": "57", "endcolumn": "42", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "42": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "7", "endcolumn": "1", "code": "def append(s, e):" },
    "754": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "48", "column": "9", "endline": "51", "endcolumn": "24", "code": "        atomically:" },
    "403": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "27", "endcolumn": "1", "code": "    for _:c in bg:" },
    "128": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "114": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "453": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "40", "endcolumn": "1", "code": "def bchoose(bg):" },
    "566": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "178": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "931": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "code": "    atomically !q = list.append(!q, item)" },
    "591": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "564": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "17", "endline": "71", "endcolumn": "1", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "704": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "33", "endcolumn": "1", "code": "    atomically when not !binsema:" },
    "915": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "77", "column": "18", "endline": "77", "endcolumn": "30", "code": "        result = list.head(!q)" },
    "768": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "27", "code": "            !c = bag.add(!c, ctx)" },
    "707": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "32", "column": "10", "endline": "32", "endcolumn": "16", "code": "        !binsema = True" },
    "208": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "34", "endline": "43", "endcolumn": "37", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "565": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "44", "endline": "68", "endcolumn": "49", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "531": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "code": "        result = { {:} }" },
    "757": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "49", "column": "37", "endline": "49", "endcolumn": "37", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "258": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "43", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "541": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "63", "column": "16", "endline": "63", "endcolumn": "20", "code": "            if k > n:" },
    "452": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "3", "code": "def bchoose(bg):" },
    "847": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "31", "code": "    atomically !c = bag.empty()" },
    "897": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "75", "endcolumn": "3", "code": "def get(q):" },
    "509": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "22", "code": "        result[elt] -= 1" },
    "811": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "55", "endcolumn": "3", "code": "def notify(c):" },
    "559": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "66", "column": "17", "endline": "66", "endcolumn": "24", "code": "                result = { bg }" },
    "2": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "4", "endcolumn": "1", "code": "def subseq(s, b, e):" },
    "837": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "58", "endcolumn": "1", "code": "def notify(c):" },
    "1003": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "18", "code": "    spawn diner(i)" },
    "834": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "9", "endline": "57", "endcolumn": "10", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "51": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "10", "endcolumn": "1", "code": "def head(s):" },
    "3": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "894": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "73", "column": "14", "endline": "73", "endcolumn": "15", "code": "    result = []" },
    "12": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "36", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "567": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "52", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "844": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "60", "column": "30", "endline": "60", "endcolumn": "31", "code": "    atomically !c = bag.empty()" },
    "830": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "41", "endline": "57", "endcolumn": "42", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "568": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "52", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "56": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "19", "code": "    result = subseq(s, 1, len(s))" },
    "896": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "74", "endcolumn": "1", "code": "def Queue():" },
    "840": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "31", "code": "    atomically !c = bag.empty()" },
    "890": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "71", "endcolumn": "5", "code": "def V(sema):" },
    "846": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "17", "code": "    atomically !c = bag.empty()" },
    "812": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "58", "endcolumn": "1", "code": "def notify(c):" },
    "836": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "58", "endcolumn": "1", "code": "    atomically if !c != bag.empty():" },
    "709": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "32", "column": "20", "endline": "32", "endcolumn": "23", "code": "        !binsema = True" },
    "450": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "36", "column": "5", "endline": "36", "endcolumn": "12", "code": "    result = max(keys(bg))" },
    "997": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "17", "column": "1", "endline": "19", "endcolumn": "1", "code": "for i in {0..N-1}:" },
    "71": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "21", "endcolumn": "46", "code": "def sum(a):" },
    "361": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "10", "column": "9", "endline": "14", "endcolumn": "1", "code": "        if v in result:" },
    "9": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "34", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "533": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "60", "column": "9", "endline": "60", "endcolumn": "16", "code": "        result = { {:} }" },
    "457": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "39", "column": "21", "endline": "39", "endcolumn": "28", "code": "    result = choose(keys(bg))" },
    "400": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "25", "column": "16", "endline": "25", "endcolumn": "17", "code": "    for _:c in bg:" },
    "937": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "37", "endline": "81", "endcolumn": "40", "code": "    atomically !q = list.append(!q, item)" },
    "407": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "26", "column": "19", "endline": "26", "endcolumn": "19", "code": "        result += c" },
    "947": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "5", "column": "10", "endline": "5", "endcolumn": "16", "code": "forks = [Lock(),] * N" },
    "618": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "6", "endcolumn": "1", "code": "def atomic_load(p):" },
    "119": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "111": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "3", "code": "def list(a):" },
    "507": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "53", "column": "24", "endline": "53", "endcolumn": "24", "code": "        result[elt] -= 1" },
    "543": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "code": "                result = {}" },
    "759": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "936": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "37", "endline": "81", "endcolumn": "40", "code": "    atomically !q = list.append(!q, item)" },
    "593": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "36", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "756": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "401": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "27", "endcolumn": "1", "code": "    for _:c in bg:" },
    "990": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "14", "column": "13", "endline": "14", "endcolumn": "34", "code": "            release(?forks[right])" },
    "946": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "5", "column": "10", "endline": "5", "endcolumn": "15", "code": "forks = [Lock(),] * N" },
    "41": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "6", "column": "5", "endline": "6", "endcolumn": "12", "code": "    result = s + [e,]" },
    "706": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "33", "endcolumn": "1", "code": "    atomically when not !binsema:" },
    "264": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "13", "endline": "45", "endcolumn": "20", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "532": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "code": "        result = { {:} }" },
    "996": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "17", "column": "1", "endline": "19", "endcolumn": "1", "code": "for i in {0..N-1}:" },
    "369": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "14", "endcolumn": "1", "code": "def fromList(a):" },
    "366": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "13", "column": "25", "endline": "13", "endcolumn": "25", "code": "            result[v] = 1" },
    "8": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "34", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "604": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "542": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "63", "column": "13", "endline": "63", "endcolumn": "14", "code": "            if k > n:" },
    "654": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "17", "column": "19", "endline": "17", "endcolumn": "19", "code": "        result = !p == old" },
    "451": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "37", "endcolumn": "1", "code": "def bmax(bg):" },
    "266": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "48", "endcolumn": "3", "code": "def sorted(d):" },
    "592": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "36", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "557": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "code": "                result = { bg }" },
    "61": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "24", "endline": "13", "endcolumn": "24", "code": "    result = subseq(s, 1, len(s))" },
    "606": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "code": "                                | combinations(tl, k)" },
    "13": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "558": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "code": "                result = { bg }" },
    "607": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "49", "code": "                                | combinations(tl, k)" },
    "656": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "17", "column": "24", "endline": "17", "endcolumn": "26", "code": "        result = !p == old" },
    "508": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "code": "        result[elt] -= 1" },
    "657": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "17", "column": "24", "endline": "17", "endcolumn": "26", "code": "        result = !p == old" },
    "930": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "21", "endline": "81", "endcolumn": "31", "code": "    atomically !q = list.append(!q, item)" },
    "267": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "51", "endcolumn": "25", "code": "def sorted(d):" },
    "940": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "17", "code": "    atomically !q = list.append(!q, item)" },
    "998": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "17", "column": "1", "endline": "19", "endcolumn": "1", "code": "for i in {0..N-1}:" },
    "602": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "402": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "27", "endcolumn": "1", "code": "    for _:c in bg:" },
    "265": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "47", "endcolumn": "23", "code": "def qsort(a):" },
    "384": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "24", "code": "        result = bg[elt]" },
    "229": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "991": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "1", "code": "" },
    "938": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "code": "    atomically !q = list.append(!q, item)" },
    "163": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "363": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "13", "column": "20", "endline": "13", "endcolumn": "20", "code": "            result[v] = 1" },
    "941": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "41", "code": "    atomically !q = list.append(!q, item)" },
    "374": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "21", "endcolumn": "1", "code": "def multiplicity(bg, elt):" },
    "948": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "5", "column": "21", "endline": "5", "endcolumn": "21", "code": "forks = [Lock(),] * N" },
    "261": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "54", "endline": "45", "endcolumn": "59", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "959": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "32", "endline": "8", "endcolumn": "40", "code": "    let left, right = (which, (which + 1) % N):" },
    "405": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "code": "        result += c" },
    "324": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "112": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "29", "endcolumn": "45", "code": "def list(a):" },
    "974": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "11", "column": "22", "endline": "11", "endcolumn": "26", "code": "            acquire(?forks[right])" },
    "702": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "33", "column": "1", "endline": "33", "endcolumn": "1", "code": "" },
    "601": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "506": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "code": "        result[elt] -= 1" },
    "327": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "code": "    result = { elt:1 for elt in s }" },
    "909": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "79", "endcolumn": "1", "code": "    atomically when !q != []:" },
    "455": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "code": "    result = choose(keys(bg))" },
    "52": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "11", "column": "9", "endline": "11", "endcolumn": "12", "code": "builtin tail \"list$tail\"" },
    "924": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "79", "endcolumn": "1", "code": "    atomically when !q != []:" },
    "819": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "56", "column": "19", "endline": "56", "endcolumn": "35", "code": "    atomically if !c != bag.empty():" },
    "818": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "56", "column": "25", "endline": "56", "endcolumn": "35", "code": "    atomically if !c != bag.empty():" },
    "752": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "47", "column": "19", "endline": "47", "endcolumn": "24", "code": "    let (), ctx = save():" },
    "651": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "20", "endcolumn": "1", "code": "def cas(p, old, new):" },
    "63": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "31", "endline": "13", "endcolumn": "31", "code": "    result = subseq(s, 1, len(s))" },
    "619": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "26", "code": "    atomically result = !p" },
    "360": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "24", "code": "            result[v] += 1" },
    "73": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "17", "column": "14", "endline": "17", "endcolumn": "14", "code": "    result = 0" },
    "11": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "36", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "556": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "code": "                result = { bg }" },
    "377": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "16", "code": "    if elt in bg:" },
    "40": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "21", "code": "    result = s + [e,]" },
    "701": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "33", "endcolumn": "1", "code": "    atomically when not !binsema:" },
    "158": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "53": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "11", "column": "1", "endline": "11", "endcolumn": "24", "code": "builtin tail \"list$tail\"" },
    "387": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "code": "        result = 0" },
    "228": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "262": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "48", "endline": "45", "endcolumn": "60", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "10": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "36", "endline": "3", "endcolumn": "36", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "925": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "79", "endcolumn": "1", "code": "def get(q):" },
    "278": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "55", "endcolumn": "1", "code": "def reversed(d):" },
    "703": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "33", "endcolumn": "1", "code": "    atomically when not !binsema:" },
    "555": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "code": "                result = { bg }" },
    "110": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "25", "endcolumn": "35", "code": "def set(a):" },
    "653": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "20", "endcolumn": "1", "code": "    atomically:" },
    "288": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "751": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "47", "column": "19", "endline": "47", "endcolumn": "24", "code": "    let (), ctx = save():" },
    "505": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "code": "        result[elt] -= 1" },
    "70": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "3", "code": "def sum(a):" },
    "984": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "33", "code": "            release(?forks[left])" },
    "116": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "603": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "318": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "375": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "10", "code": "    if elt in bg:" },
    "362": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "18", "code": "            result[v] = 1" },
    "289": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "406": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "code": "        result += c" },
    "798": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "1", "code": "" },
    "279": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "53", "column": "17", "endline": "53", "endcolumn": "17", "code": "    let n = len(d):" },
    "753": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "47", "column": "5", "endline": "54", "endcolumn": "1", "code": "    let (), ctx = save():" },
    "695": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "33", "endcolumn": "1", "code": "def acquire(binsema):" },
    "748": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "46", "column": "5", "endline": "46", "endcolumn": "15", "code": "    var cnt = 0" },
    "456": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "code": "    result = choose(keys(bg))" },
    "325": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "975": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "11", "column": "28", "endline": "11", "endcolumn": "32", "code": "            acquire(?forks[right])" },
    "645": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "13", "column": "10", "endline": "13", "endcolumn": "11", "code": "        !lk = True" },
    "750": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "24", "code": "    let (), ctx = save():" },
    "60": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "code": "    result = subseq(s, 1, len(s))" },
    "385": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "18", "column": "9", "endline": "18", "endcolumn": "16", "code": "        result = bg[elt]" },
    "260": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "54", "endline": "45", "endcolumn": "59", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "652": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "20", "endcolumn": "1", "code": "    atomically:" },
    "108": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "985": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "14", "column": "13", "endline": "14", "endcolumn": "19", "code": "            release(?forks[right])" },
    "635": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "21", "code": "    atomically !p = v" },
    "117": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "700": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "31", "column": "21", "endline": "31", "endcolumn": "32", "code": "    atomically when not !binsema:" },
    "504": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "19", "code": "        result[elt] -= 1" },
    "961": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "31", "endline": "8", "endcolumn": "45", "code": "    let left, right = (which, (which + 1) % N):" },
    "681": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "20", "code": "    result = BinSema(False)" },
    "343": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "code": "    for v in a:" },
    "554": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "code": "                result = { bg }" },
    "711": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "33", "endcolumn": "1", "code": "    atomically when not !binsema:" },
    "976": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "11", "column": "22", "endline": "11", "endcolumn": "33", "code": "            acquire(?forks[right])" },
    "694": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "code": "def acquire(binsema):" },
    "777": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "48", "column": "9", "endline": "51", "endcolumn": "24", "code": "        atomically:" },
    "762": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "49", "column": "19", "endline": "49", "endcolumn": "43", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "194": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "39", "column": "5", "endline": "47", "endcolumn": "23", "code": "    if a == []:" },
    "67": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "33", "code": "    result = subseq(s, 1, len(s))" },
    "462": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "41", "column": "1", "endline": "41", "endcolumn": "21", "code": "builtin add \"bag$add\"" },
    "20": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "18", "endline": "3", "endcolumn": "18", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "738": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "44", "endcolumn": "1", "code": "def Condition():" },
    "547": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "64", "column": "17", "endline": "64", "endcolumn": "24", "code": "                result = {}" },
    "822": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "14", "endline": "57", "endcolumn": "23", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "814": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "56", "column": "20", "endline": "56", "endcolumn": "20", "code": "    atomically if !c != bag.empty():" },
    "286": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "41", "endline": "54", "endcolumn": "41", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "376": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "10", "code": "    if elt in bg:" },
    "634": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "17", "code": "    atomically !p = v" },
    "268": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "18", "code": "    result = qsort(list(d))" },
    "511": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "54", "column": "15", "endline": "54", "endcolumn": "17", "code": "    if result[elt] <= 0:" },
    "109": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "5", "endline": "23", "endcolumn": "12", "code": "    result = { v for v in a }" },
    "227": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "9", "endline": "47", "endcolumn": "23", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "126": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "226": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "579": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "235": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "621": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "5", "column": "26", "endline": "5", "endcolumn": "26", "code": "    atomically result = !p" },
    "287": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "38", "endline": "54", "endcolumn": "41", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "449": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "36", "column": "14", "endline": "36", "endcolumn": "26", "code": "    result = max(keys(bg))" },
    "463": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "3", "code": "def add(bg, elt):" },
    "4": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1007": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "1", "column": "1", "endline": "19", "endcolumn": "1", "code": "from synch import Lock, acquire, release" },
    "475": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "45", "column": "16", "endline": "45", "endcolumn": "18", "code": "        result[elt] += 1" },
    "295": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "24", "endline": "54", "endcolumn": "24", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "134": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "33", "endcolumn": "23", "code": "def values(d):" },
    "447": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "36", "column": "23", "endline": "36", "endcolumn": "24", "code": "    result = max(keys(bg))" },
    "697": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "33", "endcolumn": "1", "code": "    atomically when not !binsema:" },
    "476": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "19", "code": "        result[elt] += 1" },
    "292": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "371": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "15", "column": "9", "endline": "15", "endcolumn": "20", "code": "builtin multiplicity \"bag$multiplicity\"" },
    "680": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "20", "code": "    result = BinSema(False)" },
    "30": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "4", "endcolumn": "1", "code": "def subseq(s, b, e):" },
    "201": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "43", "endline": "42", "endcolumn": "43", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "763": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "49", "column": "13", "endline": "49", "endcolumn": "17", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "962": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "24", "endline": "8", "endcolumn": "45", "code": "    let left, right = (which, (which + 1) % N):" },
    "186": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "8", "code": "    if a == []:" },
    "608": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "49", "code": "                                | combinations(tl, k)" },
    "7": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "31", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "342": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "8", "column": "5", "endline": "8", "endcolumn": "12", "code": "    result = {:}" },
    "620": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "26", "code": "    atomically result = !p" },
    "866": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "68", "endcolumn": "1", "code": "    atomically when !sema > 0:" },
    "340": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "8", "column": "14", "endline": "8", "endcolumn": "16", "code": "    result = {:}" },
    "127": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "881": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "code": "    atomically !sema += 1" },
    "180": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "860": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "22", "endline": "66", "endcolumn": "25", "code": "    atomically when !sema > 0:" },
    "609": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "code": "                                | combinations(tl, k)" },
    "224": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "882": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "70", "column": "17", "endline": "70", "endcolumn": "20", "code": "    atomically !sema += 1" },
    "187": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "8", "code": "    if a == []:" },
    "232": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "833": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "14", "endline": "57", "endcolumn": "44", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "195": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "908": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "79", "endcolumn": "1", "code": "    atomically when !q != []:" },
    "200": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "38", "endline": "42", "endcolumn": "41", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "113": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "821": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "10", "endline": "57", "endcolumn": "10", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "815": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "56", "column": "19", "endline": "56", "endcolumn": "20", "code": "    atomically if !c != bag.empty():" },
    "120": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "6": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "31", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "233": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "893": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "73", "column": "14", "endline": "73", "endcolumn": "15", "code": "    result = []" },
    "867": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "68", "endcolumn": "1", "code": "    atomically when !sema > 0:" },
    "949": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "5", "column": "9", "endline": "5", "endcolumn": "21", "code": "forks = [Lock(),] * N" },
    "935": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "code": "    atomically !q = list.append(!q, item)" },
    "775": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "51", "column": "19", "endline": "51", "endcolumn": "23", "code": "            !lk = False" },
    "655": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "17", "column": "18", "endline": "17", "endcolumn": "19", "code": "        result = !p == old" },
    "464": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "48", "endcolumn": "1", "code": "def add(bg, elt):" },
    "627": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "3", "code": "def atomic_store(p, v):" },
    "865": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "68", "column": "1", "endline": "68", "endcolumn": "1", "code": "" },
    "293": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "713": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "code": "def release(binsema):" },
    "370": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "14", "endcolumn": "1", "code": "def fromList(a):" },
    "1005": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "1", "column": "1", "endline": "19", "endcolumn": "1", "code": "from synch import Lock, acquire, release" },
    "545": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "code": "                result = {}" },
    "687": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "29", "endcolumn": "1", "code": "def acquired(binsema):" },
    "963": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "5", "endline": "16", "endcolumn": "1", "code": "    let left, right = (which, (which + 1) % N):" },
    "368": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "1", "code": "" },
    "211": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "513": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "54", "column": "23", "endline": "54", "endcolumn": "23", "code": "    if result[elt] <= 0:" },
    "446": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "36", "column": "23", "endline": "36", "endcolumn": "24", "code": "    result = max(keys(bg))" },
    "85": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "17", "code": "        result += v" },
    "135": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "823": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "779": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "54", "endcolumn": "1", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "478": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "code": "        result[elt] += 1" },
    "181": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "234": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "883": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "70", "column": "17", "endline": "70", "endcolumn": "20", "code": "    atomically !sema += 1" },
    "995": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "17", "column": "11", "endline": "17", "endcolumn": "16", "code": "for i in {0..N-1}:" },
    "341": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "8", "column": "14", "endline": "8", "endcolumn": "16", "code": "    result = {:}" },
    "47": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "code": "    result = s[0]" },
    "548": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "63", "column": "13", "endline": "71", "endcolumn": "1", "code": "            if k > n:" },
    "510": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "13", "code": "    if result[elt] <= 0:" },
    "269": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "18", "code": "    result = qsort(list(d))" },
    "710": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "32", "column": "9", "endline": "32", "endcolumn": "16", "code": "        !binsema = True" },
    "17": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "864": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "68", "endcolumn": "1", "code": "    atomically when !sema > 0:" },
    "624": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "23", "code": "    atomically result = !p" },
    "960": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "45", "endline": "8", "endcolumn": "45", "code": "    let left, right = (which, (which + 1) % N):" },
    "774": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "code": "            !lk = False" },
    "686": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "3", "code": "def acquired(binsema):" },
    "546": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "code": "                result = {}" },
    "544": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "code": "                result = {}" },
    "139": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "77": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "21", "endcolumn": "46", "code": "    for v in a:" },
    "346": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "14", "endcolumn": "1", "code": "    for v in a:" },
    "237": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "51", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "808": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "53", "column": "13", "endline": "53", "endcolumn": "15", "code": "            !lk = True" },
    "966": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "9", "column": "9", "endline": "16", "endcolumn": "1", "code": "        while choose({ False, True }):" },
    "708": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "32", "column": "10", "endline": "32", "endcolumn": "16", "code": "        !binsema = True" },
    "626": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "6", "endcolumn": "1", "code": "def atomic_load(p):" },
    "294": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "22", "endline": "54", "endcolumn": "22", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "479": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "45", "column": "24", "endline": "45", "endcolumn": "24", "code": "        result[elt] += 1" },
    "460": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "40", "endcolumn": "1", "code": "def bchoose(bg):" },
    "22": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "297": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "22", "endline": "54", "endcolumn": "24", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "296": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "24", "endline": "54", "endcolumn": "24", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "994": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "7", "column": "1", "endline": "16", "endcolumn": "1", "code": "def diner(which):" },
    "776": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "51", "column": "13", "endline": "51", "endcolumn": "15", "code": "            !lk = False" },
    "359": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "code": "            result[v] += 1" },
    "967": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "10", "column": "13", "endline": "10", "endcolumn": "19", "code": "            acquire(?forks[left])" },
    "445": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "code": "    assert bg != {:}" },
    "712": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "33", "endcolumn": "1", "code": "def acquire(binsema):" },
    "236": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "46", "endline": "44", "endcolumn": "46", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "569": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "934": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "34", "code": "    atomically !q = list.append(!q, item)" },
    "684": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "12", "code": "    result = BinSema(False)" },
    "461": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "41", "column": "9", "endline": "41", "endcolumn": "11", "code": "builtin add \"bag$add\"" },
    "32": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "7", "endcolumn": "1", "code": "def append(s, e):" },
    "809": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "54", "endcolumn": "1", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "512": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "18", "code": "    if result[elt] <= 0:" },
    "199": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "576": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "52", "endline": "69", "endcolumn": "63", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "122": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "904": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "27", "endline": "76", "endcolumn": "28", "code": "    atomically when !q != []:" },
    "831": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "29", "endline": "57", "endcolumn": "43", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "979": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "19", "code": "            release(?forks[left])" },
    "898": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "79", "endcolumn": "1", "code": "def get(q):" },
    "0": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "1", "column": "1", "endline": "19", "endcolumn": "1", "code": "from synch import Lock, acquire, release" },
    "466": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "code": "    result = bg" },
    "350": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "10", "column": "12", "endline": "10", "endcolumn": "22", "code": "        if v in result:" },
    "15": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "137": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "699": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "31", "column": "25", "endline": "31", "endcolumn": "32", "code": "    atomically when not !binsema:" },
    "205": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "9", "endline": "47", "endcolumn": "23", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "838": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "59", "endcolumn": "3", "code": "def notifyAll(c):" },
    "910": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "79", "column": "1", "endline": "79", "endcolumn": "1", "code": "" },
    "715": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "35", "column": "5", "endline": "38", "endcolumn": "5", "code": "    atomically:" },
    "817": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "56", "column": "34", "endline": "56", "endcolumn": "35", "code": "    atomically if !c != bag.empty():" },
    "471": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "44", "column": "8", "endline": "44", "endcolumn": "20", "code": "    if elt in result:" },
    "103": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "39": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "20", "code": "    result = s + [e,]" },
    "197": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "34", "endline": "42", "endcolumn": "34", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "218": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "639": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "14", "endcolumn": "1", "code": "    atomically:" },
    "810": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "54", "endcolumn": "1", "code": "def wait(c, lk):" },
    "805": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "53", "column": "14", "endline": "53", "endcolumn": "15", "code": "            !lk = True" },
    "562": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "31", "endline": "68", "endcolumn": "32", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "291": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "29": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "5", "endline": "3", "endcolumn": "12", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "182": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "12", "code": "    result = [ (k, v) for k:v in d ]" },
    "82": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "code": "        result += v" },
    "353": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "20", "code": "            result[v] += 1" },
    "918": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "78", "column": "14", "endline": "78", "endcolumn": "22", "code": "        !q = list.tail(!q)" },
    "891": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "72", "endcolumn": "3", "code": "def Queue():" },
    "190": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "6", "code": "    if a == []:" },
    "766": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "code": "            !c = bag.add(!c, ctx)" },
    "231": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "35", "endline": "44", "endcolumn": "38", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "458": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "39", "column": "14", "endline": "39", "endcolumn": "29", "code": "    result = choose(keys(bg))" },
    "378": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "16", "code": "    if elt in bg:" },
    "121": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "92": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "465": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "code": "    result = bg" },
    "290": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "832": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "130": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "1": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "2", "endcolumn": "3", "code": "def subseq(s, b, e):" },
    "804": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "54", "endcolumn": "1", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "905": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "21", "endline": "76", "endcolumn": "28", "code": "    atomically when !q != []:" },
    "803": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "1", "code": "" },
    "772": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "50", "column": "18", "endline": "50", "endcolumn": "33", "code": "            !c = bag.add(!c, ctx)" },
    "770": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "50", "column": "30", "endline": "50", "endcolumn": "32", "code": "            !c = bag.add(!c, ctx)" },
    "682": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "25", "column": "22", "endline": "25", "endcolumn": "26", "code": "    result = BinSema(False)" },
    "230": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "35", "endline": "44", "endcolumn": "38", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "892": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "74", "endcolumn": "1", "code": "def Queue():" },
    "549": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "65", "column": "18", "endline": "65", "endcolumn": "18", "code": "            elif k == n:" },
    "638": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "14", "endcolumn": "1", "code": "def tas(lk):" },
    "623": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "5", "column": "25", "endline": "5", "endcolumn": "26", "code": "    atomically result = !p" },
    "196": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "32", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "57": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "19", "code": "    result = subseq(s, 1, len(s))" },
    "816": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "56", "column": "25", "endline": "56", "endcolumn": "33", "code": "    atomically if !c != bag.empty():" },
    "622": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "5", "column": "26", "endline": "5", "endcolumn": "26", "code": "    atomically result = !p" },
    "773": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "50", "column": "13", "endline": "50", "endcolumn": "14", "code": "            !c = bag.add(!c, ctx)" },
    "698": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "31", "column": "26", "endline": "31", "endcolumn": "32", "code": "    atomically when not !binsema:" },
    "219": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "761": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "477": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "code": "        result[elt] += 1" },
    "683": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "27", "code": "    result = BinSema(False)" },
    "136": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "459": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "12", "code": "    result = choose(keys(bg))" },
    "802": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "54", "endcolumn": "1", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "352": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "18", "code": "            result[v] += 1" },
    "912": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "77", "column": "18", "endline": "77", "endcolumn": "26", "code": "        result = list.head(!q)" },
    "129": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "560": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "65", "column": "13", "endline": "66", "endcolumn": "32", "code": "            elif k == n:" },
    "718": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "36", "column": "17", "endline": "36", "endcolumn": "23", "code": "        assert !binsema" },
    "688": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "code": "    result = !binsema" },
    "131": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "5", "endline": "27", "endcolumn": "12", "code": "    result = [ v for v in a ]" },
    "578": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "66", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "574": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "99": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "760": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "49", "column": "40", "endline": "49", "endcolumn": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "448": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "36", "column": "18", "endline": "36", "endcolumn": "25", "code": "    result = max(keys(bg))" },
    "207": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "769": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "code": "            !c = bag.add(!c, ctx)" },
    "355": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "21", "code": "            result[v] += 1" },
    "191": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "40", "column": "18", "endline": "40", "endcolumn": "19", "code": "        result = []" },
    "5": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "771": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "code": "            !c = bag.add(!c, ctx)" },
    "202": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "43", "endline": "42", "endcolumn": "43", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "806": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "53", "column": "14", "endline": "53", "endcolumn": "15", "code": "            !lk = True" },
    "75": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "code": "    for v in a:" },
    "917": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "78", "column": "10", "endline": "78", "endcolumn": "10", "code": "        !q = list.tail(!q)" },
    "916": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "77", "column": "9", "endline": "77", "endcolumn": "16", "code": "        result = list.head(!q)" },
    "125": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "203": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "38", "endline": "42", "endcolumn": "44", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "467": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "code": "    result = bg" },
    "563": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "26", "endline": "68", "endcolumn": "33", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "470": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "44", "column": "15", "endline": "44", "endcolumn": "20", "code": "    if elt in result:" },
    "189": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "14", "code": "    if a == []:" },
    "185": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "47", "endcolumn": "23", "code": "def qsort(a):" },
    "575": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "628": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "9", "endcolumn": "1", "code": "def atomic_store(p, v):" },
    "65": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "27", "endline": "13", "endcolumn": "32", "code": "    result = subseq(s, 1, len(s))" },
    "206": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "184": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "3", "code": "def qsort(a):" },
    "969": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "10", "column": "28", "endline": "10", "endcolumn": "31", "code": "            acquire(?forks[left])" },
    "913": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "77", "column": "29", "endline": "77", "endcolumn": "29", "code": "        result = list.head(!q)" },
    "192": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "40", "column": "18", "endline": "40", "endcolumn": "19", "code": "        result = []" },
    "839": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "61", "endcolumn": "1", "code": "def notifyAll(c):" },
    "765": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "50", "column": "18", "endline": "50", "endcolumn": "24", "code": "            !c = bag.add(!c, ctx)" },
    "577": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "689": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "code": "    result = !binsema" },
    "349": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "10", "column": "17", "endline": "10", "endcolumn": "22", "code": "        if v in result:" },
    "561": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "26", "endline": "68", "endcolumn": "29", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "132": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "29", "endcolumn": "45", "code": "def list(a):" },
    "55": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "15", "endcolumn": "23", "code": "def tail(s):" },
    "899": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "79", "endcolumn": "1", "code": "    atomically when !q != []:" },
    "807": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "53", "column": "19", "endline": "53", "endcolumn": "22", "code": "            !lk = True" },
    "767": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "50", "column": "27", "endline": "50", "endcolumn": "27", "code": "            !c = bag.add(!c, ctx)" },
    "474": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "45", "column": "16", "endline": "45", "endcolumn": "18", "code": "        result[elt] += 1" },
    "801": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "54", "endcolumn": "1", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "629": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "21", "code": "    atomically !p = v" },
    "356": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "code": "            result[v] += 1" },
    "472": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "44", "column": "5", "endline": "44", "endcolumn": "6", "code": "    if elt in result:" },
    "45": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "code": "    result = s[0]" },
    "351": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "10", "column": "9", "endline": "10", "endcolumn": "10", "code": "        if v in result:" },
    "1001": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "18", "column": "17", "endline": "18", "endcolumn": "17", "code": "    spawn diner(i)" },
    "204": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "800": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "1", "code": "" },
    "124": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "code": "    result = [ v for v in a ]" },
    "968": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "10", "column": "22", "endline": "10", "endcolumn": "26", "code": "            acquire(?forks[left])" },
    "473": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "14", "code": "        result[elt] += 1" },
    "133": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "code": "def values(d):" },
    "764": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "50", "column": "14", "endline": "50", "endcolumn": "14", "code": "            !c = bag.add(!c, ctx)" },
    "89": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "3", "code": "def set(a):" },
    "911": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "79", "endcolumn": "1", "code": "    atomically when !q != []:" },
    "150": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "214": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "49", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "18": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "441": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "35", "column": "18", "endline": "35", "endcolumn": "20", "code": "    assert bg != {:}" },
    "522": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "57", "endcolumn": "44", "code": "def remove(bg, elt):" },
    "518": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "55", "column": "20", "endline": "55", "endcolumn": "22", "code": "        del result[elt]" },
    "100": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "790": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "69": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "15", "endcolumn": "23", "code": "def tail(s):" },
    "431": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "12", "code": "    result = min(keys(bg))" },
    "900": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "79", "endcolumn": "1", "code": "    atomically when !q != []:" },
    "740": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "22", "code": "    result = bag.empty()" },
    "617": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "3", "code": "def atomic_load(p):" },
    "743": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "43", "column": "5", "endline": "43", "endcolumn": "12", "code": "    result = bag.empty()" },
    "96": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "950": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "7", "code": "forks = [Lock(),] * N" },
    "733": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "code": "    result = !binsema" },
    "730": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "41", "endcolumn": "1", "code": "def held(binsema):" },
    "416": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "29", "endcolumn": "3", "code": "def bmin(bg):" },
    "81": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "code": "        result += v" },
    "79": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "21", "endcolumn": "46", "code": "    for v in a:" },
    "793": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "71", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "616": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "71", "endcolumn": "1", "code": "def combinations(bg, k):" },
    "430": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "31", "column": "14", "endline": "31", "endcolumn": "26", "code": "    result = min(keys(bg))" },
    "217": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "719": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "36", "column": "16", "endline": "36", "endcolumn": "23", "code": "        assert !binsema" },
    "25": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "957": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "32", "endline": "8", "endcolumn": "36", "code": "    let left, right = (which, (which + 1) % N):" },
    "91": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "583": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "572": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "44", "endline": "68", "endcolumn": "57", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "614": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "30", "endline": "70", "endcolumn": "53", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "582": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "69", "endline": "69", "endcolumn": "73", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "169": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "17", "code": "    result = [ (k, v) for k:v in d ]" },
    "732": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "code": "    result = !binsema" },
    "907": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "79", "column": "1", "endline": "79", "endcolumn": "1", "code": "" },
    "491": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "49", "column": "1", "endline": "49", "endcolumn": "27", "code": "builtin remove \"bag$remove\"" },
    "523": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "58", "endcolumn": "3", "code": "def combinations(bg, k):" },
    "517": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "55", "column": "20", "endline": "55", "endcolumn": "22", "code": "        del result[elt]" },
    "906": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "79", "endcolumn": "1", "code": "    atomically when !q != []:" },
    "490": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "49", "column": "9", "endline": "49", "endcolumn": "14", "code": "builtin remove \"bag$remove\"" },
    "716": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "code": "        assert !binsema" },
    "573": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "17", "endline": "71", "endcolumn": "1", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "956": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "32", "endline": "8", "endcolumn": "36", "code": "    let left, right = (which, (which + 1) % N):" },
    "440": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "35", "column": "12", "endline": "35", "endcolumn": "13", "code": "    assert bg != {:}" },
    "164": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "35": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "code": "    result = s + [e,]" },
    "379": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "6", "code": "    if elt in bg:" },
    "220": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "49": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "17", "code": "    result = s[0]" },
    "248": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "106": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "669": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "20", "endcolumn": "1", "code": "    atomically:" },
    "389": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "code": "        result = 0" },
    "298": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "25", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "270": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "49", "column": "20", "endline": "49", "endcolumn": "23", "code": "    result = qsort(list(d))" },
    "216": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "581": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "73", "endline": "69", "endcolumn": "73", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "611": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "70", "column": "52", "endline": "70", "endcolumn": "52", "code": "                                | combinations(tl, k)" },
    "329": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "20", "endline": "5", "endcolumn": "20", "code": "    result = { elt:1 for elt in s }" },
    "742": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "24", "code": "    result = bag.empty()" },
    "78": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "21", "endcolumn": "46", "code": "    for v in a:" },
    "731": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "code": "    result = !binsema" },
    "415": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "23", "code": "builtin bmin \"bag$bmin\"" },
    "152": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "964": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "9", "column": "24", "endline": "9", "endcolumn": "34", "code": "        while choose({ False, True }):" },
    "792": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "69", "endline": "52", "endcolumn": "71", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "919": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "78", "column": "25", "endline": "78", "endcolumn": "25", "code": "        !q = list.tail(!q)" },
    "102": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "code": "    result = { v for v in a }" },
    "951": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "3", "code": "def diner(which):" },
    "714": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "38", "endcolumn": "5", "code": "def release(binsema):" },
    "643": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "12", "column": "9", "endline": "12", "endcolumn": "16", "code": "        result = !lk" },
    "492": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "3", "code": "def remove(bg, elt):" },
    "717": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "code": "        assert !binsema" },
    "395": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "27", "endcolumn": "1", "code": "def size(bg):" },
    "692": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "28", "column": "5", "endline": "28", "endcolumn": "12", "code": "    result = !binsema" },
    "433": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "12", "code": "builtin bmax \"bag$bmax\"" },
    "901": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "79", "endcolumn": "1", "code": "    atomically when !q != []:" },
    "571": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "633": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "21", "code": "    atomically !p = v" },
    "442": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "35", "column": "12", "endline": "35", "endcolumn": "20", "code": "    assert bg != {:}" },
    "345": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "14", "endcolumn": "1", "code": "    for v in a:" },
    "642": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "12", "column": "18", "endline": "12", "endcolumn": "20", "code": "        result = !lk" },
    "443": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "code": "    assert bg != {:}" },
    "156": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "code": "def items(d):" },
    "432": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "32", "endcolumn": "1", "code": "def bmin(bg):" },
    "316": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "6", "endcolumn": "1", "code": "def fromSet(s):" },
    "312": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "2", "column": "14", "endline": "2", "endcolumn": "16", "code": "    result = {:}" },
    "68": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "5", "endline": "13", "endcolumn": "12", "code": "    result = subseq(s, 1, len(s))" },
    "632": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "21", "code": "    atomically !p = v" },
    "493": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "57", "endcolumn": "44", "code": "def remove(bg, elt):" },
    "280": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "53", "column": "17", "endline": "53", "endcolumn": "17", "code": "    let n = len(d):" },
    "693": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "29", "endcolumn": "1", "code": "def acquired(binsema):" },
    "238": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "46", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "521": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "57", "endcolumn": "44", "code": "def remove(bg, elt):" },
    "978": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "34", "code": "            acquire(?forks[right])" },
    "173": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "20", "endline": "35", "endcolumn": "20", "code": "    result = [ (k, v) for k:v in d ]" },
    "107": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "80": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "code": "        result += v" },
    "610": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "70", "column": "52", "endline": "70", "endcolumn": "52", "code": "                                | combinations(tl, k)" },
    "988": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "14", "column": "22", "endline": "14", "endcolumn": "33", "code": "            release(?forks[right])" },
    "580": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "69", "endline": "69", "endcolumn": "69", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "157": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "37", "endcolumn": "22", "code": "def items(d):" },
    "123": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "code": "    result = [ v for v in a ]" },
    "151": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "668": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "20", "endcolumn": "1", "code": "    atomically:" },
    "902": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "22", "endline": "76", "endcolumn": "22", "code": "    atomically when !q != []:" },
    "570": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "68", "column": "55", "endline": "68", "endcolumn": "56", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "335": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "249": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "215": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "45", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "928": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "41", "code": "    atomically !q = list.append(!q, item)" },
    "183": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "37", "endcolumn": "22", "code": "def items(d):" },
    "520": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "55", "column": "9", "endline": "55", "endcolumn": "23", "code": "        del result[elt]" },
    "311": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "2", "column": "14", "endline": "2", "endcolumn": "16", "code": "    result = {:}" },
    "239": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "213": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "45", "endline": "43", "endcolumn": "45", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "417": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "32", "endcolumn": "1", "code": "def bmin(bg):" },
    "434": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "33", "column": "1", "endline": "33", "endcolumn": "23", "code": "builtin bmax \"bag$bmax\"" },
    "281": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "53", "column": "13", "endline": "53", "endcolumn": "18", "code": "    let n = len(d):" },
    "394": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "3", "code": "def size(bg):" },
    "347": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "14", "endcolumn": "1", "code": "    for v in a:" },
    "313": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "2", "column": "5", "endline": "2", "endcolumn": "12", "code": "    result = {:}" },
    "308": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "55", "endcolumn": "1", "code": "def reversed(d):" },
    "791": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "64", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "952": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "7", "column": "1", "endline": "16", "endcolumn": "1", "code": "def diner(which):" },
    "444": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "code": "    assert bg != {:}" },
    "271": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "49", "column": "25", "endline": "49", "endcolumn": "25", "code": "    result = qsort(list(d))" },
    "34": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "code": "    result = s + [e,]" },
    "358": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "11", "column": "26", "endline": "11", "endcolumn": "26", "code": "            result[v] += 1" },
    "344": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "code": "    for v in a:" },
    "337": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "6", "endcolumn": "1", "code": "def fromSet(s):" },
    "741": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "24", "code": "    result = bag.empty()" },
    "953": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "24", "endline": "8", "endcolumn": "45", "code": "    let left, right = (which, (which + 1) % N):" },
    "101": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "code": "    result = { v for v in a }" },
    "24": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "37", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "19": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "18", "endline": "3", "endcolumn": "18", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "334": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "221": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "90": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "25", "endcolumn": "35", "code": "def set(a):" },
    "903": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "76", "column": "21", "endline": "76", "endcolumn": "22", "code": "    atomically when !q != []:" },
    "165": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "397": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "24", "column": "14", "endline": "24", "endcolumn": "14", "code": "    result = 0" },
    "310": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "3", "endcolumn": "1", "code": "def empty():" },
    "212": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "48": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "9", "column": "16", "endline": "9", "endcolumn": "16", "code": "    result = s[0]" },
    "876": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "16", "code": "        !sema -= 1" },
    "138": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "613": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "70", "column": "35", "endline": "70", "endcolumn": "53", "code": "                                | combinations(tl, k)" },
    "794": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "35", "endline": "52", "endcolumn": "37", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "272": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "49", "column": "25", "endline": "49", "endcolumn": "25", "code": "    result = qsort(list(d))" },
    "826": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "982": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "13", "column": "22", "endline": "13", "endcolumn": "32", "code": "            release(?forks[left])" },
    "413": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "27", "endcolumn": "1", "code": "def size(bg):" },
    "282": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "53", "column": "5", "endline": "55", "endcolumn": "1", "code": "    let n = len(d):" },
    "734": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "40", "column": "14", "endline": "40", "endcolumn": "21", "code": "    result = !binsema" },
    "322": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "166": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "148": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "27": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "886": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "70", "column": "25", "endline": "70", "endcolumn": "25", "code": "    atomically !sema += 1" },
    "744": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "44", "endcolumn": "1", "code": "def Condition():" },
    "690": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "code": "    result = !binsema" },
    "222": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "198": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "35", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "965": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "9", "column": "15", "endline": "9", "endcolumn": "37", "code": "        while choose({ False, True }):" },
    "728": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "38", "endcolumn": "5", "code": "def release(binsema):" },
    "685": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "26", "endcolumn": "1", "code": "def Lock():" },
    "382": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "18", "column": "21", "endline": "18", "endcolumn": "23", "code": "        result = bg[elt]" },
    "84": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "code": "        result += v" },
    "1004": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "19", "column": "1", "endline": "19", "endcolumn": "1", "code": "" },
    "210": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "862": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "29", "endline": "66", "endcolumn": "29", "code": "    atomically when !sema > 0:" },
    "675": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "code": "    result = acquired" },
    "514": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "23", "code": "    if result[elt] <= 0:" },
    "299": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "372": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "39", "code": "builtin multiplicity \"bag$multiplicity\"" },
    "515": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "54", "column": "5", "endline": "54", "endcolumn": "6", "code": "    if result[elt] <= 0:" },
    "551": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "65", "column": "23", "endline": "65", "endcolumn": "23", "code": "            elif k == n:" },
    "95": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "788": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "625": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "26", "code": "    atomically result = !p" },
    "37": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "19", "code": "    result = s + [e,]" },
    "778": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "54", "endcolumn": "1", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "737": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "3", "code": "def Condition():" },
    "827": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "29", "endline": "57", "endcolumn": "39", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "26": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "285": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "38", "endline": "54", "endcolumn": "38", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "223": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "49", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "795": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "25", "endline": "52", "endcolumn": "72", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "747": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "46", "column": "15", "endline": "46", "endcolumn": "15", "code": "    var cnt = 0" },
    "323": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "877": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "68", "endcolumn": "1", "code": "    atomically when !sema > 0:" },
    "501": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "52", "column": "5", "endline": "52", "endcolumn": "6", "code": "    if elt in result:" },
    "414": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "28", "column": "9", "endline": "28", "endcolumn": "12", "code": "builtin bmin \"bag$bmin\"" },
    "273": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "49", "column": "20", "endline": "49", "endcolumn": "26", "code": "    result = qsort(list(d))" },
    "797": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "1", "code": "" },
    "412": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "27", "endcolumn": "1", "code": "def size(bg):" },
    "981": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "13", "column": "28", "endline": "13", "endcolumn": "31", "code": "            release(?forks[left])" },
    "373": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "3", "code": "def multiplicity(bg, elt):" },
    "105": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "283": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "983": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "33", "code": "            release(?forks[left])" },
    "971": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "10", "column": "13", "endline": "10", "endcolumn": "33", "code": "            acquire(?forks[left])" },
    "383": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "18", "column": "21", "endline": "18", "endcolumn": "23", "code": "        result = bg[elt]" },
    "155": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "33", "endcolumn": "23", "code": "def values(d):" },
    "973": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "19", "code": "            acquire(?forks[right])" },
    "921": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "78", "column": "24", "endline": "78", "endcolumn": "25", "code": "        !q = list.tail(!q)" },
    "869": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "68", "endcolumn": "1", "code": "    atomically when !sema > 0:" },
    "154": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "12", "code": "    result = [ v for _:v in d ]" },
    "923": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "78", "column": "9", "endline": "78", "endcolumn": "10", "code": "        !q = list.tail(!q)" },
    "640": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "14", "endcolumn": "1", "code": "    atomically:" },
    "550": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "65", "column": "23", "endline": "65", "endcolumn": "23", "code": "            elif k == n:" },
    "516": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "55", "column": "13", "endline": "55", "endcolumn": "18", "code": "        del result[elt]" },
    "94": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "104": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "631": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "8", "column": "17", "endline": "8", "endcolumn": "17", "code": "    atomically !p = v" },
    "630": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "8", "column": "17", "endline": "8", "endcolumn": "17", "code": "    atomically !p = v" },
    "500": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "52", "column": "8", "endline": "52", "endcolumn": "20", "code": "    if elt in result:" },
    "972": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "10", "column": "13", "endline": "10", "endcolumn": "33", "code": "            acquire(?forks[left])" },
    "380": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "19", "code": "        result = bg[elt]" },
    "225": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "735": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "40", "column": "5", "endline": "40", "endcolumn": "12", "code": "    result = !binsema" },
    "641": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "12", "column": "19", "endline": "12", "endcolumn": "20", "code": "        result = !lk" },
    "59": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "21", "code": "    result = subseq(s, 1, len(s))" },
    "868": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "68", "column": "1", "endline": "68", "endcolumn": "1", "code": "" },
    "922": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "78", "column": "14", "endline": "78", "endcolumn": "26", "code": "        !q = list.tail(!q)" },
    "691": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "28", "column": "14", "endline": "28", "endcolumn": "21", "code": "    result = !binsema" },
    "275": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "49", "column": "5", "endline": "49", "endcolumn": "12", "code": "    result = qsort(list(d))" },
    "745": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "45", "endcolumn": "3", "code": "def wait(c, lk):" },
    "502": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "14", "code": "        result[elt] -= 1" },
    "970": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "10", "column": "22", "endline": "10", "endcolumn": "32", "code": "            acquire(?forks[left])" },
    "696": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "33", "endcolumn": "1", "code": "    atomically when not !binsema:" },
    "820": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "17", "code": "    atomically if !c != bag.empty():" },
    "284": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "980": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "13", "column": "22", "endline": "13", "endcolumn": "26", "code": "            release(?forks[left])" },
    "884": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "code": "    atomically !sema += 1" },
    "552": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "65", "column": "18", "endline": "65", "endcolumn": "23", "code": "            elif k == n:" },
    "97": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "870": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "67", "column": "10", "endline": "67", "endcolumn": "13", "code": "        !sema -= 1" },
    "86": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "21", "column": "46", "endline": "21", "endcolumn": "46", "code": "# convert list (or values of a dict) to a set" },
    "746": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "54", "endcolumn": "1", "code": "def wait(c, lk):" },
    "636": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "9", "endcolumn": "1", "code": "def atomic_store(p, v):" },
    "880": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "71", "endcolumn": "5", "code": "def V(sema):" },
    "36": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "20", "code": "    result = s + [e,]" },
    "646": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "13", "column": "15", "endline": "13", "endcolumn": "18", "code": "        !lk = True" },
    "469": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "44", "column": "8", "endline": "44", "endcolumn": "10", "code": "    if elt in result:" },
    "736": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "41", "endcolumn": "1", "code": "def held(binsema):" },
    "274": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "27", "code": "    result = qsort(list(d))" },
    "861": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "21", "endline": "66", "endcolumn": "25", "code": "    atomically when !sema > 0:" },
    "796": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "54", "endcolumn": "1", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "887": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "code": "    atomically !sema += 1" },
    "637": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "3", "code": "def tas(lk):" },
    "411": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "1", "code": "" },
    "920": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "78", "column": "25", "endline": "78", "endcolumn": "25", "code": "        !q = list.tail(!q)" },
    "647": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "13", "column": "9", "endline": "13", "endcolumn": "11", "code": "        !lk = True" },
    "519": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "55", "column": "13", "endline": "55", "endcolumn": "23", "code": "        del result[elt]" },
    "553": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "65", "column": "13", "endline": "65", "endcolumn": "16", "code": "            elif k == n:" },
    "927": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "82", "endcolumn": "1", "code": "def put(q, item):" },
    "885": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "code": "    atomically !sema += 1" },
    "87": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "21", "endcolumn": "46", "code": "def sum(a):" },
    "977": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "34", "code": "            acquire(?forks[right])" },
    "875": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "code": "        !sema -= 1" },
    "863": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "21", "endline": "66", "endcolumn": "29", "code": "    atomically when !sema > 0:" },
    "825": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "26", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "410": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "17", "code": "        result += c" },
    "503": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "53", "column": "16", "endline": "53", "endcolumn": "18", "code": "        result[elt] -= 1" },
    "31": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "3", "code": "def append(s, e):" },
    "799": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "1", "code": "" },
    "21": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "19", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "874": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "67", "column": "18", "endline": "67", "endcolumn": "18", "code": "        !sema -= 1" },
    "749": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "24", "code": "    let (), ctx = save():" },
    "824": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "57", "column": "26", "endline": "57", "endcolumn": "26", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "739": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "22", "code": "    result = bag.empty()" },
    "468": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "43", "column": "5", "endline": "43", "endcolumn": "12", "code": "    result = bg" },
    "386": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "17", "column": "5", "endline": "21", "endcolumn": "1", "code": "    if elt in bg:" },
    "926": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "80", "endcolumn": "3", "code": "def put(q, item):" },
    "644": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "13", "column": "10", "endline": "13", "endcolumn": "11", "code": "        !lk = True" },
    "485": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "47", "column": "16", "endline": "47", "endcolumn": "18", "code": "        result[elt] = 1" },
    "727": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "35", "column": "5", "endline": "38", "endcolumn": "5", "code": "    atomically:" },
    "393": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "23", "code": "builtin size \"bag$size\"" },
    "597": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "41", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "326": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "662": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "19", "column": "14", "endline": "19", "endcolumn": "14", "code": "            !p = new" },
    "159": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "787": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "58", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "250": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "42", "column": "9", "endline": "47", "endcolumn": "23", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "986": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "14", "column": "22", "endline": "14", "endcolumn": "26", "code": "            release(?forks[right])" },
    "16": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "537": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "62", "column": "17", "endline": "62", "endcolumn": "24", "code": "        let n = size(bg):" },
    "276": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "51", "endcolumn": "25", "code": "def sorted(d):" },
    "529": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "6", "code": "    if k == 0:" },
    "499": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "20", "code": "    if elt in result:" },
    "176": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "658": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "17", "column": "18", "endline": "17", "endcolumn": "26", "code": "        result = !p == old" },
    "784": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "55", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "589": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "319": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "663": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "19", "column": "14", "endline": "19", "endcolumn": "14", "code": "            !p = new" },
    "425": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "code": "    assert bg != {:}" },
    "245": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "987": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "14", "column": "28", "endline": "14", "endcolumn": "32", "code": "            release(?forks[right])" },
    "144": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "671": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "21", "endcolumn": "3", "code": "def BinSema(acquired):" },
    "497": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "51", "column": "5", "endline": "51", "endcolumn": "12", "code": "    result = bg" },
    "277": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "52", "endcolumn": "3", "code": "def reversed(d):" },
    "365": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "21", "code": "            result[v] = 1" },
    "439": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "code": "    assert bg != {:}" },
    "251": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "26", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "390": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "20", "column": "9", "endline": "20", "endcolumn": "16", "code": "        result = 0" },
    "437": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "code": "    assert bg != {:}" },
    "486": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "19", "code": "        result[elt] = 1" },
    "381": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "19", "code": "        result = bg[elt]" },
    "670": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "20", "endcolumn": "1", "code": "def cas(p, old, new):" },
    "242": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "958": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "40", "endline": "8", "endcolumn": "40", "code": "    let left, right = (which, (which + 1) % N):" },
    "364": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "13", "column": "20", "endline": "13", "endcolumn": "20", "code": "            result[v] = 1" },
    "330": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "64": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "31", "endline": "13", "endcolumn": "31", "code": "    result = subseq(s, 1, len(s))" },
    "426": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "code": "    assert bg != {:}" },
    "332": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "44": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "10", "endcolumn": "1", "code": "def head(s):" },
    "872": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "code": "        !sema -= 1" },
    "145": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "939": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "21", "endline": "81", "endcolumn": "41", "code": "    atomically !q = list.append(!q, item)" },
    "843": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "60", "column": "21", "endline": "60", "endcolumn": "29", "code": "    atomically !c = bag.empty()" },
    "177": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "161": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "659": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "17", "column": "9", "endline": "17", "endcolumn": "16", "code": "        result = !p == old" },
    "498": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "52", "column": "8", "endline": "52", "endcolumn": "10", "code": "    if elt in result:" },
    "392": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "12", "code": "builtin size \"bag$size\"" },
    "999": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "18", "column": "11", "endline": "18", "endcolumn": "15", "code": "    spawn diner(i)" },
    "162": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "871": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "67", "column": "10", "endline": "67", "endcolumn": "13", "code": "        !sema -= 1" },
    "170": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "17", "code": "    result = [ (k, v) for k:v in d ]" },
    "333": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "74": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "12", "code": "    result = 0" },
    "321": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "243": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "496": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "code": "    result = bg" },
    "859": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "68", "endcolumn": "1", "code": "    atomically when !sema > 0:" },
    "320": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "391": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "21", "endcolumn": "1", "code": "def multiplicity(bg, elt):" },
    "595": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "39", "endline": "69", "endcolumn": "40", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "785": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "677": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "23", "endcolumn": "1", "code": "def BinSema(acquired):" },
    "605": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "70", "column": "35", "endline": "70", "endcolumn": "46", "code": "                                | combinations(tl, k)" },
    "945": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "5", "column": "14", "endline": "5", "endcolumn": "15", "code": "forks = [Lock(),] * N" },
    "367": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "21", "code": "            result[v] = 1" },
    "436": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "37", "endcolumn": "1", "code": "def bmax(bg):" },
    "33": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "code": "    result = s + [e,]" },
    "535": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "62", "column": "17", "endline": "62", "endcolumn": "20", "code": "        let n = size(bg):" },
    "488": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "19", "code": "        result[elt] = 1" },
    "538": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "62", "column": "9", "endline": "71", "endcolumn": "1", "code": "        let n = size(bg):" },
    "244": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "66": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "code": "    result = subseq(s, 1, len(s))" },
    "331": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "167": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "76": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "code": "    for v in a:" },
    "14": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "729": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "3", "code": "def held(binsema):" },
    "160": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "598": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "118": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "code": "    result = [ v for v in a ]" },
    "873": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "code": "        !sema -= 1" },
    "23": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "725": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "37", "column": "20", "endline": "37", "endcolumn": "24", "code": "        !binsema = False" },
    "676": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "22", "column": "5", "endline": "22", "endcolumn": "12", "code": "    result = acquired" },
    "724": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "37", "column": "10", "endline": "37", "endcolumn": "16", "code": "        !binsema = False" },
    "596": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "149": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "534": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "59", "column": "5", "endline": "71", "endcolumn": "1", "code": "    if k == 0:" },
    "612": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "code": "                                | combinations(tl, k)" },
    "674": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "code": "    result = acquired" },
    "758": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "37", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "428": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "31", "column": "23", "endline": "31", "endcolumn": "24", "code": "    result = min(keys(bg))" },
    "726": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "37", "column": "9", "endline": "37", "endcolumn": "16", "code": "        !binsema = False" },
    "594": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1006": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "1", "column": "1", "endline": "19", "endcolumn": "1", "code": "from synch import Lock, acquire, release" },
    "858": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "68", "endcolumn": "1", "code": "    atomically when !sema > 0:" },
    "489": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "48", "endcolumn": "1", "code": "def add(bg, elt):" },
    "396": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "24", "column": "14", "endline": "24", "endcolumn": "14", "code": "    result = 0" },
    "58": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "code": "    result = subseq(s, 1, len(s))" },
    "789": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "61", "endline": "52", "endcolumn": "63", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "786": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "58", "endline": "52", "endcolumn": "58", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "309": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "3", "code": "def empty():" },
    "435": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "code": "def bmax(bg):" },
    "429": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "31", "column": "18", "endline": "31", "endcolumn": "25", "code": "    result = min(keys(bg))" },
    "247": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "246": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "51", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "46": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "code": "    result = s[0]" },
    "944": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "5", "column": "10", "endline": "5", "endcolumn": "13", "code": "forks = [Lock(),] * N" },
    "536": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "62", "column": "22", "endline": "62", "endcolumn": "23", "code": "        let n = size(bg):" },
    "495": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "code": "    result = bg" },
    "989": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "14", "column": "13", "endline": "14", "endcolumn": "34", "code": "            release(?forks[right])" },
    "848": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "61", "endcolumn": "1", "code": "def notifyAll(c):" },
    "314": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "3", "endcolumn": "1", "code": "def empty():" },
    "409": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "code": "        result += c" },
    "783": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "25", "endline": "52", "endcolumn": "72", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "526": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "8", "code": "    if k == 0:" },
    "666": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "19", "column": "13", "endline": "19", "endcolumn": "14", "code": "            !p = new" },
    "841": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "60", "column": "17", "endline": "60", "endcolumn": "17", "code": "    atomically !c = bag.empty()" },
    "649": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "14", "endcolumn": "1", "code": "def tas(lk):" },
    "494": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "code": "    result = bg" },
    "147": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "code": "    result = [ v for _:v in d ]" },
    "586": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "855": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "64", "endcolumn": "1", "code": "def Semaphore(cnt):" },
    "300": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "336": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "5", "endline": "5", "endcolumn": "12", "code": "    result = { elt:1 for elt in s }" },
    "303": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "93": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "929": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "81", "column": "17", "endline": "81", "endcolumn": "17", "code": "    atomically !q = list.append(!q, item)" },
    "1002": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "18", "code": "    spawn diner(i)" },
    "140": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "241": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "172": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "20", "endline": "35", "endcolumn": "20", "code": "    result = [ (k, v) for k:v in d ]" },
    "954": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "24", "endline": "8", "endcolumn": "28", "code": "    let left, right = (which, (which + 1) % N):" },
    "481": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "22", "code": "        result[elt] += 1" },
    "153": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "782": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "26", "endline": "52", "endcolumn": "32", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "525": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "8", "code": "    if k == 0:" },
    "240": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "317": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "code": "    result = { elt:1 for elt in s }" },
    "408": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "26", "column": "19", "endline": "26", "endcolumn": "19", "code": "        result += c" },
    "388": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "code": "        result = 0" },
    "315": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "3", "code": "def fromSet(s):" },
    "853": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "code": "    result = cnt" },
    "780": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "31", "endline": "52", "endcolumn": "32", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "722": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "code": "        assert !binsema" },
    "171": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "code": "    result = [ (k, v) for k:v in d ]" },
    "842": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "60", "column": "17", "endline": "60", "endcolumn": "17", "code": "    atomically !c = bag.empty()" },
    "615": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "21", "endline": "69", "endcolumn": "28", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "539": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "63", "column": "16", "endline": "63", "endcolumn": "16", "code": "            if k > n:" },
    "28": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "955": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "8", "column": "24", "endline": "8", "endcolumn": "45", "code": "    let left, right = (which, (which + 1) % N):" },
    "720": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "code": "        assert !binsema" },
    "672": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "23", "endcolumn": "1", "code": "def BinSema(acquired):" },
    "168": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "code": "    result = [ (k, v) for k:v in d ]" },
    "854": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "63", "column": "5", "endline": "63", "endcolumn": "12", "code": "    result = cnt" },
    "599": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "83": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "code": "        result += v" },
    "487": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "23", "code": "        result[elt] = 1" },
    "723": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "37", "column": "10", "endline": "37", "endcolumn": "16", "code": "        !binsema = False" },
    "673": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "code": "    result = acquired" },
    "648": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "14", "endcolumn": "1", "code": "    atomically:" },
    "146": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "code": "    result = [ v for _:v in d ]" },
    "427": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "31", "column": "23", "endline": "31", "endcolumn": "24", "code": "    result = min(keys(bg))" },
    "328": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "code": "    result = { elt:1 for elt in s }" },
    "305": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "88": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "21", "endcolumn": "46", "code": "def sum(a):" },
    "1000": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/code/Diners.hny", "line": "18", "column": "17", "endline": "18", "endcolumn": "17", "code": "    spawn diner(i)" },
    "141": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "588": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "524": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "71", "endcolumn": "1", "code": "def combinations(bg, k):" },
    "852": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "code": "    result = cnt" },
    "302": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "38": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "19", "code": "    result = s + [e,]" },
    "660": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "18", "column": "12", "endline": "18", "endcolumn": "17", "code": "        if result:" },
    "257": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "42", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "584": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "52", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "438": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "code": "    assert bg != {:}" },
    "480": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "code": "        result[elt] += 1" },
    "721": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "code": "        assert !binsema" },
    "339": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "14", "endcolumn": "1", "code": "def fromList(a):" },
    "252": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "28", "endline": "45", "endcolumn": "32", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "175": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "585": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "253": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "28", "endline": "45", "endcolumn": "32", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "678": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "24", "endcolumn": "3", "code": "def Lock():" },
    "420": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "code": "    assert bg != {:}" },
    "856": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "65", "endcolumn": "3", "code": "def P(sema):" },
    "781": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "52", "column": "30", "endline": "52", "endcolumn": "32", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "664": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "19", "column": "18", "endline": "19", "endcolumn": "20", "code": "            !p = new" },
    "256": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "42", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "179": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "code": "    result = [ (k, v) for k:v in d ]" },
    "54": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "3", "code": "def tail(s):" },
    "587": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "484": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "47", "column": "16", "endline": "47", "endcolumn": "18", "code": "        result[elt] = 1" },
    "851": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "code": "    result = cnt" },
    "679": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "26", "endcolumn": "1", "code": "def Lock():" },
    "98": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "code": "    result = { v for v in a }" },
    "174": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "code": "    result = [ (k, v) for k:v in d ]" },
    "661": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "18", "column": "9", "endline": "18", "endcolumn": "10", "code": "        if result:" },
    "142": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "code": "    result = [ v for _:v in d ]" },
    "849": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "62", "endcolumn": "3", "code": "def Semaphore(cnt):" },
    "527": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "59", "column": "13", "endline": "59", "endcolumn": "13", "code": "    if k == 0:" },
    "424": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "code": "    assert bg != {:}" },
    "421": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "30", "column": "12", "endline": "30", "endcolumn": "13", "code": "    assert bg != {:}" },
    "667": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "20", "endcolumn": "1", "code": "    atomically:" },
    "399": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "25", "column": "16", "endline": "25", "endcolumn": "17", "code": "    for _:c in bg:" },
    "857": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "68", "endcolumn": "1", "code": "def P(sema):" },
    "482": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "44", "column": "5", "endline": "48", "endcolumn": "1", "code": "    if elt in result:" },
    "301": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "43", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "255": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "43", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "254": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "33", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "423": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "30", "column": "12", "endline": "30", "endcolumn": "20", "code": "    assert bg != {:}" },
    "422": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "30", "column": "18", "endline": "30", "endcolumn": "20", "code": "    assert bg != {:}" },
    "528": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "13", "code": "    if k == 0:" },
    "306": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "850": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "64", "endcolumn": "1", "code": "def Semaphore(cnt):" },
    "483": { "file": "/Users/lirenyu/Downloads/harmony-gui/harmony-gui/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "14", "code": "        result[elt] = 1" }
  }
}

;
var boxSize = 10;
var currentTime = 0;
var totalTime = 0;
var microsteps = [];
var megasteps = []
var threads = [];
var curMegaStep = 0;
var mestable = document.getElementById("mestable");
var threadtable = document.getElementById("threadtable");
var coderow = document.getElementById("coderow");
var container = document.getElementById('table-scroll');
var currOffset = 0;
var currCloc = null;

function drawTimeLine(mes) {
  var c = mes.canvas.getContext("2d");
  c.beginPath();
  c.clearRect(0, 0, mes.canvas.width, mes.canvas.height);
  var t = mes.startTime;
  var yboxes = Math.floor((mes.nsteps + 29) / 30);
  var nsteps = mes.nsteps;
  for (var y = 0; y < yboxes; y++) {
    var xboxes = nsteps > 30 ? 30 : nsteps;
    for (var x = 0; x < xboxes; x++) {
      c.fillStyle = t < currentTime ? "orange" : "white";
      c.fillRect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.rect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.stroke();
      t += 1;
    }
    nsteps -= xboxes;
  }
}

function currentMegaStep() {
  if (currentTime == totalTime) {
    return microsteps[currentTime - 1].mesidx;
  }
  return microsteps[currentTime].mesidx;
}

function json_string_list(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "[ " + result + " ]";
}

function json_string_set(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "{ " + result + " }";
}

function json_string_dict(obj) {
  if (obj.length == 0) {
    return "{:}"
  }

  var islist = true;
  for (var i = 0; i < obj.length; i++) {
    if (obj[i].key.type != "int" || obj[i].key.value != i.toString()) {
      islist = false;
      break;
    }
  }

  var result = "";
  if (islist) {
    for (var i = 0; i < obj.length; i++) {
      if (i != 0) {
        result += ", ";
      }
      result += json_string(obj[i].value);
    }
    if (obj.length == 1) {
      result += ",";
    }
    return "[" + result + "]";
  }

  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    var kv = obj[i];
    var k = json_string(kv.key);
    var v = json_string(kv.value);
    result += k + ": " + v;
  }
  return "{ " + result + " }";
}

function json_string_address(obj) {
  if (obj.length == 0) {
    return "None";
  }
  var result = "?" + obj[0].value;
  for (var i = 1; i < obj.length; i++) {
    result += "[" + json_string(obj[i]) + "]";
  }
  return result;
}

function json_string_context(obj) {
  var pc = json_string(obj.pc);
  return "CTX(" + pc + ")";
}

function json_string(obj) {
  switch (obj.type) {
  case "bool": case "int":
    return obj.value;
    break;
  case "atom":
    return '"' + obj.value + '"';
  case "set":
    return json_string_set(obj.value);
  case "list":
    return json_string_list(obj.value);
  case "dict":
    return json_string_dict(obj.value);
  case "pc":
    return "PC(" + obj.value + ")"
  case "address":
    return json_string_address(obj.value);
  case "context":
    return json_string_context(obj.value);
  default:
    return JSON.stringify(obj);
  }
}

function stringify_vars(obj) {
  var result = "";
  for (var k in obj) {
    if (k == "result" && obj[k].type == "address" && obj[k].value.length == 0) {
      continue;
    }
    if (result != "") {
      result += ", ";
    }
    result += k + ": " + json_string(obj[k]);
  }
  return result;
}

function convert_var(obj) {
  if (obj.type != "dict") {
    return json_string(obj);
  }
  if (obj.value.length == 0) {
    return "";
  }
  var result = {};
  for (var i = 0; i < obj.value.length; i++) {
    var kv = obj.value[i];
    var k = json_string(kv.key);      // TODO.  convert_var???
    result[k] = convert_var(kv.value);
  }
  return result;
}

function convert_vars(obj) {
  var result = {};
  for (var k in obj) {
    result[k] = convert_var(obj[k]);
  }
  return result;
}

function stackTrace(tid, trace, failure) {
  var table = threads[tid].tracetable;
  table.innerHTML = "";
  if (trace.length == 0) {
    var row = table.insertRow();
    var mcell = row.insertCell();
    mcell.innerHTML = threads[tid].name;
  }
  for (var i = 0; i < trace.length; i++) {
    var row = table.insertRow();

    var mcell = row.insertCell();
    mcell.innerHTML = trace[i].method;
    switch (trace[i].calltype) {
    case "process":
        mcell.style.color = "blue";
        break;
    case "normal":
        mcell.style.color = "black";
        break;
    case "interrupt":
        mcell.style.color = "orange";
        break;
    default:
        mcell.style.color = "red";
    }

    var vcell = row.insertCell();
    var vtext = document.createTextNode(stringify_vars(trace[i].vars));
    vcell.appendChild(vtext);
  }
  if (failure != null) {
    var row = table.insertRow();
    var fcell = row.insertCell();
    fcell.innerHTML = failure;
    fcell.colSpan = 2;
    fcell.style.color = "red";
  }
}

function addToLog(step, entry) {
  var table = megasteps[step].log;
  var row = table.insertRow();
  var mcell = row.insertCell();
  mcell.innerHTML = entry;
}

function handleClick(e, mesIdx) {
  var x = Math.floor(e.offsetX / boxSize);
  var y = Math.floor(e.offsetY / boxSize);
  currentTime = megasteps[mesIdx].startTime + y*30 + x + 1;
  run_microsteps()
}

var noloc = { file: "", line: "", code: "" };

function getCode(pc) {
  var locs = state.locations;
  while (pc >= 0) {
    s = "" + pc;
    if (locs.hasOwnProperty(s)) {
      return locs[s];
    }
    pc--;
  }
  return noloc;
}

function handleKeyPress(e) {
  switch (e.key) {
    case '0':
      currentTime = 0;
      run_microsteps();
      break;
    case 'ArrowLeft':
      if (currentTime > 0) {
        currentTime -= 1;
      }
      run_microsteps();
      break;
    case 'ArrowRight':
      if (currentTime < totalTime) {
        currentTime += 1;
      }
      run_microsteps();
      break;
    case 'ArrowUp':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      if (currentTime == mes.startTime && mesidx > 0) {
          mes = megasteps[mesidx - 1];
      }
      currentTime = mes.startTime;
      run_microsteps();
      break;
    case 'ArrowDown':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      currentTime = mes.startTime + mes.nsteps;
      if (currentTime > totalTime) {
        currentTime = totalTime;
      }
      run_microsteps();
      break;
    case 'Enter':
      if (currentTime < totalTime) {
        var cloc = getCode(microsteps[currentTime].pc);
        while (++currentTime < totalTime) {
          var nloc = getCode(microsteps[currentTime].pc);
          if (nloc.file != cloc.file || nloc.line != cloc.line || nloc.code != cloc.code) {
            break;
          }
        }
        run_microsteps();
      }
      break;
    default:
      // alert("unknown key " + e.code);
  }
}

function init_microstep(masidx, misidx) {
  var mas = state.macrosteps[masidx];
  var mis = mas.microsteps[misidx];
  var t = microsteps.length;
  if (t > 0 && microsteps[t - 1].tid != mas.tid) {
    curMegaStep++;
    megasteps[curMegaStep].startTime = t;
  }
  var mes = megasteps[curMegaStep];
  mes.nsteps++;
  microsteps[t] = {
    mesidx: curMegaStep,
    masidx: masidx,
    misidx: misidx,
    tid: parseInt(mas.tid),
    pc: parseInt(mis.pc),
    invfails: misidx == mas.microsteps.length - 1 ? mas.invfails : [],
    contexts: mas.contexts
  };

  if (mis.hasOwnProperty("npc")) {
    microsteps[t].npc = mis.npc;
  }
  else {
    microsteps[t].npc = mis.pc;
  }

  microsteps[t].code = getCode(microsteps[t].npc);

  microsteps[t].cloc = document.getElementById('C' + microsteps[t].npc);
  var npc = microsteps[t].npc - 4;
  if (npc < 0) {
    npc = 0;
  }
  microsteps[t].offset = document.getElementById('P' + npc);

  if (mis.hasOwnProperty("mode")) {
    microsteps[t].mode = mis.mode;
  }
  else {
    microsteps[t].mode = misidx == 0 ? "running" : microsteps[t-1].mode;
  }

  if (mis.hasOwnProperty("atomic")) {
    microsteps[t].atomic = mis["atomic"];
  }
  else if (misidx == 0) {
    microsteps[t].atomic = 0;
  }
  else {
    microsteps[t].atomic = microsteps[t-1].atomic;
  }

  if (mis.hasOwnProperty("readonly")) {
    microsteps[t].readonly = mis["readonly"];
  }
  else if (misidx == 0) {
    microsteps[t].readonly = 0;
  }
  else {
    microsteps[t].readonly = microsteps[t-1].readonly;
  }

  if (mis.hasOwnProperty("interruptlevel")) {
    microsteps[t].interruptlevel = mis["interruptlevel"];
  }
  else if (misidx == 0) {
    microsteps[t].interruptlevel = 0;
  }
  else {
    microsteps[t].interruptlevel = microsteps[t-1].interruptlevel;
  }

  if (mis.hasOwnProperty("choose")) {
    microsteps[t].choose = "chose " + json_string(mis["choose"]);
  }
  else {
    microsteps[t].choose = null;
  }
  if (mis.hasOwnProperty("print")) {
    microsteps[t].print = json_string(mis["print"]);
  }
  else {
    microsteps[t].print = null;
  }

  if (mis.hasOwnProperty("failure")) {
    microsteps[t].failure = mis.failure;
    microsteps[t].cloc = null;
  }
  else {
    microsteps[t].failure = null;
  }

  if (mis.hasOwnProperty("trace")) {
    microsteps[t].trace = mis.trace;
  }
  else if (misidx == 0) {
    microsteps[t].trace = [];
  }
  else {
    microsteps[t].trace = microsteps[t-1].trace;
  }

  // Update local variables
  var trl = microsteps[t].trace.length; 
  if (trl > 0 && mis.hasOwnProperty("local")) {
    // deep copy first
    microsteps[t].trace = JSON.parse(JSON.stringify(microsteps[t].trace))
    microsteps[t].trace[trl - 1].vars = mis.local;
  }

  if (mis.hasOwnProperty("shared")) {
    microsteps[t].shared = convert_vars(mis.shared);
  }
  else if (t == 0) {
    microsteps[t].shared = {};
  }
  else {
    microsteps[t].shared = microsteps[t-1].shared;
  }

  if (mis.hasOwnProperty("fp")) {
    microsteps[t].fp = mis.fp;
  }
  else if (misidx == 0) {
    microsteps[t].fp = 0;
  }
  else {
    microsteps[t].fp = microsteps[t-1].fp;
  }
  if (mis.hasOwnProperty("pop")) {
    var n = parseInt(mis.pop);
    microsteps[t].stack = microsteps[t-1].stack.slice(0,
                              microsteps[t-1].stack.length - n);
  }
  else if (misidx == 0) {
    microsteps[t].stack = [];
  }
  else {
    microsteps[t].stack = microsteps[t-1].stack;
  }
  if (mis.hasOwnProperty("push")) {
    var vals = mis.push.map(x => json_string(x));
    microsteps[t].stack = microsteps[t].stack.concat(vals);
  }
  // microsteps[t].choose = microsteps[t].stack;
}

function init_macrostep(i) {
  var mas = state.macrosteps[i];
  for (var j = 0; j < mas.microsteps.length; j++) {
    init_microstep(i, j);
  }
  for (var ctx = 0; ctx < mas.contexts.length; ctx++) {
    var tid = parseInt(mas.contexts[ctx].tid);
    threads[tid].name = mas.contexts[ctx].name;
  }
}

function dict_convert(d) {
  if (typeof d === "string") {
    return d;
  }
  result = "";
  for (var k in d) {
    if (result != "") {
      result += ", ";
    }
    result += dict_convert(k) + ":" + dict_convert(d[k]);;
  }
  return "{" + result + "}";
}

function get_shared(shared, path) {
  if (!shared.hasOwnProperty(path[0])) {
    return "";
  }
  if (path.length == 1) {
    return dict_convert(shared[path[0]]);
  }
  return get_shared(shared[path[0]], path.slice(1));
}

function get_status(ctx) {
  var status = ctx.mode;
  if (status != "terminated") {
    if (ctx.atomic > 0) {
      status += " atomic";
    }
    if (ctx.readonly > 0) {
      status += " read-only";
    }
    if (ctx.interruptlevel > 0) {
      status += " interrupts-disabled";
    }
  }
  return status;
}

function escapeHTML(s) {
  return s
     .replace(/&/g, "&amp;")
     .replace(/</g, "&lt;")
     .replace(/>/g, "&gt;")
     .replace(/"/g, "&quot;")
     .replace(/'/g, "&#039;");
}

function run_microstep(t) {
  var mis = microsteps[t];
  var mesrow = mestable.rows[mis.mesidx];
  mesrow.cells[3].innerHTML = mis.npc;

  for (var i = 0; i < vardir.length; i++) {
    mesrow.cells[i + 4].innerHTML = get_shared(mis.shared, vardir[i])
  }

  if (mis.failure != null) {
    stackTrace(mis.tid, mis.trace, mis.failure);
  }
  else if (mis.print != null) {
    stackTrace(mis.tid, mis.trace, "print " + mis.print);
    addToLog(mis.mesidx, mis.print)
  }
  else {
    stackTrace(mis.tid, mis.trace, mis.choose);
  }

  for (var ctx = 0; ctx < mis.contexts.length; ctx++) {
    var tid = parseInt(mis.contexts[ctx].tid);
    threads[tid].name = mis.contexts[ctx].name;
    threadtable.rows[tid].cells[1].innerHTML = get_status(mis.contexts[ctx]);
  }
  var mes = megasteps[mis.mesidx];
  if (t != mes.startTime + mes.nsteps - 1) {
    threadtable.rows[mis.tid].cells[1].innerHTML = get_status(mis);
  }
  threadtable.rows[mis.tid].cells[3].innerHTML = mis.stack.slice(mis.fp);

  if (mis.invfails.length > 0) {
    inv = mis.invfails[0];
    code = getCode(inv.pc);
    coderow.style.color = "red";
    coderow.innerHTML = code.file + ":" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code) + " (" + inv.reason + ")";
    mis.cloc = null;
  }
  else {
    coderow.style.color = "blue";
    coderow.innerHTML = mis.code.file + ":" + mis.code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(mis.code.code);
  }

  currCloc = mis.cloc;
  currOffset = mis.offset;
}

function run_microsteps() {
  coderow.innerHTML = "";
  if (currCloc != null) {
    currCloc.style.color = "black";
    currCloc = null;
  }
  for (var i = 0; i < nmegasteps; i++) {
    mestable.rows[i].cells[3].innerHTML = "";
    for (var j = 0; j < vardir.length; j++) {
      mestable.rows[i].cells[j + 4].innerHTML = "";
    }
    megasteps[i].log.innerHTML = "";
  }
  for (var tid = 0; tid < nthreads; tid++) {
    threadtable.rows[tid].cells[1].innerHTML = "init";
    stackTrace(tid, [], null);
    threadtable.rows[tid].cells[3].innerHTML = "";
  }
  for (var t = 0; t < currentTime; t++) {
    run_microstep(t);
  }
  for (var i = 0; i < nmegasteps; i++) {
    drawTimeLine(megasteps[i]);
  }
  container.scrollTop = currOffset.offsetTop;

  if (currCloc != null) {
    currCloc.style.color = "red";
  }

  var curmes = microsteps[currentTime == 0 ? 0 : (currentTime-1)].mesidx;
  for (var mes = 0; mes < nmegasteps; mes++) {
    var row = document.getElementById("mes" + mes)
    if (mes == curmes) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }

  var curtid = microsteps[currentTime == 0 ? 0 : (currentTime-1)].tid;
  for (var tid = 0; tid < nthreads; tid++) {
    var row = document.getElementById("thread" + tid)
    if (tid == curtid) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }
}

// Initialization starts here

for (var tid = 0; tid < nthreads; tid++) {
  threads[tid] = {
    name: "T" + tid,
    status: "normal",
    stack: [],
    stacktrace: [],
    tracetable: document.getElementById("threadinfo" + tid)
  };
}
for (let i = 0; i < nmegasteps; i++) {
  var canvas = document.getElementById("timeline" + i);
  megasteps[i] = {
    canvas: canvas,
    startTime: 0,
    nsteps: 0,
    contexts: [],
    log: document.getElementById("log" + i)
  };
  canvas.addEventListener('mousedown', function(e){handleClick(e, i)});
}
for (var j = 0; j < state.macrosteps.length; j++) {
  init_macrostep(j);
}

currentTime = totalTime = microsteps.length;
run_microsteps();
document.addEventListener('keydown', handleKeyPress);

</script>
</body>
</html>
